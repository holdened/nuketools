set cut_paste_input [stack 0]
version 13.2 v8
push $cut_paste_input
Group {
 name QC_Comp_Analyzer_Tool
 onCreate "import Jabuka\nimport sys\nimport os\nimport importlib\n\nif int(sys.version_info\[0]) >= 3:\n     from importlib import reload\n\nimport JabukaNuke\nimport re\nimport time\nimport nuke\nimport nukescripts\nfrom IEPipeline import ConfigRegistry\nfrom datetime import datetime\nfrom ShotgunDatabase import IEShotgunApi\n\n###########################################################################################################################################################\n\ndef QCCompAnalyzerBatchAnalyzeFromTerminal():\n    analyzer = None\n    \n    print('\\n\\nLoading latest version of QC_Comp_Analyzer_Tool')\n    \n    for node in nuke.allNodes('Group'):\n        if 'QC_Comp_Analyzer_Tool' in node.name():\n            nuke.delete(node)\n            break\n    \n    nuke.loadToolset('/data/tools/nuke/scriptlets/COMP/QC/QC_Comp_Analyzer_Tool.nk')\n    \n    if not nuke.exists('QC_Comp_Analyzer_Tool'):\n        print('\\nERROR: QC_Comp_Analyzer_Tool failed to load!')\n        print('\\nExiting...')\n        quit()\n        \n    else:\n        analyzer = nuke.toNode('QC_Comp_Analyzer_Tool')\n    \n        if nuke.scriptSave(nuke.root().name()):\n            print('Saving...')\n\n        QCCompAnalyzerBatchAnalyzeAndRender(analyzer)\n        \n        print('\\nExiting...')\n        quit()\n\n###########################################################################################################################################################\n        \ndef QCCompAnalyzerLoadWipRepoFromPlate(plate):\n\n    try:\n    \n        pathSplit = plate\['file'].evaluate().split('/')\n        \n        path = '/'+pathSplit\[3]+'/'+pathSplit\[5]+'/'+pathSplit\[7]\n        shotEntity = Jabuka.findEntity(path, onlyBase=False, throwException=False)\n        jfnShot = Jabuka.JFnEntity.create(shotEntity)\n        \n        wipRepoPath = path+'/assets/cine/'+pathSplit\[11]+'/plate_wipRepo'\n        wipRepo = Jabuka.findEntity(wipRepoPath, onlyApproved=True)\n        jfnWipRepo = Jabuka.JFn.JFnEntity.create(wipRepo)\n        getWipRepo = jfnWipRepo.getAction(\"get\")\n        getWipRepo()\n        \n        WIPREPO = nuke.selectedNode()\n        WIPREPO.hideControlPanel()\n        WIPREPO\['on_error'].setValue('black')\n    \n    except:\n        WIPREPO = None\n        \n    return WIPREPO\n        \n###########################################################################################################################################################\n\ndef QCCompAnalyzerLoadBalanceGrade(read):\n    \n    try:\n        # select some node connected to a Read\n        imgpath = read\['file'].value()\n        jobUtils = ConfigRegistry.ConfigRegistry().get(\"jobUtils\")\n        imgEntity = Jabuka.getEntityFromPath(imgpath)\n        shotEntity = imgEntity.typeSpecificAncestor(\"Shot\")\n        seqEntity = imgEntity.typeSpecificAncestor(\"Sequence\")\n        jobEntity = imgEntity.typeSpecificAncestor(\"Job\")\n        # this is the full ocio context for the shot... \n        # unfortunately it's the only way we currently have to get the color config\n        ocioContext = jobUtils.get(\"getOCIOContext\")(jobEntity.name, seqEntity.name, shotEntity.name, imgpath)\n        \n        balanceGradePath = ocioContext.get('IE_DEFAULT_NEUTRAL_CDL_PATH')\n    \n        if 'balanceGrade' in balanceGradePath or 'working_grade' in balanceGradePath:\n            # could get the cdl values from jabuka \n            cdl = Jabuka.getEntityFromPath(balanceGradePath)\n            jfn = Jabuka.JFnEntity.create(cdl)\n            action = jfn.getAction(\"get\")\n            action()\n            balanceGrade = nuke.selectedNode()\n            balanceGrade.setInput(0,read)\n        else:\n            balanceGrade = None\n    except:\n        balanceGrade = None\n        \n    return balanceGrade\n                \n###########################################################################################################################################################\n\ndef QCCompAnalyzerQueryShotgunVersionStatus(this):\n    loadedReads = \{\}\n    existingComps = \{\}\n    existingPlates = \{\}\n    existingComps = \{\}\n    existingCutRefs = \{\}\n    versionsToQc = \{\}\n    rawStatus = this\['batchanalyzeanddailystatus'].value().lower().split(',')\n    statusNames = \[]\n    department = 'comp'\n    \n    for status in rawStatus:\n        if status != '' and status != ' ':\n            statusNames.append(status.strip())\n    \n    job = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\[3]\n    \n    shotgunStatusProgress = nuke.ProgressTask('Loading Versions')\n    shotgunStatusProgress.setMessage('Organizing existing comps...')\n    \n    for read in nuke.allNodes('Read'):\n        if read.knob('ieDisplayName'):\n            shot = read\['file'].evaluate().split('/')\[7]\n            if read\['ieDisplayName'].value() == 'comp':\n                existingComps\[shot] = read\n            elif read\['ieDisplayName'].value() == 'plate':\n                existingPlates\[shot] = read\n            elif read\['ieDisplayName'].value() == 'shotCutRef':\n                existingCutRefs\[shot] = read\n    \n    shotgunStatusProgress.setMessage('Querying shotgun...')\n    \n    project = IEShotgunApi.Project.query(code=job).one(columns=\['id', 'code'])\n    \n    versions = \[]\n    \n    for status in statusNames:\n        versions = versions+IEShotgunApi.Version.query(\[\"sg_path_to_frames\", \"not_contains\", \"generic\"], \[\"sg_path_to_frames\", \"not_contains\", \"setup\"], project=project, sg_status_list=status, sg_department=department).all(columns=\['id','sg_path_to_frames','sg_department'])\n    \n    if versions != \[]:\n    \n        shotgunStatusProgress.setMessage('Query version 1 of '+str(len(versions)))\n        shotgunStatusProgress.setProgress(0)\n        \n        increment = 100.00/len(versions)\n        percent = 0\n        iterator = 0\n        \n        for version in versions:\n            \n            iterator = iterator+1\n            shotgunStatusProgress.setMessage('Query version '+str(iterator)+' of '+str(len(versions)))\n            \n            versionPathToFrames = version\['sg_path_to_frames']\n            \n            path = versionPathToFrames.split(' ')\[0].split('/')\n            \n            shotcode = path\[7]\n            jabukaPath = '/'+path\[3]+'/'+path\[5]+'/'+path\[7]+'/'+path\[9]+'/'+path\[10]+'/'+path\[11]+' v'+str(int(path\[13]))\n            \n            versionsToQc\[shotcode] = jabukaPath\n            \n            percent = percent+increment\n            shotgunStatusProgress.setProgress(int(percent))\n            \n        shotgunStatusProgress.setMessage('Clearing Jabuka cache...')\n        Jabuka.Environment.clearCaches()\n        \n        shotgunStatusProgress.setMessage('Loading version 1 of '+str(len(versionsToQc)))\n        shotgunStatusProgress.setProgress(0)\n        \n        increment = 100.00/len(versionsToQc)\n        percent = 0\n        iterator = 0\n        \n        for shotcode in versionsToQc:\n            \n            iterator = iterator+1\n            shotgunStatusProgress.setMessage('Loading version '+str(iterator)+' of '+str(len(versionsToQc)))\n            \n            jabukaPath = versionsToQc\[shotcode]\n            pathSplit = jabukaPath.split('/')\n            path = '/'+pathSplit\[1]+'/'+pathSplit\[2]+'/'+pathSplit\[3]\n            shotEntity = Jabuka.findEntity(path, onlyBase=False, throwException=False)\n            jfnShot = Jabuka.JFnEntity.create(shotEntity)\n            \n            \n            ### CHECK IF COMP EXISTS LOAD IF NOT ##################\n            \n            if shotcode in existingComps:\n                existingComp = existingComps\[shotcode]\n                versionToQc = str(jabukaPath.split('v')\[-1])\n                \n                existingComp\['ieUpdateMode'].setValue('latest')\n                jnfn = JabukaNuke.JNFn.JNFnAssetNode(existingComp)\n                jnfn.updateAssetNode()\n                \n                latestVersion = str(existingComp\['ieEntityVersion'].value())\n                \n                if versionToQc != latestVersion:\n                    existingComp\['ieUpdateVersions'].execute()\n                    existingComp\['ieEntityVersion'].setValue(versionToQc)\n                    \n                existingComp\['on_error'].setValue('black')\n                    \n                COMP = existingComp\n                \n            else:\n                comp = Jabuka.findEntity(jabukaPath)\n                jfnComp = Jabuka.JFn.JFnEntity.create(comp)\n                getComp = jfnComp.getAction(\"get\")\n                getComp()\n                nuke.selectedNode().hideControlPanel()\n                nuke.selectedNode()\['on_error'].setValue('black')\n                COMP = nuke.selectedNode()\n                \n            ### CHECK IF PLATE EXISTS LOAD IF NOT ##################\n            \n            if shotcode in existingPlates:\n                existingPlate = existingPlates\[shotcode]\n                existingPlate\['ieUpdateMode'].setValue('latestApproved')\n                jnfn = JabukaNuke.JNFn.JNFnAssetNode(existingPlate)\n                jnfn.updateAssetNode()\n                \n                if 'native_working_exr' in existingPlate\['ieVar'].values():\n                    existingPlate\['ieUseIdealVariation'].setValue(False)\n                    existingPlate\['ieVar'].setValue('native_working_exr')\n                    existingPlate\['ieUpdatePaths'].execute()\n                else:\n                    existingPlate\['ieUseIdealVariation'].setValue(True)\n                    \n                PLATE = existingPlate\n                \n            else:\n                try:\n                    defaultCineAsset = jfnShot.defaultCineAsset()\n                    defaultCineAssetPath = defaultCineAsset.virtualPath()\n                    platePath = defaultCineAssetPath+'/plate'\n                    plate = Jabuka.findEntity(platePath, onlyApproved=True)\n                    jfnPlate = JabukaNuke.JFn.JFnPlate.create(plate)\n                \n                    with Jabuka.Utils.ScopedRole( \"comp\" ):\n                        getPlate = jfnPlate.getAction(\"get\")\n                        getPlate()\n                        \n                    if nuke.selectedNode().knob('ieDisplayName'):\n                        if nuke.selectedNode()\['ieDisplayName'].value() in \['balanceGrade','working_grade']:\n                            PLATE = nuke.selectedNode().input(0)\n                        elif nuke.selectedNode()\['ieDisplayName'].value() == 'plate':\n                            PLATE = nuke.selectedNode()\n                    else:\n                        PLATE = None\n                            \n                    if PLATE:\n                        PLATE.hideControlPanel()\n                        PLATE\['on_error'].setValue('black')\n                except:\n                    PLATE = None\n                    \n            ### CHECK IF CUTREF EXISTS LOAD IF NOT ##################\n                    \n            if shotcode in existingCutRefs:\n                existingCutRef = existingCutRefs\[shotcode]\n                existingCutRef\['ieUpdateMode'].setValue('latestApproved')\n                jnfn = JabukaNuke.JNFn.JNFnAssetNode(existingCutRef)\n                jnfn.updateAssetNode()\n                \n                CUTREF = existingCutRef\n                \n            else:\n                try:\n                    cutPath = path+'/imageSequenceLibrary/editorial/shotCutRef'\n                    cut = Jabuka.findEntity(cutPath, onlyApproved=True)\n                    jfnCut = Jabuka.JFn.JFnEntity.create(cut)\n                    getCut = jfnCut.getAction(\"get\")\n                    getCut()\n                    \n                    CUTREF = nuke.selectedNode()\n                    CUTREF.hideControlPanel()\n                    CUTREF\['on_error'].setValue('black')\n                except:\n                    CUTREF = None\n                    \n            ### ADD READS TO SHOT DICTIONARY ##################\n            \n            loadedReads\[shotcode] = \[COMP,PLATE,CUTREF]\n                \n            percent = percent+increment\n            shotgunStatusProgress.setProgress(int(percent))\n        \n        shotgunStatusProgress.setMessage('Sorting read nodes...')\n        QCCompAnalyzerSortReads(this, nuke.allNodes())\n    \n    shotgunStatusProgress.setMessage('Finishing up...')\n    shotgunStatusProgress.setProgress(100)\n    \n    return loadedReads\n    \n###########################################################################################################################################################\n\ndef QCCompAnalyzerBatchAnalyzeAndRender(this):\n    \n    skippedAnalyzed = \[]\n    skippedMissing = \[]\n    dailied = \[]\n    analyze = \{\}\n    \n    batchAnalyzeProgress = nuke.ProgressTask('Batch Analyze')\n    batchAnalyzeProgress.setMessage('Waiting for user input...')\n    batchAnalyzeProgress.setProgress(0)\n    \n    if not nuke.GUI:\n        this\['batchanalyzeanddailywhich'].setValue('Shotgun Version Status')\n        print('\\n\\nGathering versions to analyze from Shotgun...')\n    \n    with nuke.root():\n        \n        ####### Gather analysis history ########\n        job = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\[3]\n        path = '/data/jobs/'+job+'/tools/nuke/scriptlets/pipeline/CompAnalyzer/'\n        filename = job+'-AnalyzerHistory.py'\n        filePath = path+filename\n        \n        if os.path.exists(filePath):\n            file = open(filePath, 'r')\n            history = file.read()\n            file.close()\n        else:\n            history = ''\n            \n        if this\['batchanalyzeanddailywhich'].value() == 'Pick Shot Codes':\n            analyze = QCCompAnalyzerLoadShots(this)\n        elif this\['batchanalyzeanddailywhich'].value() == 'Shotgun Version Status':\n            if not nuke.GUI:\n                print('\\nLoading versions from Jabuka...')\n            analyze = QCCompAnalyzerQueryShotgunVersionStatus(this)\n        elif this\['batchanalyzeanddailywhich'].value() == 'Selected':\n            for read in nuke.selectedNodes('Read'):\n                if read.knob('ieDisplayName'): \n                    if read\['ieDisplayName'].value() == 'comp':\n                        shotcode = read\['file'].evaluate().split('/')\[7]\n                        analyze\[shotcode] = \[read,None]\n            \n        if analyze:\n            if not nuke.GUI:\n                print('\\nAnalyzing the following shots from Shotgun:')\n                for shotcode in analyze:\n                    print(shotcode)\n            \n            this\['autorun'].setValue(True)\n            this\['autorenderviews'].setValue(True)\n            this\['autodaily'].setValue(True)\n            this\['loadfrominput'].setValue(True)\n            this\['autoloadplatevalues'].setValue(True)\n            \n            batchAnalyzeProgress.setMessage('Clearing Jabuka cache...')\n            \n            Jabuka.Environment.clearCaches()\n            \n            increment = 100.00/len(analyze)\n            percent = 0\n            iterator = 0\n            warn = True\n            \n            batchAnalyzeProgress.setMessage('Shot 1 of '+str(len(analyze)))\n            \n            for shotcode in analyze:\n                if batchAnalyzeProgress.isCancelled():\n                    break\n                \n                iterator = iterator+1\n                \n                comp = analyze\[shotcode]\[0]\n                plate = analyze\[shotcode]\[1]\n                \n                if comp:\n                \n                    if batchAnalyzeProgress.isCancelled():\n                        break\n                    \n                    compFile = comp\['file'].evaluate().split('/')\[-1].split('.')\[0]\n                    \n                    if compFile not in history:\n                        if not nuke.GUI:\n                            print('\\nAnalyzing '+shotcode+'...')\n                            if warn:\n                                print('\\nUser can ignore \"Setting knob values from validate\" Warnings...\\n')\n                                warn = False\n                        \n                        batchAnalyzeProgress.setMessage('Shot '+str(iterator)+' of '+str(len(analyze))+' (Analyzing) '+shotcode)\n                        \n                        this.setInput(0, comp)\n                        \n                        balanceGrade = None\n                        \n                        if plate:\n                            for node in plate.dependent(nuke.INPUTS | nuke.HIDDEN_INPUTS):\n                                if node.knob('ieDisplayName'):\n                                    if node\['ieDisplayName'].value() in \['balanceGrade','working_grade']:\n                                        balanceGrade = node\n                                        break\n                                    \n                        if balanceGrade:\n                            this.setInput(1, nuke.toNode(balanceGrade.name()))\n                        else:\n                            this.setInput(1, plate)\n                        \n                        threading.Thread(QCCompAnalyzerLoadValues(this, 'defaults', False))\n                        threading.Thread(QCCompAnalyzerAnalyze(this, False))\n                        \n                        dailied.append(shotcode)\n                    \n                    else:\n                        skippedAnalyzed.append(shotcode)\n                        if not nuke.GUI:\n                            print('\\nSkipping '+shotcode+' because it has already been analyzed.')\n                else:\n                    skippedMissing.append(shotcode)\n                    if not nuke.GUI:\n                        print('\\nSkipping '+shotcode+' because comp does not exist.')\n                \n                percent = percent+increment\n                batchAnalyzeProgress.setProgress(int(percent))\n                \n            if not batchAnalyzeProgress.isCancelled():\n                if dailied:\n                    dailymessage = '\\n\\nDailies should show up shortly.'\n                    message = 'The following shots were analyzed and sent to the farm!\\n'\n                    for shot in dailied:\n                        message = message+'\\n'+shot\n                else:\n                    message = ''\n                    dailymessage = ''\n                \n                if skippedAnalyzed:\n                    message = message+'\\n\\nThe following shots were skipped because they have already had the current version analyzed and results dailied:\\n'\n                    for shot in skippedAnalyzed:\n                        message = message+'\\n'+shot\n                        \n                if skippedMissing:\n                    message = message+'\\n\\nThe following shots were skipped because no Comp exists:\\n'\n                    for shot in skippedMissing:\n                        message = message+'\\n'+shot\n                \n                if nuke.GUI:\n                    nuke.message(message+dailymessage)\n                else:\n                    print('\\n'+message+dailymessage)\n\n    batchAnalyzeProgress.setMessage('Finishing up...')\n    batchAnalyzeProgress.setProgress(100)\n    \n###########################################################################################################################################################\n\ndef QCCompAnalyzerLoadShots(this):\n\n    sequenceEntities = \[]\n    sequenceTrash = \[]\n    shotTrash = \[]\n    sequenceDict = \{\}\n    shotDictAll = \{\}\n    shotEntitiesAll = \[]\n    loadedReads = \{\}\n    existingComps = \{\}\n    existingPlates = \{\}\n    existingCutRefs = \{\}\n    \n    job = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\[3]\n    \n    for read in nuke.allNodes('Read'):\n        if read.knob('ieDisplayName'):\n            shot = read\['file'].evaluate().split('/')\[7]\n            if read\['ieDisplayName'].value() == 'comp':\n                existingComps\[shot] = read\n            elif read\['ieDisplayName'].value() == 'plate':\n                existingPlates\[shot] = read\n            elif read\['ieDisplayName'].value() == 'shotCutRef':\n                existingCutRefs\[shot] = read\n    \n    loadProgress = nuke.ProgressTask('Load '+job+' Shots')\n    loadProgress.setMessage('Building '+job+' shot list')\n    loadProgress.setProgress(0)\n    \n    jobEntity = Jabuka.findEntity(job)\n    sequenceEntitiesAll = jobEntity.typeSpecificDescendants('Sequence', onlyBase=True, onlyApproved=True, onlyVisible=True, ignoreTrash=True)\n    \n    for seq in sequenceEntitiesAll:\n        if 'test' in seq.name or 'rnd' in seq.name or 'build' in seq.name or 'setup' in seq.name:\n            sequenceTrash.append(seq)\n            \n    sequenceEntities = \[x for x in sequenceEntitiesAll if x not in sequenceTrash]\n    \n    # Create Sequence Dict\n    \n    loadProgress.setProgress(5)\n    \n    increment = 70.00/len(sequenceEntities)\n    percent = 5\n    \n    for seq in sequenceEntities:\n        \n        if loadProgress.isCancelled():\n            break\n        \n        shots = seq.typeSpecificDescendants('Shot', onlyBase=True, onlyApproved=True, onlyVisible=True, ignoreTrash=True)\n        shotEntitiesAll = shotEntitiesAll+shots\n        shotDict = \{\}\n        \n        for shot in shots:\n            shotName = str(shot.name)\n            if 'test' not in shotName and 'generic' not in shotName and 'rnd' not in shotName and 'build' not in shotName:\n                shotDict\[shotName] = shot\n                shotDictAll\[shotName] = shot\n        \n        sequenceName = str(seq.name)\n        sequenceDict\[sequenceName] = shotDict\n        \n        percent = percent+increment\n        loadProgress.setProgress(int(percent))\n    \n    # Create PythonPanel\n    if not loadProgress.isCancelled():\n        loadProgress.setMessage('Building '+job+' shot panel')\n    else:\n        loadProgress.setMessage('Cancelling...')\n    \n    p = nukescripts.PythonPanel('Choose Shots to Load')\n    \n    expandAllScript = \"\"\"thisPanel = nuke.thisNode()\nhidden = 0\n\nfor knob in thisPanel.knobs().keys():\n    if not thisPanel.knobs()\[knob].visible():\n        hidden = hidden+1\n    \nif hidden == 0:\n    for knob in thisPanel.knobs().keys():\n        if 'shot' in knob:\n            thisPanel.knobs()\[knob].setVisible(False)\nelse:\n    for knob in thisPanel.knobs().keys():\n        if 'shot' in knob:\n            thisPanel.knobs()\[knob].setVisible(True)\"\"\"\n    \n    all = nuke.Boolean_Knob('all','&nbsp;<font color=grey><b><font size=5>ALL SHOTS',False)\n    p.addKnob(all)\n    \n    sequenceExpandAll = nuke.PyScript_Knob('expandAll','▼',expandAllScript)\n    sequenceExpandAll.clearFlag(nuke.STARTLINE)\n    p.addKnob(sequenceExpandAll)\n    \n    p.addKnob(nuke.Text_Knob('divider','',''))\n    \n    seqNumber = 0\n    \n    increment = 20.00/len(sequenceEntities)\n    percent = 75\n    \n    for seq in sequenceEntities:\n        \n        if loadProgress.isCancelled():\n            break\n        \n        shotNumber = 0\n        seqNumber = seqNumber+1\n        \n        seqShotEntities = \[]\n        seqShotEntities = seq.typeSpecificDescendants('Shot', onlyBase=True, onlyApproved=True, onlyVisible=True, ignoreTrash=True)\n        \n        sequenceName = str(seq.name)\n        \n        sequenceKnob = nuke.Boolean_Knob('seq_'+str(seqNumber),'&nbsp;<font color=grey><b><font size=5>'+sequenceName,False)\n        sequenceKnob.setFlag(nuke.STARTLINE)\n        p.addKnob(sequenceKnob)\n        \n        expandScript = \"\"\"thisPanel = nuke.thisNode()\nseqNumber = 'seq_'+str(nuke.thisKnob().name().split('expand_')\[-1])+'_shot_'\nfor knob in thisPanel.knobs().keys():\n    if seqNumber in knob:\n        if thisPanel.knobs()\[knob].visible():\n            thisPanel.knobs()\[knob].setVisible(False)\n        else:\n            thisPanel.knobs()\[knob].setVisible(True)\"\"\"\n        \n        sequenceExpand = nuke.PyScript_Knob('expand_'+str(seqNumber),'▼',expandScript)\n        sequenceExpand.clearFlag(nuke.STARTLINE)\n        p.addKnob(sequenceExpand)\n        \n        for shot in seqShotEntities:\n            \n            if loadProgress.isCancelled():\n                break\n            \n            shotName = str(shot.name)\n            if 'test' not in shotName and 'rnd' not in shotName and 'build' not in shotName and 'generic' not in shotName:\n                shotNumber = shotNumber+1\n                shotKnob = nuke.Boolean_Knob('seq_'+str(seqNumber)+'_shot_'+str(shotNumber),shotName,False)\n                shotKnob.setFlag(nuke.STARTLINE)\n                shotKnob.setVisible(False)\n                p.addKnob(shotKnob)\n                \n        p.addKnob(nuke.Text_Knob('divider'+str(seqNumber),'',''))\n        \n        percent = percent+increment\n        loadProgress.setProgress(int(percent))\n                \n    panelKnobChanged = \"\"\"if 'seq_' in nuke.thisKnob().name() and 'shot' not in nuke.thisKnob().name():\n    panel = nuke.thisNode()\n    thisKnob = nuke.thisKnob()\n    seqName = thisKnob.name()\n    seqNumber = 'seq_'+str(seqName.split('_')\[-1])+'_shot'\n    seqKnobLabel = thisKnob.label()\n    \n    for knob in panel.knobs().keys():\n        if seqNumber in knob:\n            if thisKnob.value() == True:\n                panel.knobs()\[knob].setValue(True)\n                panel.knobs()\[knob].setVisible(True)\n            else:\n                panel.knobs()\[knob].setValue(False)\n                panel.knobs()\[knob].setVisible(False)\n    \n    if thisKnob.value() == True:\n        thisKnob.setLabel(seqKnobLabel.replace('<font color=grey>','<font color=white>'))\n        thisKnob.clearFlag(0)\n    else:\n        thisKnob.setLabel(seqKnobLabel.replace('<font color=white>','<font color=grey>'))\n        thisKnob.clearFlag(0)\n            \nif nuke.thisKnob().name() == 'all':\n    panel = nuke.thisNode()\n    for knob in panel.knobs().keys():\n        if 'seq' in knob:\n            if nuke.thisKnob().value():\n                panel.knobs()\[knob].setValue(True)\n                panel.knobs()\[knob].setLabel(panel.knobs()\[knob].label().replace('<font color=grey>','<font color=white>'))\n                panel.knobs()\[knob].clearFlag(0)\n                panel.knobs()\[knob].setVisible(True)\n            else:\n                panel.knobs()\[knob].setValue(False)\n                panel.knobs()\[knob].setLabel(panel.knobs()\[knob].label().replace('<font color=white>','<font color=grey>'))\n                panel.knobs()\[knob].clearFlag(0)\n                if 'shot' in knob:\n                    panel.knobs()\[knob].setVisible(False)\n                    \n    if nuke.thisKnob().value():\n        nuke.thisKnob().setLabel(nuke.thisKnob().label().replace('<font color=grey>','<font color=white>'))\n        nuke.thisKnob().clearFlag(0)\n    else:\n        nuke.thisKnob().setLabel(nuke.thisKnob().label().replace('<font color=white>','<font color=grey>'))\n        nuke.thisKnob().clearFlag(0)\n                    \nif 'seq_' in nuke.thisKnob().name():\n    panel = nuke.thisNode()\n    if not nuke.thisKnob().value():\n        panel.knobs()\['all'].setLabel(panel.knobs()\['all'].label().replace('<font color=white>','<font color=grey>'))\n        panel.knobs()\['all'].clearFlag(0)\n    else:\n        allSelected = True\n        \n        for knob in panel.knobs().keys():\n            if not panel.knobs()\[knob].value() and 'shot' in panel.knobs()\[knob].name():\n                allSelected = False\n                break\n        \n        if allSelected:\n            panel.knobs()\['all'].setLabel(panel.knobs()\['all'].label().replace('<font color=grey>','<font color=white>'))\n            panel.knobs()\['all'].clearFlag(0)\n\nif '_shot_' in nuke.thisKnob().name():\n    panel = nuke.thisNode()\n    knobName = nuke.thisKnob().name()\n    seqDisable = True\n    seqKnob = panel.knobs()\[knobName.split('_shot_')\[0]]\n    seqShot = knobName.split('_shot_')\[0]+'_'\n    shotCount = 0\n    enabledCount = 0\n            \n    for knob in panel.knobs().keys():\n        if seqShot in knob:\n            shotCount = shotCount+1\n            if panel.knobs()\[knob].value():\n                enabledCount = enabledCount+1\n    \n    if enabledCount == 0:\n        for knob in panel.knobs().keys():\n            if seqShot in knob:\n                panel.knobs()\[knob].setVisible(False)\n                seqKnob.setValue(False)\n    else:\n        for knob in panel.knobs().keys():\n            if seq in knob:\n                seqKnob.setValue(True)\n    \n    seqLabel = seqKnob.label()\n                \n    if enabledCount < shotCount:\n        seqKnob.setLabel(seqLabel.replace('<font color=white>','<font color=grey>'))\n        seqKnob.clearFlag(0)\n    else:\n        seqKnob.setLabel(seqLabel.replace('<font color=grey>','<font color=white>'))\n        seqKnob.clearFlag(0)\n        \n    if nuke.thisKnob().value():\n        seqKnob.setValue(True)\"\"\"\n    \n    loadProgress.setProgress(99)\n    \n    if not loadProgress.isCancelled():\n        p.knobs()\['knobChanged'].setValue(panelKnobChanged)\n        p.setMinimumSize(400, 600)\n        loadProgress.setMessage('Awaiting user input...')\n    \n        shotsToLoad = \[]\n        \n        if p.showModalDialog():\n            for knob in p.knobs().keys():\n                if 'shot' in knob:\n                    if p.knobs()\[knob].value():\n                        shotcode = p.knobs()\[knob].label()\n                        path = str(shotDictAll\[shotcode].virtualPath())\n                        shotsToLoad.append(path)\n                    \n        if shotsToLoad != \[]:\n                   \n            loadProgress.setMessage('Loading shot 1 of '+str(len(shotsToLoad)))\n            increment = 100/len(shotsToLoad)/3\n            percent = 0\n            iterator = 0\n    \n            with nuke.root():\n                for shotPath in shotsToLoad:\n                    if loadProgress.isCancelled():\n                        break\n                        \n                    iterator = iterator+1\n                    \n                    # Get Shot #############################################\n                    shotName = shotPath.split('/')\[3]\n                    shot = Jabuka.findEntity(shotPath, onlyBase=False, throwException=False)\n                    path = shot.virtualPath()\n                    jfnShot = Jabuka.JFnEntity.create(shot)\n                    \n                    # Get Plate From Default Cine Asset ####################\n                    \n                    Jabuka.Environment.clearCaches()\n                    \n                    if loadProgress.isCancelled():\n                        break\n                            \n                    loadProgress.setMessage('Loading shot '+str(iterator)+' of '+str(len(shotsToLoad))+' (plate)')\n                    \n                    if str(shot.name) in existingPlates.keys():\n                        readNode = existingPlates\[str(shot.name)]\n                        readNode\['ieUpdateMode'].setValue('latestApproved')\n                        jnfn = JabukaNuke.JNFn.JNFnAssetNode(readNode)\n                        jnfn.updateAssetNode()\n                        PLATE = readNode\n                    else:\n                        try:\n                            defaultCineAsset = jfnShot.defaultCineAsset()\n                            defaultCineAssetPath = defaultCineAsset.virtualPath()\n                            platePath = defaultCineAssetPath+'/plate'\n                            plate = Jabuka.findEntity(platePath, onlyApproved=True)\n                            jfnPlate = JabukaNuke.JFn.JFnPlate.create(plate)\n                            \n                            with Jabuka.Utils.ScopedRole( \"comp\" ):\n                                getPlate = jfnPlate.getAction(\"get\")\n                                getPlate()\n                        \n                            if nuke.selectedNode().knob('ieDisplayName'):\n                                if nuke.selectedNode()\['ieDisplayName'].value() in \['balanceGrade','working_grade']:\n                                    PLATE = nuke.selectedNode().input(0)\n                                elif nuke.selectedNode()\['ieDisplayName'].value() == 'plate':\n                                    PLATE = nuke.selectedNode()\n                            else:\n                                PLATE = None\n                            \n                            if PLATE:\n                                PLATE.hideControlPanel()\n                                PLATE\['on_error'].setValue('black')\n                        except:\n                            PLATE = None\n                    \n                    percent = percent+increment\n                    loadProgress.setProgress(int(percent))\n                    \n                    # Get Comp  ###########################################\n                    if loadProgress.isCancelled():\n                        break\n                        \n                    loadProgress.setMessage('Loading shot '+str(iterator)+' of '+str(len(shotsToLoad))+' (comp)')\n                    \n                    if str(shot.name) in existingComps.keys():\n                        readNode = existingComps\[str(shot.name)]\n                        readNode\['ieUpdateMode'].setValue('latest')\n                        jnfn = JabukaNuke.JNFn.JNFnAssetNode(readNode)\n                        jnfn.updateAssetNode()\n                        COMP = readNode\n                    else:\n                        try:\n                            compPath = path+'/imageSequenceLibrary/comp/comp'\n                            comp = Jabuka.findEntity(compPath, onlyApproved=False)\n                            jfnComp = Jabuka.JFn.JFnEntity.create(comp)\n                            getComp = jfnComp.getAction(\"get\")\n                            getComp()\n                            nuke.selectedNode().hideControlPanel()\n                            COMP = nuke.selectedNode()\n                            nuke.selectedNode()\['on_error'].setValue('black')\n                        except:\n                            COMP = None\n                            \n                    percent = percent+increment\n                    loadProgress.setProgress(int(percent))\n                \n                    # Get CutRef  ##########################################\n                    if loadProgress.isCancelled():\n                        break\n                        \n                    loadProgress.setMessage('Loading shot '+str(iterator)+' of '+str(len(shotsToLoad))+' (shotCutRef)')\n                    \n                    if str(shot.name) in existingCutRefs.keys():\n                        readNode = existingCutRefs\[str(shot.name)]\n                        readNode\['ieUpdateMode'].setValue('latestApproved')\n                        jnfn = JabukaNuke.JNFn.JNFnAssetNode(readNode)\n                        jnfn.updateAssetNode()\n                        CUTREF = readNode\n                    else:\n                        try:\n                            cutPath = path+'/imageSequenceLibrary/editorial/shotCutRef'\n                            cut = Jabuka.findEntity(cutPath, onlyApproved=True)\n                            jfnCut = Jabuka.JFn.JFnEntity.create(cut)\n                            getCut = jfnCut.getAction(\"get\")\n                            getCut()\n                            nuke.selectedNode().hideControlPanel()\n                            CUTREF = nuke.selectedNode()\n                            nuke.selectedNode()\['on_error'].setValue('black')\n                        except:\n                            CUTREF = None\n                            \n                    loadedReads\[shotName] = \[COMP,PLATE,CUTREF]\n                            \n                    percent = percent+increment\n                    loadProgress.setProgress(int(percent))\n    \n    \n    QCCompAnalyzerSortReads(this, nuke.allNodes())\n    \n    return loadedReads\n    \n    loadProgress.setMessage('Finishing up...')\n    loadProgress.setProgress(100)\n\n###########################################################################################################################################################\n    \ndef QCCompAnalyzerConformSearch(input):\n    output = \"\"\n    input = input.replace(\" \", \"-\")\n    \n    if input.find('-') == -1:\n        if input.isdigit():\n            pass\n        else:\n            input = re.split('(\\d+)', input)\n            input\[:] = \[x for x in input if x]\n    else:\n        input = input.split('-')\n    \n    if type(input) != list:\n        return input.rjust(4, '0') \n    else:\n        if len(input) == 3:\n            cepisode = input\[0].upper()\n            csequence = input\[1].upper()\n            cshot = input\[-1].rjust(4, '0')   \n            return cepisode+\"-\"+csequence+\"-\"+cshot\n        elif len(input) == 2:\n            csequence = input\[0].upper()\n            cshot = input\[-1].rjust(4, '0')  \n            return csequence+\"-\"+cshot\n\n###########################################################################################################################################################\n\ndef QCCompAnalyzerLoadPlate(comp):\n    \n    this = nuke.thisNode()\n    loaded = None\n    read = comp\n    \n    with nuke.root():\n        \n        if read != this and read.Class() == 'Read':\n        \n            file = read\['file'].evaluate().split('/')\n            path = '/'+file\[3]+'/'+file\[5]+'/'+file\[7]\n    \n            # Get Shot #############################################\n            \n            shot = Jabuka.findEntity(path, onlyBase=False)\n            jfnShot = Jabuka.JFnEntity.create(shot)\n            \n            # Get Plate From Default Cine Asset ####################\n            \n            Jabuka.Environment.clearCaches()\n                \n            try:\n                defaultCineAsset = jfnShot.defaultCineAsset()\n                defaultCineAssetPath = defaultCineAsset.virtualPath()\n                platePath = defaultCineAssetPath+'/plate'\n                plate = Jabuka.findEntity(platePath, onlyApproved=True)\n                jfnPlate = JabukaNuke.JFn.JFnPlate.create(plate)\n                    \n                with Jabuka.Utils.ScopedRole( \"comp\" ):\n                    getPlate = jfnPlate.getAction(\"get\")\n                    getPlate()\n                        \n                if nuke.selectedNode().knob('ieDisplayName'):\n                    if nuke.selectedNode()\['ieDisplayName'].value() in \['balanceGrade','working_grade']:\n                        PLATE = nuke.selectedNode().input(0)\n                    elif nuke.selectedNode()\['ieDisplayName'].value() == 'plate':\n                        PLATE = nuke.selectedNode()\n                else:\n                    PLATE = None\n                            \n                if PLATE:\n                    PLATE.hideControlPanel()\n                    PLATE\['on_error'].setValue('black')\n                    \n                    loaded = PLATE\n            except:\n                pass\n    \n    return loaded\n    \n###########################################################################################################################################################\n\ndef QCCompAnalyzerLoadPlatesCompsCuts():\n    \n    this = nuke.thisNode()\n    readNodes = \{\}\n    loaded = \[]\n    shots = \{\}\n    \n    with nuke.root():\n        \n        loadProgress = nuke.ProgressTask('Loading Reads')\n        loadProgress.setMessage('Checking missing...')\n        \n        for read in nuke.allNodes('Read'):\n            if read.knob('ieDisplayName'):\n                if read\['ieDisplayName'].value() in \['comp','plate','shotCutRef']:\n                    file = read\['file'].evaluate().split('/')\n                    path = '/'+file\[3]+'/'+file\[5]+'/'+file\[7]\n                    try:\n                        readNodes\[path] = readNodes\[path]+\[read\['ieDisplayName'].value()]\n                    except:\n                        readNodes\[path] = \[read\['ieDisplayName'].value()]\n        if not len(readNodes):\n            loadProgress.setProgress(100)\n            nuke.message('No Comps, Plates or CutRefs found in script.')\n            return\n        \n        loadProgress.setMessage('Loading shot 1 of '+str(len(readNodes)))\n        increment = 100/len(readNodes)/3\n        percent = 0\n        iterator = 0\n        \n        for path in readNodes:\n            if loadProgress.isCancelled():\n                break\n            \n            iterator = iterator+1\n            \n            if 'comp' in readNodes\[path]:\n                compMissing = False\n            else:\n                compMissing = True\n                \n            if 'plate' in readNodes\[path]:\n                plateMissing = False\n            else:\n                plateMissing = True\n                \n            if 'shotCutRef' in readNodes\[path]:\n                shotCutRefMissing = False\n            else:\n                shotCutRefMissing = True\n            \n            # Get Shot #############################################\n            \n            shot = Jabuka.findEntity(path, onlyBase=False)\n            jfnShot = Jabuka.JFnEntity.create(shot)\n            \n            # Get Plate From Default Cine Asset ####################\n            \n            if plateMissing or compMissing or shotCutRefMissing:\n                Jabuka.Environment.clearCaches()\n            \n            if plateMissing:\n                \n                loadProgress.setMessage('Loading shot '+str(iterator)+' of '+str(len(readNodes))+' (plate)')\n                \n                try:\n                    defaultCineAsset = jfnShot.defaultCineAsset()\n                    defaultCineAssetPath = defaultCineAsset.virtualPath()\n                    platePath = defaultCineAssetPath+'/plate'\n                    plate = Jabuka.findEntity(platePath, onlyApproved=True)\n                    jfnPlate = JabukaNuke.JFn.JFnPlate.create(plate)\n                    \n                    with Jabuka.Utils.ScopedRole( \"comp\" ):\n                        getPlate = jfnPlate.getAction(\"get\")\n                        getPlate()\n                            \n                    if nuke.selectedNode().knob('ieDisplayName'):\n                        if nuke.selectedNode()\['ieDisplayName'].value() in \['balanceGrade','working_grade']:\n                            PLATE = nuke.selectedNode().input(0)\n                        elif nuke.selectedNode()\['ieDisplayName'].value() == 'plate':\n                            PLATE = nuke.selectedNode()\n                    else:\n                        PLATE = None\n                                \n                    if PLATE:\n                        PLATE.hideControlPanel()\n                        PLATE\['on_error'].setValue('black')\n                except:\n                    pass\n            \n            percent = percent+increment\n            loadProgress.setProgress(int(percent))\n            \n            # Get Comp  ###########################################\n            if compMissing:\n                \n                loadProgress.setMessage('Loading shot '+str(iterator)+' of '+str(len(readNodes))+' (comp)')\n                \n                try:\n                    compPath = path+'/imageSequenceLibrary/comp/comp'\n                    comp = Jabuka.findEntity(compPath, onlyApproved=False)\n                    jfnComp = Jabuka.JFn.JFnEntity.create(comp)\n                    getComp = jfnComp.getAction(\"get\")\n                    getComp()\n                    nuke.selectedNode().hideControlPanel()\n                except:\n                    pass\n                    \n            percent = percent+increment\n            loadProgress.setProgress(int(percent))\n    \n            # Get CutRef  ##########################################\n            if shotCutRefMissing:\n                \n                loadProgress.setMessage('Loading shot '+str(iterator)+' of '+str(len(readNodes))+' (shotCutRef)')\n                \n                try:\n                    cutPath = path+'/imageSequenceLibrary/editorial/shotCutRef'\n                    cut = Jabuka.findEntity(cutPath, onlyApproved=True)\n                    jfnCut = Jabuka.JFn.JFnEntity.create(cut)\n                    getCut = jfnCut.getAction(\"get\")\n                    getCut()\n                    nuke.selectedNode().hideControlPanel()\n                except:\n                    pass\n                    \n            percent = percent+increment\n            loadProgress.setProgress(int(percent))\n    \n    loadProgress.setMessage('Finishing up...')\n    loadProgress.setProgress(100)\n                    \n###########################################################################################################################################################\n                    \ndef QCCompAnalyzerSortReads(this, readNodes):\n        \n    shots = \{\}\n    readNodes.sort()\n    shotCodes = \[]\n    \n    for read in readNodes:\n        if read.knob('ieDisplayName'):\n            if read\['ieDisplayName'].value() in \['comp','plate','shotCutRef']:\n                shotCode = read\['file'].evaluate().split('/')\[7]\n                if shotCode not in shotCodes:\n                    shotCodes.append(shotCode)\n                \n                if shotCode not in shots:\n                    shots\[shotCode] = \{'comp':None,'plate':None,'shotCutRef':None\}\n            \n                if read\['ieDisplayName'].value() == 'comp':\n                    shots\[shotCode]\['comp'] = read\n                    \n                if read\['ieDisplayName'].value() == 'plate':\n                    shots\[shotCode]\['plate'] = read\n                    \n                if read\['ieDisplayName'].value() == 'shotCutRef':\n                    shots\[shotCode]\['shotCutRef'] = read\n   \n    X = this\['xpos'].value()+200\n    cutY = this\['ypos'].value()-215\n    plateY = this\['ypos'].value()-15\n    compY = this\['ypos'].value()+185\n    \n    shotCodes.sort()\n    \n    for shot in shotCodes:\n        if shots\[shot]\['shotCutRef'] != None:\n            shots\[shot]\['shotCutRef']\['xpos'].setValue(X)\n            shots\[shot]\['shotCutRef']\['ypos'].setValue(cutY)\n        if shots\[shot]\['plate'] != None:\n            shots\[shot]\['plate']\['xpos'].setValue(X)\n            shots\[shot]\['plate']\['ypos'].setValue(plateY)\n            \n            for node in shots\[shot]\['plate'].dependent(nuke.INPUTS | nuke.HIDDEN_INPUTS):\n                if node.knob('ieDisplayName'):\n                    if node\['ieDisplayName'].value() in \['balanceGrade','working_grade']:\n                        node\['xpos'].setValue(X)\n                        node\['ypos'].setValue(plateY+96)\n                        break\n            \n        if shots\[shot]\['comp'] != None:\n            shots\[shot]\['comp']\['xpos'].setValue(X)\n            shots\[shot]\['comp']\['ypos'].setValue(compY)\n        \n        X = X+100\n\n###########################################################################################################################################################\n\ndef QCCompAnalyzerTopNode(node, input):\n    if node.input(input):\n        if node.input(input).knob('which') and not node.input(input)\['disable'].value():\n            which = int(node.input(input)\['which'].getValue())\n            return QCCompAnalyzerTopNode(node.input(input), which)\n        else:\n            return QCCompAnalyzerTopNode(node.input(input), 0)\n    else:\n        return node\n\n###########################################################################################################################################################\n    \ndef QCCompAnalyzerRender(this=nuke.thisNode(), confirmation=True):\n   \n    # Get topnode (incase there is a dot before the comp read node)\n    comp = QCCompAnalyzerTopNode(this, 0)\n\n    # Check if comp is connected, warn if not\n    if not this\['topnoderead'].value():\n        nuke.message('No Comp connected!')\n    else:\n        # Perform actions in root because this node is a group\n        with nuke.root():\n            \n            # Set variables\n            write = None\n            created = False\n            file = comp\['file'].evaluate().split('/')\n            readNode = file\[7]+' v'+file\[13]\n            jabukaLocation = '/'+file\[3]+'/'+file\[5]+'/'+file\[7]\n            jabukaUrl = '/'+file\[3]+'/'+file\[5]+'/'+file\[7]+'/imageSequenceLibrary/qc/comp'\n            metadata = comp.metadata()\n            \n            if comp.knob('ieVersionCreator'):\n                artist = ' ('+comp\['ieVersionCreator'].value()+')'\n            else:\n                artist = ' ('+Jabuka.Environment.getCurrentUser()+')'\n            \n            # Set channel list\n            channels = ''\n            channelsRender = ''\n    \n            if this.input(0) != None and this\['topnoderead'].value():\n                for c in this.input(0).channels():\n                    if channels == '':\n                        channels = c\n                        channelsRender = '-'+c\n                    else:\n                        channels = channels+', '+c\n                        channelsRender = channelsRender+'\\n-'+c\n            else:\n                channels = 'Missing Comp Input'\n                \n            this\['channelslist'].setValue(channels)\n            \n            # Determine if write node already exists, if it does set that write node\n            for node in nuke.allNodes():\n                if node.Class() == 'ModifyMetaData' or node.Class() == 'Write':\n                    if node.input(0) == this:\n                        if node.Class() == 'Write':\n                            write = node\n                        else:\n                            for secondNode in nuke.allNodes('Write'):\n                                if secondNode.input(0) == node:\n                                    write = secondNode\n            \n            \n            # If write node does not exist then create one and set variables\n            if write == None:\n                nuke.selectAll(); nuke.invertSelection()\n                this.setSelected(True)\n                write = JabukaNuke.JNFn.JNFnWriteNode.createNode()\n                created = True\n            \n            locationMode = write\['ieLocationMode'].values()\n            for value in locationMode:\n                if 'UserDefined' == value.replace(' ',''):\n                    write\['ieLocationMode'].setValue(value)\n                    \n            write\['ieLocation'].setValue(jabukaLocation)\n            \n            stages = write\['ieStage'].values()\n            for value in stages:\n                if 'qc' == value.replace(' ',''):\n                    write\['ieStage'].setValue(value)\n                    \n            entityName = write\['ieEntityName'].values()\n            for value in entityName:\n                if 'custom' == value.replace(' ',''):\n                    write\['ieEntityName'].setValue(value)\n            \n            write\['ieEntityNameCustom'].setValue('comp')\n            write\['ieJabukaUrl'].setValue(jabukaUrl)\n            write\['ieVersionDescription'].setValue(readNode+artist+'\\n\\nQC Comp Analyzer ('+this\['view'].value()+')\\n\\nChannel List:\\n'+channelsRender)\n            write\['channels'].setValue('rgb')\n            write\['use_limit'].setValue(True)\n            write\['first'].setExpression(this.name()+'.jabukafirst')\n            write\['last'].setExpression(this.name()+'.jabukalast')\n            write\['autolabel'].setValue(\"\"\"'QC_Write_Node'\"\"\")\n            write\['tile_color'].setValue(this\['tile_color'].value())\n            write\['ieFarmClumpingEnabled'].setValue(True)\n            write\['ieFarmClumpingOverride'].setValue(int(this\['clumping'].value()))\n            write\['ieAutoApprove'].setValue(1)\n            write\['ieAutoApprove'].setEnabled(False)\n            write\['ieRenderButton'].setEnabled(False)\n            write\['ieVersionDescription'].setEnabled(False)\n            write\['ieAutoDaily'].setEnabled(False)\n            \n            write.hideControlPanel()\n            \n            if this\['autodaily'].value():\n                write\['ieAutoDaily'].setValue(True)\n                autodaily = '\\n\\nRender will auto daily shortly.'\n            else:\n                write\['ieAutoDaily'].setValue(False)\n                autodaily = ''\n                \n            if created:\n                read = nuke.createNode('Read', inpanel=False)\n                JabukaNuke.JNFn.JNFnLinkedReadNode(read, write)\n                read\['xpos'].setValue(this\['xpos'].value())\n                read\['ypos'].setValue(this\['ypos'].value()+120)\n                \n            if this.input(0) != None:\n            \n                # Check if scene is saved as a Jabuka Scene\n                scenePath = JabukaNuke.JFn.JFnScene.currentScenePath()\n    \n                if not scenePath:\n                    JabukaNuke.Environment.warning('This scene is untitled and has never been saved. Please save it as a Jabuka scene and try again.')\n                \n                sceneEntity = Jabuka.JFn.JFnScene.getSceneEntity(scenePath)\n                if not sceneEntity:\n                    JabukaNuke.Environment.warning('%s is not a valid Jabuka scene entity. Please save it as a Jabuka scene and try again.' % (scenePath))\n                \n                # Send Write node to farm \n                fn = JabukaNuke.JNFn.JNFnPublisher.getRegisteredNodeFn( write.Class() )\n                \n                op = fn._dispatchOp(\[write], sceneEntity, scenePath)()\n                \n                # Confirmation that write node was sent to the farm\n                if confirmation:\n                    nuke.message(this.name()+\"'s \"+this\['view'].value()+\" view sent to the farm!\"+autodaily)\n                    \n            else:\n                nuke.message('No Comp input so cannot send to farm!')\n                    \n###########################################################################################################################################################\n                 \ndef QCCompAnalyzerBuildGraph(node):\n    this = node\n    graphType = this.name().replace('GraphRGB','')\n    \n    graphProgress = nuke.ProgressTask('Building Graph ('+graphType+')')\n    graphProgress.setMessage('Preparing...')\n    \n    this.begin()\n    merge = nuke.toNode('Merge')\n    \n    for i in range(merge.inputs()):\n        merge.setInput(i,None)\n    \n    for node in nuke.allNodes('Crop'):\n        nuke.delete(node)\n    \n    positions = \[]\n    first = int(this\['first'].value())\n    last = int(this\['last'].value())\n    frameRange = last-first+1\n    currentFrame = first\n    inputNumber = 0\n    crops = \[]\n    \n    percent = 0\n    increment = 100/frameRange/5\n    \n    for i in range(frameRange):\n        if graphProgress.isCancelled():\n            break\n        \n        \n        nuke.frame(currentFrame)\n        \n        graphProgress.setMessage('Plotting frame '+str(currentFrame))\n        \n        for node in nuke.allNodes():\n            if 'Crop' in node.name():\n                positions.append(node.name())\n                \n        positions.sort()\n        position = nuke.toNode(positions\[-1])\n        \n        xpos = position\['xpos'].value()+90\n        ypos = position\['ypos'].value()\n        \n        x = this\['horizontal'].getValueAt(currentFrame)\n        \n        red = nuke.toNode('Red')\n        redY = this\['red'].getValueAt(currentFrame)\n        \n        green = nuke.toNode('Green')\n        greenY = this\['green'].getValueAt(currentFrame)\n        \n        blue = nuke.toNode('Blue')\n        blueY = this\['blue'].getValueAt(currentFrame)\n        \n        white = nuke.toNode('White')\n        \n        if str(redY) == 'nan':\n            redY = this\['max'].value()\n            \n        if str(greenY) == 'nan':\n            greenY = this\['max'].value()\n            \n        if str(blueY) == 'nan':\n            blueY = this\['max'].value()\n            \n        graphProgress.setMessage('Plotting frame '+str(currentFrame)+' (red)')\n        percent = percent+increment\n        graphProgress.setProgress(int(percent))\n        \n        redPoint = nuke.createNode('Crop', inpanel=False)\n        redPoint\['box'].setValue(\[x,redY,(x+1),(redY+1)])\n        redPoint\['xpos'].setValue(xpos)\n        redPoint\['ypos'].setValue(ypos)\n        redPoint\['label'].setValue(str(int(this\['currentframe'].getValueAt(currentFrame))))\n        redPoint.setInput(0,red)\n        crops.append(redPoint)\n        xpos = xpos+90\n        \n        graphProgress.setMessage('Plotting frame '+str(currentFrame)+' (green)')\n        percent = percent+increment\n        graphProgress.setProgress(int(percent))\n        \n        greenPoint = nuke.createNode('Crop', inpanel=False)\n        greenPoint\['box'].setValue(\[x,greenY,(x+1),(greenY+1)])\n        greenPoint\['xpos'].setValue(xpos)\n        greenPoint\['ypos'].setValue(ypos)\n        greenPoint\['label'].setValue(str(int(this\['currentframe'].getValueAt(currentFrame))))\n        greenPoint.setInput(0,green)\n        crops.append(greenPoint)\n        xpos = xpos+90\n        \n        graphProgress.setMessage('Plotting frame '+str(currentFrame)+' (blue)')\n        percent = percent+increment\n        graphProgress.setProgress(int(percent))\n        \n        bluePoint = nuke.createNode('Crop', inpanel=False)\n        bluePoint\['box'].setValue(\[x,blueY,(x+1),(blueY+1)])\n        bluePoint\['xpos'].setValue(xpos)\n        bluePoint\['ypos'].setValue(ypos)\n        bluePoint\['label'].setValue(str(int(this\['currentframe'].getValueAt(currentFrame))))\n        bluePoint.setInput(0,blue)\n        crops.append(bluePoint)\n        xpos = xpos+90\n        \n        graphProgress.setMessage('Plotting frame '+str(currentFrame)+' (line)')\n        percent = percent+increment\n        graphProgress.setProgress(int(percent))\n        \n        whitePoint = nuke.createNode('Crop', inpanel=False)\n        whitePoint.setInput(0,white)\n        whitePoint\['box'].setExpression('frame=='+str(int(this\['currentframe'].getValueAt(currentFrame)))+'?'+str(x)+':0',0)\n        whitePoint\['box'].setExpression('frame=='+str(int(this\['currentframe'].getValueAt(currentFrame)))+'?height:0',1)\n        whitePoint\['box'].setExpression('frame=='+str(int(this\['currentframe'].getValueAt(currentFrame)))+'?'+str(x+1)+':-1',2)\n        whitePoint\['box'].setExpression('frame=='+str(int(this\['currentframe'].getValueAt(currentFrame)))+'?0:-1',3)\n        whitePoint\['xpos'].setValue(xpos)\n        whitePoint\['ypos'].setValue(ypos)\n        whitePoint\['label'].setValue(str(int(this\['currentframe'].getValueAt(currentFrame))))\n        crops.append(whitePoint)\n        xpos = xpos+90\n        \n        currentFrame = currentFrame+1\n        \n        percent = percent+increment\n        graphProgress.setProgress(int(percent))\n        \n    graphProgress.setMessage('Connecting plots')\n        \n    for point in crops:     \n        merge.setInput(inputNumber,point)\n        \n        if inputNumber == 1:\n            inputNumber = inputNumber+2\n        else:\n            inputNumber = inputNumber+1\n                \n    this.end()\n    \n    graphProgress.setMessage('Finishing up...')\n    graphProgress.setProgress(100)\n    \n  \n###########################################################################################################################################################\n  \ndef QCCompAnalyzerClearGraph(node):\n    this = node\n    \n    this.begin()\n    \n    merge = nuke.toNode('Merge')\n    \n    for i in range(merge.inputs()):\n        merge.setInput(i,None)\n    \n    for node in nuke.allNodes('Crop'):\n        nuke.delete(node)\n        \n    this.end()\n\n###########################################################################################################################################################\n    \ndef QCCompAnalyzerBuildDiChannels(node):\n    # Set variables\n    analyzer = node\n    \n    #BuildDiProgress = nuke.ProgressTask(\"Rebuilding Channels\")\n    #BuildDiProgress.setMessage(\"Sorting channels...\")\n    #BuildDiProgress.setProgress(1)\n    \n    channels = ''\n    garbageChannels = ''\n    matteChannels = ''\n    \n    comp = QCCompAnalyzerTopNode(analyzer, 0)\n\n    if analyzer\['topnoderead'].value():\n        \n        analyzer\['savedchannels'].setValue(str(analyzer.input(0).channels()))\n\n        file = comp\['file'].evaluate().split('/')\n        if comp.knob('ieDisplayName'):\n            if comp\['ieDisplayName'].value() == 'comp':\n                shot = '<b>'+file\[7]+' v'+file\[13]\n            else:\n                shot = '<b>'+file\[7]\n        else:\n            shot = '<b>'+file\[7]\n        \n        for c in analyzer.input(0).channels():\n            if 'rgb' in c:\n                if channels == '':\n                    channels = c\n                else:\n                    channels = channels+'<br>'+c\n            \n            elif 'matte' in c: \n                if matteChannels == '':\n                    matteChannels = c\n                else:\n                    matteChannels = matteChannels+'<br>'+c\n            \n            else:\n                if garbageChannels == '':\n                    garbageChannels = c\n                else:\n                    garbageChannels = garbageChannels+'<br>'+c\n                \n    else:\n        channels = '<font color=red>Missing Comp Input'\n        shot = '<b>Missing Comp Input'\n    \n    #BuildDiProgress.setMessage(\"Setting channel list and shotcode\")\n    #BuildDiProgress.setProgress(5)\n    \n    analyzer\['channelslist'].setValue('<font color=lime>'+channels+'</font><font color=yellow><br>'+matteChannels+'</font><font color=red><br>'+garbageChannels)\n    analyzer\['shot'].setValue(shot)\n    \n    #BuildDiProgress.setMessage(\"Setting up DI mattes\")\n    #BuildDiProgress.setProgress(10)\n    \n    analyzer.begin()\n    # Set variables\n    builder = nuke.toNode('DiMatteDummy')\n    qcNode = nuke.toNode('QcDi')\n    contactSheet = nuke.toNode('DiContactSheetDot')\n    newQcNodes = \[]\n    matteChannels = \[]\n    shuffles = \[]\n    layerNames = \[]\n    texts = \[]\n    copy = None\n    \n    # Save original clipboard to restore later and copy QC node for duplication\n    nuke.selectAll(); nuke.invertSelection()\n    qcNode.setSelected(True)\n    \n    #user = Jabuka.Environment.getCurrentUser()\n    nuke.nodeCopy('/tmp/QCCATemp.nk')\n    \n    # Delete old build\n    for node in nuke.allNodes():\n        if 'tempbuilddiqc' in node.knobs().keys():\n            nuke.delete(node)\n    \n    # Create new build\n    for matte in builder.channels():\n        if 'matte' in matte:\n            layerName = 'DiMatteQC_'+matte.split('.')\[1]\n            nuke.Layer( layerName, \[layerName+'.red', layerName+'.green', layerName+'.blue'] )\n            matteChannels.append(matte)\n            \n    #BuildDiProgress.setMessage(\"Buidling DI matte view\")\n    #BuildDiProgress.setProgress(20)\n    \n    for channel in matteChannels:\n        nuke.selectAll(); nuke.invertSelection()\n        builder.setSelected(True)\n        \n        newQcNode = nuke.loadToolset('/tmp/QCCATemp.nk')\n        newQcNode\['from0'].setValue(channel)\n        newQcNode\['message'].setValue(channel)\n        newQcNodes.append(newQcNode)\n        \n        shuffle = nuke.createNode('Shuffle', inpanel=False)\n        \n        shuffle.addKnob(nuke.Text_Knob('tempbuilddiqc','auto built',' '))\n        \n        layerName = 'DiMatteQC_'+channel.split('.')\[1]\n        layerNames.append(layerName)\n        \n        shuffle\['out'].setValue(layerName)\n        shuffle\['label'].setValue('\[value out]')\n        shuffles.append(shuffle)\n        \n    os.remove('/tmp/QCCATemp.nk')\n        \n    #BuildDiProgress.setProgress(40)\n    \n    for node in newQcNodes:\n        node.setInput(0,builder)\n        node.addKnob(nuke.Text_Knob('tempbuilddiqc','auto built',' '))\n        \n    #BuildDiProgress.setProgress(70)\n        \n    if len(shuffles) >= 1:\n        firstCopy = True\n        secondCopy = False\n        shuffleNumber = 0\n        for node in shuffles:\n            if firstCopy:\n                copy = nuke.createNode('Copy', inpanel=False)\n                copy.addKnob(nuke.Text_Knob('tempbuilddiqc','auto built',' '))\n                copy.setInput(0,nuke.toNode('RemoveAll'))\n                copy.setInput(1,shuffles\[shuffleNumber])\n                copy\['channels'].setValue(layerNames\[shuffleNumber])\n                copy\['from0'].setValue('none')\n                copy\['to0'].setValue('none')\n                firstCopy = False\n            else:\n                newCopy = nuke.createNode('Copy', inpanel=False)\n                newCopy.addKnob(nuke.Text_Knob('tempbuilddiqc','auto built',' '))\n                newCopy.setInput(0,copy)\n                copy = newCopy\n                shuffleNumber = shuffleNumber+1\n                newCopy.setInput(1,shuffles\[shuffleNumber])\n                copy\['channels'].setValue(layerNames\[shuffleNumber])\n                copy\['from0'].setValue('none')\n                copy\['to0'].setValue('none')\n                \n    #BuildDiProgress.setMessage(\"Setting inputs\")\n    #BuildDiProgress.setProgress(90)\n                \n    if copy != None:\n        contactSheet.setInput(0,copy)\n    else:\n        contactSheet.setInput(0,nuke.toNode('NoDi'))\n    analyzer.end()\n    \n    #BuildDiProgress.setMessage(\"Finishing up...\")\n    #BuildDiProgress.setProgress(100)\n\n###########################################################################################################################################################\n    \ndef QCCompAnalyzerReset(node):\n    CurveToolResetList = \[nuke.toNode(node.name()+'.CurveToolQC'), nuke.toNode(node.name()+'.CurveToolQCBlacks')]\n    CurveToolInputList = \[nuke.toNode(node.name()+'.CurveToolQCInput'), nuke.toNode(node.name()+'.CurveToolQCBlacksInput')]\n    \n    for CurveToolReset in CurveToolResetList:\n        \n        index = CurveToolResetList.index(CurveToolReset)\n        \n        CurveToolReset.setInput(0,CurveToolInputList\[index])\n        \n        CurveToolReset\['maxlumapixvalue'].fromScript('0')\n        CurveToolReset\['maxlumapixdata'].fromScript('0 0')\n        CurveToolReset\['minlumapixvalue'].fromScript('0')\n        CurveToolReset\['minlumapixdata'].fromScript('0 0')\n        CurveToolReset\['intensitydata'].fromScript('0')\n    \n        if index == 0:\n            CurveToolReset\['maxlumr'].setExpression(\"0\")\n            CurveToolReset\['maxlumg'].setExpression(\"0\")\n            CurveToolReset\['maxlumb'].setExpression(\"0\")\n        \n            CurveToolReset\['minmaxlumr'].setExpression(\"0\")\n            CurveToolReset\['minmaxlumg'].setExpression(\"0\")\n            CurveToolReset\['minmaxlumb'].setExpression(\"0\")  \n        else:    \n            CurveToolReset\['minlumr'].setExpression(\"0\")\n            CurveToolReset\['minlumg'].setExpression(\"0\")\n            CurveToolReset\['minlumb'].setExpression(\"0\")\n        \n            CurveToolReset\['maxminlumr'].setExpression(\"0\")\n            CurveToolReset\['maxminlumg'].setExpression(\"0\")\n            CurveToolReset\['maxminlumb'].setExpression(\"0\")\n        \n        CurveToolReset\['operation'].setValue(3)\n        \n        CurveToolReset\['ROI'].clearAnimated(0)\n        CurveToolReset\['ROI'].setExpression('parent.ROI', 0)\n        CurveToolReset\['ROI'].clearAnimated(1)\n        CurveToolReset\['ROI'].setExpression('parent.ROI', 1)\n        CurveToolReset\['ROI'].clearAnimated(2)\n        CurveToolReset\['ROI'].setExpression('parent.ROI', 2)\n        CurveToolReset\['ROI'].clearAnimated(3)\n        CurveToolReset\['ROI'].setExpression('parent.ROI', 3)\n        \n    nuke.toNode(node.name()+'.AnalyzerSwitch')\['which'].setValue(2)\n\n###########################################################################################################################################################\n\ndef QCCompAnalyzerResetPlate(node):\n     \n    CurveToolResetPlateList = \[nuke.toNode(node.name()+'.CurveToolPlateMin'), nuke.toNode(node.name()+'.CurveToolPlateMax')]\n    \n    for CurveToolResetPlate in CurveToolResetPlateList:\n        CurveToolResetPlate\['maxlumapixvalue'].fromScript('0')\n        CurveToolResetPlate\['maxlumapixdata'].fromScript('0 0')\n        CurveToolResetPlate\['minlumapixvalue'].fromScript('0')\n        CurveToolResetPlate\['minlumapixdata'].fromScript('0 0')\n    \n###########################################################################################################################################################\n    \ndef QCCompAnalyzerAnalyze(node, confirmation=True):\n    groupNode = node\n    \n    progressAnalyze = nuke.ProgressTask('Analyzing')\n    \n    ####################################################################################\n    plate = None\n    plateShot = None\n    compShot = None\n    balanceGrade = None\n    \n    plateInput = QCCompAnalyzerTopNode(groupNode, 1)\n    compInput = QCCompAnalyzerTopNode(groupNode, 0)\n    \n    if compInput.Class() == 'Read':\n        compShot = compInput\['file'].evaluate().split('/')\[7]\n                \n    if plateInput.Class() == 'Read':\n        if plateInput.knob('ieDisplayName'):\n            if plateInput\['ieDisplayName'].value() == 'plate':\n                plateShot = plateInput\['file'].evaluate().split('/')\[7]\n                if plateShot == compShot:\n                    plate = plateInput\n            \n    progressAnalyze.setMessage('Loading plate')\n    \n    if plate == None:\n        plate = QCCompAnalyzerLoadPlate(compInput)\n        \n    if plate != None:\n        for bg in plate.dependent(nuke.INPUTS | nuke.HIDDEN_INPUTS):\n            if bg.knob('ieDisplayName'):\n                if bg\['ieDisplayName'].value() in \['balanceGrade','working_grade']:\n                    balanceGrade = bg\n                    break\n    \n    if balanceGrade:\n        groupNode.setInput(1,balanceGrade)\n    else:       \n        balanceGrade = QCCompAnalyzerLoadBalanceGrade(plate)\n                    \n        if balanceGrade:\n            groupNode.setInput(1,balanceGrade)\n        else:\n            groupNode.setInput(1,plate)\n    \n    progressAnalyze.setMessage('Analyzing plate')\n    groupNode\['skipexisting'].setValue(True)\n    QCCompAnalyzerAnalyzePlates(groupNode, \[plate], False)\n    \n    wipRepo = QCCompAnalyzerLoadWipRepoFromPlate(plate)\n    \n    if wipRepo:\n        if balanceGrade:\n            balanceGrade.setInput(0,wipRepo)\n        else:\n            groupNode.setInput(1,wipRepo)\n    \n    ####################################################################################\n    progressAnalyze.setMessage('Setting up...')\n    \n    graphMin = nuke.toNode(groupNode.name()+'.GraphRGBMin')\n    graphMax = nuke.toNode(groupNode.name()+'.GraphRGBMax')\n    analyzerSwitch = nuke.toNode(groupNode.name()+'.AnalyzerSwitch')\n    \n    curveToolList = \[nuke.toNode(groupNode.name()+'.CurveToolQC'), nuke.toNode(groupNode.name()+'.CurveToolQCBlacks')]\n    \n    compNanSwapBlacks = nuke.toNode(groupNode.name()+'.CompNanSwapBlacks')\n    \n    savedInput = groupNode.input(0)\n    groupNode.setInput(0, None)\n    groupNode.setInput(0, savedInput)\n    groupNode\['text'].setValue(True)\n    \n    if groupNode\['autoloadplatevalues'].value():\n        progressAnalyze.setMessage('Loading Plate Values')\n        progressAnalyze.setProgress(1)\n        groupNode\['loadfrominput'].setValue(True)\n        QCCompAnalyzerLoadValues(groupNode, 'plateValues', False)\n    \n    progressAnalyze.setMessage('Reloading downstream CDL')\n    progressAnalyze.setProgress(2)\n    \n    progressAnalyze.setMessage('Rebuilding DI matte view')\n    progressAnalyze.setProgress(5)    \n    QCCompAnalyzerBuildDiChannels(groupNode)\n    \n    progressAnalyze.setMessage('Resetting curvetool and graphs')\n    progressAnalyze.setProgress(7)\n    QCCompAnalyzerReset(groupNode)\n    QCCompAnalyzerClearGraph(graphMin)\n    QCCompAnalyzerClearGraph(graphMax)\n    analyzerSwitch\['which'].setValue(1)\n    \n    if groupNode\['analyzejabuka'].value():\n        first = str(int(groupNode\['jabukafirst'].value()))\n        last = str(int(groupNode\['jabukalast'].value()))\n    else:\n        first = str(int(curveToolQC.firstFrame()))\n        last = str(int(curveToolQC.lastFrame()))\n    \n    progressAnalyze.setMessage('Running whites analysis on Comp')\n    progressAnalyze.setProgress(10)\n    \n    threading.Thread(nuke.execute(curveToolList\[0], nuke.FrameRanges(first+\"-\"+last)))\n    curveToolList\[0].setInput(0, compNanSwapBlacks)\n    curveToolList\[0]\['operation'].setValue(1)\n    curveToolList\[0]\['ROI'].clearAnimated(0)\n    curveToolList\[0]\['ROI'].setExpression('maxlumapixdata.x', 0)\n    curveToolList\[0]\['ROI'].clearAnimated(1)\n    curveToolList\[0]\['ROI'].setExpression('maxlumapixdata.y', 1)\n    curveToolList\[0]\['ROI'].clearAnimated(2)\n    curveToolList\[0]\['ROI'].setExpression('maxlumapixdata.x+1', 2)\n    curveToolList\[0]\['ROI'].clearAnimated(3)\n    curveToolList\[0]\['ROI'].setExpression('maxlumapixdata.y+1', 3)\n    threading.Thread(nuke.execute(curveToolList\[0], nuke.FrameRanges(first+\"-\"+last)))\n    \n    progressAnalyze.setMessage('Running blacks analysis on Comp')\n    progressAnalyze.setProgress(60)\n    \n    threading.Thread(nuke.execute(curveToolList\[1], nuke.FrameRanges(first+\"-\"+last)))\n    curveToolList\[1].setInput(0, compNanSwapBlacks)\n    curveToolList\[1]\['operation'].setValue(1)\n    curveToolList\[1]\['ROI'].clearAnimated(0)\n    curveToolList\[1]\['ROI'].setExpression('minlumapixdata.x', 0)\n    curveToolList\[1]\['ROI'].clearAnimated(1)\n    curveToolList\[1]\['ROI'].setExpression('minlumapixdata.y', 1)\n    curveToolList\[1]\['ROI'].clearAnimated(2)\n    curveToolList\[1]\['ROI'].setExpression('minlumapixdata.x+1', 2)\n    curveToolList\[1]\['ROI'].clearAnimated(3)\n    curveToolList\[1]\['ROI'].setExpression('minlumapixdata.y+1', 3)\n    threading.Thread(nuke.execute(curveToolList\[1], nuke.FrameRanges(first+\"-\"+last)))\n    \n    progressAnalyze.setMessage('Setting expressions')\n    progressAnalyze.setProgress(85)\n\n    curveToolList\[0]\['maxlumr'].setExpression(\"\[python \{max((key.y for key in nuke.thisNode()\['intensitydata'].animation(0).keys()))\}]\")\n    curveToolList\[0]\['maxlumg'].setExpression(\"\[python \{max((key.y for key in nuke.thisNode()\['intensitydata'].animation(1).keys()))\}]\")\n    curveToolList\[0]\['maxlumb'].setExpression(\"\[python \{max((key.y for key in nuke.thisNode()\['intensitydata'].animation(2).keys()))\}]\")\n    curveToolList\[0]\['minmaxlumr'].setExpression(\"\[python \{min((key.y for key in nuke.thisNode()\['intensitydata'].animation(0).keys()))\}]\")\n    curveToolList\[0]\['minmaxlumg'].setExpression(\"\[python \{min((key.y for key in nuke.thisNode()\['intensitydata'].animation(1).keys()))\}]\")\n    curveToolList\[0]\['minmaxlumb'].setExpression(\"\[python \{min((key.y for key in nuke.thisNode()\['intensitydata'].animation(2).keys()))\}]\") \n    \n    curveToolList\[1]\['minlumr'].setExpression(\"\[python \{min((key.y for key in nuke.thisNode()\['intensitydata'].animation(0).keys()))\}]\")\n    curveToolList\[1]\['minlumg'].setExpression(\"\[python \{min((key.y for key in nuke.thisNode()\['intensitydata'].animation(1).keys()))\}]\")\n    curveToolList\[1]\['minlumb'].setExpression(\"\[python \{min((key.y for key in nuke.thisNode()\['intensitydata'].animation(2).keys()))\}]\")\n    curveToolList\[1]\['maxminlumr'].setExpression(\"\[python \{max((key.y for key in nuke.thisNode()\['intensitydata'].animation(0).keys()))\}]\")\n    curveToolList\[1]\['maxminlumg'].setExpression(\"\[python \{max((key.y for key in nuke.thisNode()\['intensitydata'].animation(1).keys()))\}]\")\n    curveToolList\[1]\['maxminlumb'].setExpression(\"\[python \{max((key.y for key in nuke.thisNode()\['intensitydata'].animation(2).keys()))\}]\")\n    \n    analyzerSwitch\['which'].setValue(0)\n    \n    progressAnalyze.setMessage('Building min/max graphs')\n    progressAnalyze.setProgress(90)\n    \n    QCCompAnalyzerBuildGraph(graphMin)\n    QCCompAnalyzerBuildGraph(graphMax)\n    \n    \n    if groupNode\['autorenderviews'].value():\n        progressAnalyze.setMessage('Sending selected views to farm')\n        progressAnalyze.setProgress(95)\n        threading.Thread(QCCompAnalyzerRenderViews(groupNode, confirmation, ask=False, autoAnalysis=True))\n        progressAnalyze.setMessage('Finishing up...')\n        progressAnalyze.setProgress(100)\n    else:\n        progressAnalyze.setMessage('Finishing up...')\n        progressAnalyze.setProgress(100)\n        nuke.message('Analysis Complete!')\n\n###########################################################################################################################################################\n \ndef QCCompAnalyzerRenderViews(node, confirmation=True, ask=True, autoAnalysis=False, recordAnalysis=True):\n\n    thisRenderViews = node\n    \n    if thisRenderViews\['analyzerstatuscheck'].value() == 'Incomplete':\n        analyzerContinue = nuke.ask('Analysis incomplete, are you sure you want to continue?')\n    elif thisRenderViews\['analyzerstatuscheck'].value() == 'Not Run':\n        analyzerContinue = nuke.ask('Analysis has not run, are you sure you want to continue?')\n    else:\n        analyzerContinue = True\n        \n    if analyzerContinue:\n    \n        #######################################################################################\n        \n        if thisRenderViews\['infnanspotterrender'].getValue() == 0:\n            infnan = True\n        elif thisRenderViews\['infnanspotterrender'].getValue() == 1:\n            infnan = False\n        elif thisRenderViews\['infnanspotterrender'].getValue() == 2:\n            if nuke.toNode(thisRenderViews.name()+'.AnalyzerSwitch')\['which'].value() == 0:\n                if nuke.toNode(thisRenderViews.name()+'.ErrorSwitch')\['which'].value():\n                    infnan = True\n                else:\n                    infnan = False\n            else:\n                infnan = False\n                \n        #######################################################################################\n        \n        if thisRenderViews\['negativespotterrender'].getValue() == 0:\n            negatives = True\n        elif thisRenderViews\['negativespotterrender'].getValue() == 1:\n            negatives = False\n        elif thisRenderViews\['negativespotterrender'].getValue() == 2:\n            if nuke.toNode(thisRenderViews.name()+'.AnalyzerSwitch')\['which'].value() == 0:\n                if nuke.toNode(thisRenderViews.name()+'.NegativesSwitch')\['which'].value():\n                    negatives = True\n                else:\n                    negatives = False\n            else:\n                negatives = False\n        \n        #######################################################################################\n        \n        if thisRenderViews\['highlightspotterrender'].getValue() == 0:\n            highlights = True\n        elif thisRenderViews\['highlightspotterrender'].getValue() == 1:\n            highlights = False\n        elif thisRenderViews\['highlightspotterrender'].getValue() == 2:\n            if nuke.toNode(thisRenderViews.name()+'.AnalyzerSwitch')\['which'].value() == 0:\n                if nuke.toNode(thisRenderViews.name()+'.HighlightSwitch')\['which'].value():\n                    highlights = True\n                else:\n                    highlights = False\n            else:\n                highlights = False\n                \n        #######################################################################################\n        \n        if thisRenderViews\['graincheckrender'].getValue() == 0:\n            grain = True\n        else:\n            grain = False\n            \n        #######################################################################################\n        \n        if thisRenderViews\['colourcheckrender'].getValue() == 0:\n            colour = True\n        else:\n            colour = False\n        \n        #######################################################################################\n        \n        if thisRenderViews\['differencecheckrender'].getValue() == 0:\n            difference = True\n        elif thisRenderViews\['differencecheckrender'].getValue() == 1:\n            difference = False\n        elif thisRenderViews\['differencecheckrender'].getValue() == 2:\n            if thisRenderViews\['platetopnoderead'].value():\n                difference = True\n            else:\n                difference = False\n                        \n        #######################################################################################\n        \n        if thisRenderViews\['edgecheckrender'].getValue() == 0:\n            edge = True\n        else:\n            edge = False\n            \n        #######################################################################################\n        \n        if thisRenderViews\['dimattecheckrender'].getValue() == 0:\n            dimatte = True\n        elif thisRenderViews\['dimattecheckrender'].getValue() == 1:\n            dimatte = False\n        elif thisRenderViews\['dimattecheckrender'].getValue() == 2:\n            if nuke.toNode(thisRenderViews.name()+'.NoDiText')\['disable'].value() == False and nuke.toNode(thisRenderViews.name()+'.DiContactSheetDot').input(0) == nuke.toNode(thisRenderViews.name()+'.NoDi'):\n                dimatte = False\n            else:\n                dimatte = True\n                \n        #######################################################################################\n        \n        if thisRenderViews\['minvaluesgraphrender'].getValue() == 0:\n            mingraph = True\n        elif thisRenderViews\['minvaluesgraphrender'].getValue() == 1:\n            mingraph = False\n        elif thisRenderViews\['minvaluesgraphrender'].getValue() == 2:\n            if nuke.toNode(thisRenderViews.name()+'.AnalyzerSwitch')\['which'].value() == 0:\n                if nuke.toNode(thisRenderViews.name()+'.NegativesSwitch')\['which'].value():\n                    mingraph = True\n                else:\n                    mingraph = False\n            else:\n                mingraph = False\n                \n        #######################################################################################\n        \n        if thisRenderViews\['maxvaluesgraphrender'].getValue() == 0:\n            maxgraph = True\n        elif thisRenderViews\['maxvaluesgraphrender'].getValue() == 1:\n            maxgraph = False\n        elif thisRenderViews\['maxvaluesgraphrender'].getValue() == 2:\n            if nuke.toNode(thisRenderViews.name()+'.AnalyzerSwitch')\['which'].value() == 0:\n                if nuke.toNode(thisRenderViews.name()+'.HighlightSwitch')\['which'].value():\n                    maxgraph = True\n                else:\n                    maxgraph = False\n            else:\n                maxgraph = False\n                \n        #######################################################################################\n        \n        if thisRenderViews\['contactsheetrender'].getValue() == 0:\n            contactsheet = True\n        else:\n            contactsheet = False    \n            \n        #######################################################################################\n        \n        viewsList = \[]\n        \n        if infnan:\n            viewsList.append('INF/NAN Spotter')\n            \n        if negatives:\n            viewsList.append('Negative Spotter')\n            \n        if highlights:\n            viewsList.append('Highlight Spotter')\n            \n        if grain:\n            viewsList.append('Grain Check')\n            \n        if colour:\n            viewsList.append('Colour Check')\n            \n        if difference:\n            viewsList.append('Difference Check')\n            \n        if edge:\n            viewsList.append('Edge Check')\n            \n        if dimatte:\n            viewsList.append('DI Matte Check')\n            \n        if mingraph:\n            viewsList.append('Min Pixel Graph')\n            \n        if maxgraph:\n            viewsList.append('Max PIxel Graph')\n            \n        if contactsheet:\n            viewsList.append('Contact Sheet')\n        \n        if viewsList == \[]:\n            if autoAnalysis:\n                    analysis = 'Analysis Complete!\\n\\n'\n            else:\n                    analysis = ''\n                    \n            nuke.message(analysis+'No views were selected to render!')\n        \n        else:\n            \n            if ask:  \n                \n                if thisRenderViews\['autodaily'].value():\n                    questionAutoDaily = ' with <b>Auto Daily</b> enabled'\n                else:\n                    questionAutoDaily = ''\n            \n                questionText = 'This action will render all of the following'+questionAutoDaily+':\\n\\n'\n                \n                for view in viewsList:\n                    questionText = questionText+'- '+view+'\\n'\n                \n                question = nuke.ask(questionText+'\\nAre you sure you want to continue?')\n                \n            else:\n                \n                question = True\n                \n                \n            if question:\n                message = 'The following views were sent to the farm:\\n\\n'\n                \n                if autoAnalysis:\n                    analysis = 'Analysis Complete!\\n\\n'\n                else:\n                    analysis = ''\n                \n                progress = nuke.ProgressTask('Sending to Farm')\n                progress.setProgress(5)\n                progress.setMessage('Sending 1 of '+str(len(viewsList))+' ( '+viewsList\[0]+' ) ')\n                iterator = 0\n                cancelled = False\n                for view in viewsList:\n                    if progress.isCancelled():\n                        progress.setProgress(100)\n                        cancelled = True\n                        break;\n                    \n                    iterator = iterator+1\n                    progress.setMessage('Sending '+str(iterator)+' of '+str(len(viewsList))+' ( '+view+' ) ')\n                    \n                    if not nuke.GUI:\n                        print('Sending results to farm ( '+view+' )...')\n                    \n                    thisRenderViews\['view'].setValue(view)\n                    threading.Thread(QCCompAnalyzerRender(this=node, confirmation=False)).start()\n                    message = message+'- '+view+'\\n'\n                    \n                    progress.setProgress(int(iterator/len(viewsList)*100))\n                    \n                if thisRenderViews\['autodaily'].value():\n                    \n                    user = Jabuka.Environment.getCurrentUser()\n                    job = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\[3]\n                    time = datetime.now().strftime(\"%d/%m/%Y %H:%M\")\n                    compFile = QCCompAnalyzerTopNode(thisRenderViews, 0)\['file'].evaluate().split('/')\[-1].split('.')\[0]\n\n                    path = '/data/jobs/'+job+'/tools/nuke/scriptlets/pipeline/CompAnalyzer/'\n                    filename = job+'-AnalyzerHistory.py'\n    \n                    if not os.path.exists(path):\n                        os.makedirs(path)\n                    \n                    filePath = path+filename\n    \n                    file = open(filePath, 'ab+')\n                    writeText = '\['+time+'] '+user+' '+compFile+'\\n'\n                    writeText = writeText.encode()\n                    file.write(writeText); file.close()\n                    \n                    autodaily = 'Auto Daily enabled.'\n                else:\n                    autodaily = ''\n        \n                if confirmation:\n                    if cancelled:\n                        message = 'Operation Cancelled!\\n\\n'+analysis+message+'\\n'+autodaily\n                    else:\n                        message = analysis+message+'\\n'+autodaily\n                    nuke.message(message)\n                \n###########################################################################################################################################################               \n                \ndef QCCompAnalyzerDefaultLevelUpdate(node):\n    this = node\n    \n    level = this\['defaultlevel'].value()\n    value = ''\n    scriptfile = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\n    \n    if this\['frominput'].value(): \n        if this\['topnoderead'].value():\n            topnode = QCCompAnalyzerTopNode(this, 0)\n            compfile = topnode\['file'].evaluate().split('/')\n        else:\n            compfile = scriptfile\n\n        if this\['platetopnoderead'].value():\n            topnode = QCCompAnalyzerTopNode(this, 1)\n            platefile = topnode\['file'].evaluate().split('/')\n        else:\n            platefile = scriptfile\n    else:\n        platefile = scriptfile\n        compfile = scriptfile\n            \n    plateshow = platefile\[3]\n    plateseq = platefile\[5]\n    plateshot = platefile\[7]\n    \n    compshow = compfile\[3]\n    compseq = compfile\[5]\n    compshot = compfile\[7]\n    \n    if level == 'Show':\n        platevalue = plateshow\n        compvalue = compshow\n    elif level == 'Sequence':\n        platevalue = plateseq\n        compvalue = compseq\n    elif level == 'Shot':\n        platevalue = plateshot\n        compvalue = compshot\n      \n    this\['savedefaults'].setLabel('Save <b><font color=DodgerBlue>'+compvalue+'</font></b> Default Settings')\n    this\['saveplatevalues'].setLabel('Save <b><font color=DodgerBlue>'+platevalue+'</font></b> Plate Values')\n    \n###########################################################################################################################################################\n\ndef QCCompAnalyzerSaveDefaults(node, list, save, ask):\n    \n    thisSave = node\n    knobs = list\n    \n    if save == 'defaults' or save == 'plateValues':\n        error = False\n    else:\n        nuke.message(\"QCCompAnalyzerLoadValues()'s load variable has not been set correctly, must be either save='defaults' or save='plateValues'\")\n        error = True\n    \n    if save == 'defaults':\n        buttonLevel = thisSave\['savedefaults'].label().replace('Save <b><font color=DodgerBlue>','').replace('</font></b> Default Settings','')\n        question = 'Are you sure you want to save default knob values for '\n    elif save == 'plateValues':\n        buttonLevel = thisSave\['saveplatevalues'].label().replace('Save <b><font color=DodgerBlue>','').replace('</font></b> Plate Values','')\n        question = 'Are you sure you want to save plate values for '\n    \n    if not error:\n        \n        if ask:\n            proceed = nuke.ask(question+buttonLevel+'?')\n        else:\n            proceed = True\n        if proceed:\n        \n            import sys\n            import os\n            import importlib\n            \n            level = thisSave\['defaultlevel'].value()\n            value = ''\n            \n            if save == 'defaults':\n            \n                if thisSave\['frominput'].value():\n                    if thisSave\['topnoderead'].value():\n                        topnode = QCCompAnalyzerTopNode(thisSave, 0)\n                        file = topnode\['file'].evaluate().split('/')\n                    else:\n                        file = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\n                else:\n                    file = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\n                    \n            elif save == 'plateValues':\n                \n                if thisSave\['frominput'].value():\n                    if thisSave\['platetopnoderead'].value():\n                        topnode = QCCompAnalyzerTopNode(thisSave, 1)\n                        file = topnode\['file'].evaluate().split('/')\n                    else:\n                        file = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\n                else:\n                    file = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\n                \n            show = file\[3]\n            seq = file\[5]\n            shot = file\[7]\n            \n            defaults = 'knobs = '+str(knobs)+'\\n\\n'+'dictionary = \{'\n            \n            for knob in knobs:\n                if defaults == 'knobs = '+str(knobs)+'\\n\\n'+'dictionary = \{':\n                    defaults = defaults+\"'\"+knob+\"':'\"+str(thisSave\[knob].toScript())+\"'\"\n                else:\n                    defaults = defaults+\",'\"+knob+\"':'\"+str(thisSave\[knob].toScript())+\"'\"\n            \n            showFilepath = \"/data/jobs/\"+show+\"/tools/nuke/scriptlets/pipeline/CompAnalyzer/\"\n            seqFilepath = \"/data/jobs/\"+show+\"/tools/nuke/scriptlets/pipeline/CompAnalyzer/\"+seq+\"/\"\n            shotFilepath = \"/data/jobs/\"+show+\"/tools/nuke/scriptlets/pipeline/CompAnalyzer/\"+seq+\"/\"+shot+\"/\"\n            \n            if save == 'defaults':\n                showFilename = show+'-AnalyzerDefaults.py'\n                seqFilename = show+'-'+seq+'-AnalyzerDefaults.py'\n                shotFilename = shot+'-AnalyzerDefaults.py'\n            elif save == 'plateValues':\n                showFilename = show+'-PlateValues.py'\n                seqFilename = show+'-'+seq+'-PlateValues.py'\n                shotFilename = shot+'-PlateValues.py'\n                \n            import os\n            \n            if buttonLevel == show:\n                if not os.path.exists(showFilepath):\n                    os.makedirs(showFilepath)\n                filename = showFilepath+showFilename\n                \n            elif buttonLevel == seq:\n                if not os.path.exists(seqFilepath):\n                    os.makedirs(seqFilepath)\n                filename = seqFilepath+seqFilename\n                \n            elif buttonLevel == shot:\n                if not os.path.exists(shotFilepath):\n                    os.makedirs(shotFilepath)\n                filename = shotFilepath+shotFilename\n            \n            file = open(filename, 'w')\n            file.write(defaults+'\}'); file.close()\n\n###########################################################################################################################################################\n    \ndef QCCompAnalyzerLoadValues(node, load, confirm):\n    \n    if load == 'defaults' or load == 'plateValues':\n        error = False\n    else:\n        nuke.message(\"QCCompAnalyzerLoadValues()'s load variable has not been set correctly, must be either load='defaults' or load='plateValues'\")\n        error = True\n    \n    if not error:\n        \n        thisLoad = node\n        value = ''\n        defaults = None\n        \n        if thisLoad\['loadfrominput'].value():\n            if thisLoad\['topnoderead'].value():\n                topnode = QCCompAnalyzerTopNode(thisLoad, 0)\n                file = topnode\['file'].evaluate().split('/')\n            else:\n                file = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\n        else:\n            file = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\n        \n        show = file\[3]\n        seq = file\[5]\n        shot = file\[7]\n        \n        showFilepath = \"/data/jobs/\"+show+\"/tools/nuke/scriptlets/pipeline/CompAnalyzer/\"\n        seqFilepath = \"/data/jobs/\"+show+\"/tools/nuke/scriptlets/pipeline/CompAnalyzer/\"+seq+\"/\"\n        shotFilepath = \"/data/jobs/\"+show+\"/tools/nuke/scriptlets/pipeline/CompAnalyzer/\"+seq+\"/\"+shot+\"/\"\n        \n        if load == 'defaults':\n            showFilename = show+'-AnalyzerDefaults.py'\n            seqFilename = show+'-'+seq+'-AnalyzerDefaults.py'\n            shotFilename = shot+'-AnalyzerDefaults.py'\n            confirmMessage = ' default values!'\n        elif load == 'plateValues':\n            showFilename = show+'-PlateValues.py'\n            seqFilename = show+'-'+seq+'-PlateValues.py'\n            shotFilename = shot+'-PlateValues.py'\n            confirmMessage = ' plate values!'\n        \n        if os.path.exists(shotFilepath+shotFilename):\n            sys.path.insert(1, shotFilepath)\n            level = shot\n            defaults = importlib.import_module(shotFilename.replace('.py',''))\n        else:\n            if os.path.exists(seqFilepath+seqFilename):\n                sys.path.insert(1, seqFilepath)\n                level = show+'-'+seq\n                defaults = importlib.import_module(seqFilename.replace('.py',''))\n            else:\n                if os.path.exists(showFilepath+showFilename):\n                    sys.path.insert(1, showFilepath)\n                    level = show\n                    defaults = importlib.import_module(showFilename.replace('.py',''))\n                else:\n                    if confirm:\n                        nuke.message('No defaults found for '+shot+' at all levels (shot/seq/show)')\n                    else:\n                        print('No defaults found for '+shot+' at all levels (shot/seq/show)')\n                    \n                    level = None\n                    defaults = None\n        \n        if level != None:\n            \n            reload(defaults)\n            \n            for knob in defaults.knobs:\n                thisLoad\[knob].fromScript(defaults.dictionary\[knob])\n                \n            if confirm:\n                nuke.message('Successfully loaded '+level+confirmMessage)\n            else:\n                if nuke.GUI:\n                    print('Successfully loaded '+level+confirmMessage)\n    \n###########################################################################################################################################################\n\ndef QCCompAnalyzerAnalyzePlate(curvetool, analyzer):\n    nuke.execute(curvetool, nuke.FrameRanges(str(int(analyzer.input(1).firstFrame()))+\"-\"+str(int(analyzer.input(1).lastFrame()))))\n    \ndef QCCompAnalyzerAnalyzePlates(node, selectedReads, confirm):\n    with nuke.root():\n    \n        analyzer = node\n        origInput = analyzer.input(1)\n        \n        QCCompAnalyzerResetPlate(analyzer)\n        \n        analyzer\['defaultlevel'].setValue('Shot')\n        analyzer\['frominput'].setValue(True)\n        \n        plates = \[]\n        \n        for p in selectedReads:\n            if p != None:\n                if p.knob('ieDisplayName'):\n                    if 'plate' == p\['ieDisplayName'].value():\n                        if 'cg' not in p\['file'].evaluate().split('_'):\n                            if p.name() not in plates:\n                                if analyzer\['skipexisting'].value():\n                                    file = p\['file'].evaluate().split('/')\n                                    filepath = \"/data/jobs/\"+file\[3]+\"/tools/nuke/scriptlets/pipeline/CompAnalyzer/\"+file\[5]+\"/\"+file\[7]+\"/\"+file\[7]+'-PlateValues.py'\n                                    if not os.path.exists(filepath):\n                                        plates.append(p)\n                                else:\n                                    plates.append(p)\n                    \n        if plates == \[]:\n            if confirm:\n                nuke.message('No plates selected or all plates selected already have saved values.')\n                confirm = False\n        else:\n            plates.sort()\n            \n            if nuke.activeViewer() != None:\n                from PySide2 import QtWidgets, QtGui, QtCore\n                for widget in QtWidgets.QApplication.allWidgets():\n                    if widget.windowTitle() == nuke.activeViewer().node().name():\n                        for action in widget.actions():\n                            if action.shortcut().toString() == \"P\":\n                                action.trigger()\n            \n            iterator = 0\n            \n            progress = nuke.ProgressTask('Analyzing Plates')\n            percent = int(0)\n            increment = 100/(int(len(plates))*2)\n            progress.setProgress(0)\n            \n            completed = ''\n            interupted = False\n            \n            Jabuka.Environment.clearCaches()\n            \n            for plate in plates:\n                if progress.isCancelled():\n                    progress.setProgress(100)\n                    QCCompAnalyzerResetPlate(analyzer)\n                    interupted = True\n                    break;\n                    \n                if not nuke.GUI:\n                    print('Analyzing plate and saving values...')\n                \n                iterator = iterator+1\n                \n                message = 'Preparing '+str(iterator)+' of '+str(int(len(plates)))+' ( '+plate\['file'].evaluate().split('/')\[7]+' )'\n                progress.setMessage(message)\n                \n                QCCompAnalyzerResetPlate(analyzer)\n                \n                plate\['ieUpdateMode'].setValue('latestApproved')\n                \n                jnfn = JabukaNuke.JNFn.JNFnAssetNode(plate)\n                jnfn.updateAssetNode()\n                \n                if plate.knob('ieVar'):\n                    if 'native_working_exr' != plate\['ieVar'].value():\n                        if 'native_working_exr' in plate\['ieVar'].values():\n                            plate\['ieVar'].setValue('native_working_exr')\n                            plate\['ieUpdatePaths']\n                               \n                balanceGrade = None\n                \n                for node in plate.dependent(nuke.INPUTS | nuke.HIDDEN_INPUTS):\n                    if node.knob('ieDisplayName'):\n                        if node\['ieDisplayName'].value() in \['balanceGrade','working_grade']:\n                            balanceGrade = node\n                            break\n                \n                if balanceGrade:\n                    analyzer.setInput(1,balanceGrade)\n                else:\n                    balanceGrade = QCCompAnalyzerLoadBalanceGrade(plate)\n                    \n                    if balanceGrade:\n                        analyzer.setInput(1,balanceGrade)\n                    else:\n                        analyzer.setInput(1,plate)\n                    \n                message = 'Analyzing '+str(iterator)+' of '+str(int(len(plates)))+' ( '+plate\['file'].evaluate().split('/')\[7]+' )'\n                progress.setMessage(message)\n                \n                curvetoolmin = nuke.toNode(analyzer.name()+'.CurveToolPlateMin')\n                threading.Thread( QCCompAnalyzerAnalyzePlate(curvetoolmin, analyzer) ).start()\n                \n                percent = percent+increment\n                progress.setProgress(int(percent))\n                \n                message = 'Analyzing '+str(iterator)+' of '+str(int(len(plates)))+' ( '+plate\['file'].evaluate().split('/')\[7]+' )'\n                progress.setMessage(message)\n                \n                curvetoolmax = nuke.toNode(analyzer.name()+'.CurveToolPlateMax') \n                threading.Thread( QCCompAnalyzerAnalyzePlate(curvetoolmax, analyzer) ).start()\n                    \n                message = 'Saving '+str(iterator)+' of '+str(int(len(plates)))+' \\n( '+plate\['file'].evaluate().split('/')\[7]+' )'\n                progress.setMessage(message)\n                \n                minvalue = min((key.y for key in curvetoolmin\['minlumapixvalue'].animation(0).keys()))\n                maxvalue = max((key.y for key in curvetoolmax\['maxlumapixvalue'].animation(0).keys()))\n                \n                if minvalue > 0:\n                    minvalue = 0\n                \n                analyzer\['maxvalue'].setValue(maxvalue)\n                analyzer\['minvalue'].setValue(minvalue)\n                \n                threading.Thread( QCCompAnalyzerSaveDefaults(analyzer, \['maxvalue','minvalue'], 'plateValues', False) ).start()\n                \n                completed = completed+plate\['file'].evaluate().split('/')\[7]+'\\n'\n                \n                percent = percent+increment\n                progress.setProgress(int(percent))\n            \n            progress.setProgress(100)\n                \n            if not nuke.GUI:\n                print('\\nAnalyzing comp...')\n                \n            QCCompAnalyzerResetPlate(analyzer)\n            \n            if nuke.activeViewer() != None:\n                from PySide2 import QtWidgets, QtGui, QtCore\n                for widget in QtWidgets.QApplication.allWidgets():\n                    if widget.windowTitle() == nuke.activeViewer().node().name():\n                        for action in widget.actions():\n                            if action.shortcut().toString() == \"P\":\n                                action.trigger()\n    \n    if confirm:\n        if interupted:\n            nuke.message('Interrupted Batch Analyzing Plates!\\n\\nThese plates were analyzed:\\n\\n'+completed)\n        else:\n            nuke.message('Finished Batch Analyzing Plates!\\n\\nThese Plates were analyzed:\\n\\n'+completed)\n                \n###########################################################################################################################################################\nif nuke.GUI:\n    this = nuke.thisNode()\n\n    knobs = \['jabukafirst','jabukalast','compfirst','complast','rebuildchecker']\n    hide = \['savedchannels','topnoderead','channelcheck','detectalpha','topnodecheck','topnode','label','platetopnoderead','checkchannels','analyzerstatuscheck','wiprepo']\n\n    for knob in knobs:\n        this\[knob].setFlag(nuke.READ_ONLY)\n    \n    for knob in hide:\n        this\[knob].setVisible(False)\n        \n    if this\['ROIchoice'].value() in \['Delivery','Input']:\n        this\['ROI'].setFlag(nuke.READ_ONLY)\n    else:\n        this\['ROI'].clearFlag(nuke.READ_ONLY)\n    \n    if not IECompositing.utils.SceneOpenStatus.getSceneOpenStatus():\n        QCCompAnalyzerDefaultLevelUpdate(nuke.thisNode())"
 knobChanged "if nuke.thisKnob().name() == 'inputChange':\n    nuke.thisNode()\['savedchannels'].setValue(str(nuke.toNode('Comp').channels()))\n    \n    topNode = QCCompAnalyzerTopNode(nuke.thisNode(), 0)\n    nuke.thisNode()\['topnode'].setValue(topNode.name())\n    \n    if topNode.knob('file'):\n        file = topNode\['file'].evaluate().split('/')\n        jabukaPath = file\[3]+'/'+file\[5]+'/'+file\[7]\n        shot=Jabuka.findEntity(jabukaPath, onlyBase=False, throwException=False)\n        frameStart = shot\[\"frameStart\"].getTypedValue()\n        frameEnd = shot\[\"frameEnd\"].getTypedValue()\n        nuke.thisNode().knob('jabukafirst').setValue(frameStart)\n        nuke.thisNode().knob('jabukalast').setValue(frameEnd)\n    else:\n        nuke.thisNode().knob('jabukafirst').setValue(0)\n        nuke.thisNode().knob('jabukalast').setValue(0)\n    \n    QCCompAnalyzerDefaultLevelUpdate(nuke.thisNode())    \n    QCCompAnalyzerBuildDiChannels(nuke.thisNode())\n    \n######## Switch 0's and 1's in grade when switching between multiply and offset ########\nif nuke.thisKnob().name() == \"switchgrade\": \n    \n    color = nuke.thisNode()\['mattecolor'].getValue()   \n    \n    if nuke.thisKnob().getValue() == 0:       \n        for i in range(len(color)):\n            if color\[i] == 0.0:\n                color\[i] = 1.0  \n    \n    if nuke.thisKnob().getValue() == 1:\n        for i in range(len(color)):\n            if color\[i] == 1.0:\n                color\[i] = 0.0  \n    \n    nuke.thisNode()\['mattecolor'].setValue(color)\n    \nif nuke.thisKnob().name() == \"defaultlevel\":\n    QCCompAnalyzerDefaultLevelUpdate(nuke.thisNode())\n    \nif nuke.thisKnob().name() == \"frominput\":\n    QCCompAnalyzerDefaultLevelUpdate(nuke.thisNode())\n    \nif nuke.thisKnob().name() == \"supervisorleadmode\":\n    if nuke.thisNode()\['supervisorleadmode'].value():\n        askifsuplead = nuke.ask('<font color=red>Warning!</font>\\n\\nYou have enabled Supervisor / Lead mode.\\n\\nAre you sure you want to continue?')\n        if askifsuplead:\n            nuke.thisNode()\['supervisorleadtab'].clearFlag(nuke.INVISIBLE)\n        else:\n            nuke.thisNode()\['supervisorleadtab'].setFlag(nuke.INVISIBLE)\n            nuke.thisNode()\['supervisorleadmode'].setValue(False)\n    else:\n        nuke.thisNode()\['supervisorleadtab'].setFlag(nuke.INVISIBLE)\n        \nif nuke.thisKnob().name() == \"disable\":\n    current = nuke.thisNode()\['compplate'].value()\n    nuke.thisNode()\['disable'].setValue(False)\n    if nuke.thisNode()\['view'].value() == 'Contact Sheet' or 'Graph' in nuke.thisNode()\['view'].value() or nuke.thisNode()\['view'].value() == 'DI Matte Check' or nuke.thisNode()\['view'].value() == 'Difference Check':\n        nuke.thisNode()\['compplate'].setValue('Comp')\n    else:\n        if current == 'Comp':\n            nuke.thisNode()\['compplate'].setValue('Plate')\n        else:\n            nuke.thisNode()\['compplate'].setValue('Comp')\n            \nif nuke.thisKnob().name() == \"view\":\n   if nuke.thisNode()\['view'].value() == 'Contact Sheet' or 'Graph' in nuke.thisNode()\['view'].value() or nuke.thisNode()\['view'].value() == 'DI Matte Check' or nuke.thisNode()\['view'].value() == 'Difference Check':\n        nuke.thisNode()\['compplate'].setValue('Comp')\n        nuke.thisNode()\['text'].setValue(True)\n        \nif nuke.thisKnob().name() == \"compplate\":\n   if nuke.thisNode()\['view'].value() == 'Contact Sheet' or 'Graph' in nuke.thisNode()\['view'].value() or nuke.thisNode()\['view'].value() == 'DI Matte Check' or nuke.thisNode()\['view'].value() == 'Difference Check':\n        nuke.thisNode()\['compplate'].setValue('Comp')\n        \nif nuke.thisKnob().name() == \"autorun\" or nuke.thisKnob().name() == \"autorenderviews\" or nuke.thisKnob().name() == \"autodaily\":\n    if nuke.thisNode()\['autorun'].value():\n        if nuke.thisNode()\['autorenderviews'].value():\n            if nuke.thisNode()\['autodaily'].value():\n                label = 'Connect to Shot from Script > Update > Analyze > Render > Daily'\n            else:\n                label = 'Connect to Shot from Script > Update > Analyze > Render'\n        else:\n            label = 'Connect to Shot from Script > Update > Analyze'\n    else:\n        label = 'Connect to Shot from Script > Update'\n        \n    nuke.thisNode()\['connectandupdate'].setLabel(label)\n    \nif nuke.thisKnob().name() == \"batchanalyzeanddailywhich\":\n    if nuke.thisNode()\['batchanalyzeanddailywhich'].value() == 'Shotgun Version Status':\n        nuke.thisNode()\['batchanalyzeanddailystatus'].setVisible(True)\n    elif nuke.thisNode()\['batchanalyzeanddailywhich'].value() == 'Pick Shot Codes':\n        nuke.thisNode()\['batchanalyzeanddailystatus'].setVisible(False)\n        \nif nuke.thisKnob().name() == \"ROIchoice\":\n    if nuke.thisNode()\['ROIchoice'].value() == 'Input':\n        nuke.thisNode()\['ROI'].setFlag(nuke.READ_ONLY)\n        nuke.thisNode()\['ROI'].clearAnimated()\n        nuke.thisNode()\['ROI'].setExpression('0', 0)\n        nuke.thisNode()\['ROI'].setExpression('0', 1)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?input0.width:0', 2)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?input0.height:0', 3)\n    if nuke.thisNode()\['ROIchoice'].value() == 'Delivery':\n        nuke.toNode('JobCrop')\['framing'].setValue('delivery')\n        nuke.thisNode()\['ROI'].setFlag(nuke.READ_ONLY)\n        nuke.thisNode()\['ROI'].clearAnimated()\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?((input0.width-JobCrop.width)/2):0', 0)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?((input0.height-JobCrop.height)/2):0', 1)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?input0.width-ROI.x:0', 2)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?input0.height-ROI.y:0', 3)\n    if nuke.thisNode()\['ROIchoice'].value() == 'Editorial':\n        nuke.toNode('JobCrop')\['framing'].setValue('editorial')\n        nuke.thisNode()\['ROI'].setFlag(nuke.READ_ONLY)\n        nuke.thisNode()\['ROI'].clearAnimated()\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?((input0.width-JobCrop.width)/2):0', 0)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?((input0.height-JobCrop.height)/2):0', 1)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?input0.width-ROI.x:0', 2)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?input0.height-ROI.y:0', 3)\n    if nuke.thisNode()\['ROIchoice'].value() == 'Custom':\n        nuke.thisNode()\['ROI'].clearFlag(nuke.READ_ONLY)\n        nuke.thisNode()\['ROI'].clearAnimated()\n        nuke.thisNode()\['ROI'].setExpression('0', 0)\n        nuke.thisNode()\['ROI'].setExpression('0', 1)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?input0.width:0', 2)\n        nuke.thisNode()\['ROI'].setExpression('\[exists input0]?input0.height:0', 3)\n        nuke.thisNode()\['ROI'].clearAnimated()"
 autolabel "'<center>'+nuke.thisNode().name()+'\\n'+'<b><font color=white>'+nuke.thisNode()\['compplate'].value()+'\\n('+nuke.thisNode()\['view'].value()+')'"
 tile_color 0x241f00ff
 note_font Arial
 note_font_size 15
 note_font_color 0xb89f00ff
 selected true
 xpos -37590
 ypos -6304
 postage_stamp_frame 0
 addUserKnob {20 supervisorleadtab l "Supervisor / Lead" +INVISIBLE}
 addUserKnob {26 _27 l "" +STARTLINE T "<a href=\"https://docsie3/bin/view/Departments/Compositing%20%28update%20in%20progress%29/Compositing%20--%20Knowledge%20Base/QC%20Comp%20Analyzer%20%28QCA%29/\" style=color:white>\nQC Comp Analyzer Tool Docsie Page</a>\n<br><br>\nDon't forget to check tooltips first!"}
 addUserKnob {26 ""}
 addUserKnob {41 supervisorleadmodedummy l "Supervisor / Lead Mode" t "\nEnabled/Disabled the <b>Supervisor / Lead</b> tab.\n\n<font color=red><b>Only for use by Supervisors / Leads!" T QC_Comp_Analyzer_Tool.supervisorleadmode}
 addUserKnob {26 ""}
 addUserKnob {26 text_2 l " " T "<font color=red size=5> This tab is to be used by Supervisors and Leads only! "}
 addUserKnob {26 ""}
 addUserKnob {22 loadshots l "Load Plates / Comps / CutRefs" t "\nLoad Plate Comps and CutRefs for the chosen shots." T "this = nuke.thisNode()\n\nQCCompAnalyzerLoadShots(this)" +STARTLINE}
 addUserKnob {22 loadmissing l "Load Missing" t "\nChecks the script for any shots that have a loaded Plate, Comp or CutRef and loads all the missing corresponding versions and then sorts them." -STARTLINE T "with nuke.root():\n    QCCompAnalyzerLoadPlatesCompsCuts()"}
 addUserKnob {22 sort l Sort t "\nSort Plates, Comps and CutRefs found in the script in order by shotcode." -STARTLINE T "this = nuke.thisNode()\n\nwith nuke.root():\n    readNodes = nuke.allNodes('Read')\n    QCCompAnalyzerSortReads(this, readNodes)"}
 addUserKnob {26 ""}
 addUserKnob {41 viewdummy l View t "\nPick which tool to view." T QC_Comp_Analyzer_Tool.view}
 addUserKnob {41 compplatedummy l "" t "Switches relevant views between Comp and Plate input. \n\n<i>Tip: Use <b>D</b> shortcut key with this node selected to switch between inputs! " -STARTLINE T QC_Comp_Analyzer_Tool.compplate}
 addUserKnob {41 textdummy l "Analysis Text" t "\nEnable/Disable all analysis text." T QC_Comp_Analyzer_Tool.text}
 addUserKnob {41 labelsdummy l Labels t "\nEnable/Disable labels for relelvant views." -STARTLINE T QC_Comp_Analyzer_Tool.labels}
 addUserKnob {26 ""}
 addUserKnob {41 shotdummy l "Current  " T QC_Comp_Analyzer_Tool.shot}
 addUserKnob {26 ""}
 addUserKnob {20 group_2 l "ANALYSIS FUNCTIONS" n 1}
 addUserKnob {22 addalias l "Add Alias For Batch Analyzing From Terminal" t "\nAdds an alias to your alias file in linux so that you can batch analyze from your terminal.\n\nWhen the alias is used in a terminal it will always set your batch analyze settings to Shotgun Version Status." T "file = nuke.root().name()\n\nif file == 'Root':\n    nuke.message('Please save your script and try again!')\nelse:\n    import os\n    import sys\n    \n    name = nuke.getInput('What alias name would you like to use?')\n    \n    if name:\n        user = Jabuka.Environment.getCurrentUser()\n        show = file.split('/')\[3]\n        seq = file.split('/')\[5]\n        shot = file.split('/')\[7].replace(show+'-',\"\").replace(seq+'-',\"\")\n        alias = \"\\n\\nalias \"+name+\" 'jmp \"+show+\" \"+seq+\" \"+shot+\"\"\"; echo \"QCCompAnalyzerBatchAnalyzeFromTerminal()\" | nuke -t \"\"\"+file+\"'\" \n        aliasFolder = '/home/'+user+'/config/tcsh/'\n        aliasFile = 'tcshrc.tcsh'\n        \n        if not os.path.exists(aliasFolder):\n            os.makedirs(aliasFolder)\n        \n        aliasFilePath = aliasFolder+aliasFile\n        \n        tcsh = open(aliasFilePath, 'ab+')\n        \n        tcsh.write(alias.encode()); tcsh.close()\n        \n        nuke.message('Wrote alias to file!\\n\\nYou can now type <b>'+name+'</b> in a fresh terminal to batch analyze and daily versions from Shotgun!\\n\\nIf you would like to edit this alias you can find your alias file here:\\n\\n<b>'+aliasFilePath+\"</b>\\n\\nIf you'd like to see a list of all alias' available to you, type <b>alias</b> in your terminal.\\n\\nFinally, don't forget that alias' are case sensitive!\")" +STARTLINE}
 addUserKnob {22 openalias l "Open Alias File" t "\nOpens your local alias file so that you can view/edit/add/remove alias'." -STARTLINE T "user = Jabuka.Environment.getCurrentUser()\naliasFolder = '/home/'+user+'/config/tcsh/'\naliasFile = 'tcshrc.tcsh'\naliasFilePath = aliasFolder+aliasFile\n\nos.system(\"gedit %s\" % aliasFilePath)"}
 addUserKnob {26 _11 l "" +STARTLINE T " "}
 addUserKnob {22 batchanalyzeanddaily l "<b>Batch Analyze and Daily Results" t "\nBatch analyzes chosen versions and dailies the results.\n\nWill auto render dailies after analyzing." T QCCompAnalyzerBatchAnalyzeAndRender(nuke.thisNode()) +STARTLINE}
 addUserKnob {4 batchanalyzeanddailywhich l "" t "\nShotgun Version QC Status - Will query Shotgun and load in the comp versions that are flipped to QC status and then analyze them. \n\nPick Shot Codes - Will present a user interface to pick shot codes you want to analyze the latest comp version of." -STARTLINE M {"Shotgun Version Status" "Pick Shot Codes" Selected "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {1 batchanalyzeanddailystatus l " " t "\nEnter the status codes you would like to QC, \n\nSeperate by a comma e.g.    qc,ip,rrq\n\nna - N/A\npndng - Pending\nrev - Pending Review\nvfxsup - VFX Sup Review\nptr - Pending Theatre Review\nvwd - Viewed\nrrq - Revisions Required\nkb - Client Kickback\ntmp - Temp Approved\nintap - Internally Approved\napr - Approved\nppf - Proposed Final\nqc - Quality Control\nrdysnd - Ready to Send\nsff - Sent - for Final\nfin - Final\nphold - Placeholder\nawfmrw - Awaiting Filmmaker Review\nvbc - Viewed by client\nfpp - Final Pending\nfpf - Final Pending Fix\nufin - Un-final\nfp4k - Final Pending 4K\ntchfn - Tech Final\ntempen - Temp Approved Pending\ntclnt - Sent to Client\nvc - Viewed by Client\n"}
 batchanalyzeanddailystatus qc
 addUserKnob {26 ""}
 addUserKnob {22 connectandupdate l "Connect to Shot from Script > Update > Analyze > Render > Daily" t "<br>Scans script for existing Comps, then prompts with a list of shots for you to choose from.\n\nAfter your choice it will update the Comp version to <b>Latest</b> and the Plate version to <b>Latest Approved</b> and then Connect the Analyzer's inputs to those Read nodes.\n\nIf Auto Analyze palte is enabled then the plate will be analyzed after connecting before the comp is analyzed. \n\nIf Auto Analyze is enabled then the comp will be analyzed after connecting. \n\nif Auto Render is also enabled then after analyzing it will send the selected views to the farm." T "print(\"------------------------ START CONNECT TO SHOT OPERATION ------------------------\\n\")\n\nthis = nuke.thisNode()\n\nquestion = '<font color=yellow>Warning!</font>\\n\\nThe following automation is enabled:\\n\\n'\n\nif this\['autorun'].value():\n    autoAnalysis = True\n    question = question+'- Auto <font color =lime><b>\[Analyze Comp]</b></font> After Using <b>\[Connect to Shot and Update Reads]</b>\\n'\n    \n    if this\['autorenderviews'].value():\n        question = question+'- Auto <font color=yellow><b>\[Render Selected Views]</b></font> From <b>\[Render Views]</b> Tab After Analysis\\n'\n        \n        if this\['autodaily'].value():\n            question = question+'<b>\\nAuto Daily</b> is enabled.\\n'\n        \n    answer = nuke.ask(question+'\\nAre you sure you want to continue?')\nelse:\n    answer = True\n\nif answer:\n\n    with nuke.root():\n        \n        shotList = \[]\n        shotChoice = \"\"\n        comp = None\n        plate = None\n        readNodesToUpdate = \[]\n        choice = None\n        allReads = nuke.allNodes('Read')\n        \n        if this\['manual'].value() == False:\n            for n in allReads:\n                if \"ieDisplayName\" in n.knobs():\n                    if \"comp\" == n\['ieDisplayName'].value():\n                        shot = (str(n\['ieSequencePath'].getText()).split('/')\[7]).split('-', 1)\[1]\n                        if shot not in shotList:\n                            shotList.append(shot)\n            \n            shotList.sort()\n            \n            if shotList != \[]:\n                choice = nuke.choice(\"Choose Shot\", \"\", shotList)   \n            else:\n                nuke.message('No Comps detected')  \n            \n            if choice != None:\n                shotChoice = str(shotList\[int(choice)])\n        else:\n            choice = nuke.getInput(\"Shotcode\")\n            if choice != None:\n                shotChoice = QCCompAnalyzerConformSearch(choice)\n                print(\"\\nSearch string conformed to: \"+shotChoice+\"\\n\")\n        \n        for c in allReads:\n            if 'ieSequencePath' in c.knobs():\n                if shotChoice in c\['ieSequencePath'].value():\n                    if c\['ieDisplayName'].value() == 'comp':\n                        comp = c\n    \n        for p in allReads:\n            if 'ieSequencePath' in p.knobs():\n                if shotChoice in p\['ieSequencePath'].value():\n                    if p\['ieDisplayName'].value() == 'plate':\n                        plate = p\n        \n        if choice == None:\n            nuke.message(\"Shot not found!\")\n        else:\n            \n            Jabuka.Environment.clearCaches()\n            \n            if comp != None:\n                \n                readNodesToUpdate.append(comp)             \n                comp\['ieUpdateMode'].setValue('latest')\n                \n                jnfn = JabukaNuke.JNFn.JNFnAssetNode(comp)\n                jnfn.updateAssetNode()  \n                \n                print(\"\\nUpdated \"+comp.name()+\" to Latest version!\\n\")\n            \n            if plate != None:\n                \n                readNodesToUpdate.append(plate)\n                plate\['ieUpdateMode'].setValue('latestApproved')\n                \n                if \"Neutral\" in plate\['ieVar'].value():\n                    plate\['ieUseIdealVariation'].setValue(False)\n                else:\n                    plate\['ieUseIdealVariation'].setValue(True)              \n                \n                jnfn = JabukaNuke.JNFn.JNFnAssetNode(plate)\n                jnfn.updateAssetNode()    \n                \n                if this\['neutral']:\n                    if 'nativeNeutral_working_exr' in plate\['ieVar'].values():\n                        neutral = ' also updated to Neutral variation'\n                        plate\['ieVar'].setValue('nativeNeutral_working_exr')\n                        plate\['ieUpdatePaths'].execute()\n                    else:\n                        neutral = ''\n                \n                print(\"\\nUpdated \"+plate.name()+\" to Latest Approved version!\"+neutral+\"\\n\")\n            \n            if comp != None:\n                this.setInput(0, comp)\n                print(\"\\nConnected Comp input to: \"+comp.name()+\"\\n\")\n            else:\n                this.setInput(0, None)\n            if plate != None:\n                this.setInput(1, plate)\n                print(\"\\nConnected Plate input to: \"+plate.name()+\"\\n\")\n            else:\n                this.setInput(1, None)\n            \n            this\['loadfrominput'].setValue(True)\n            QCCompAnalyzerLoadValues(this, 'plateValues', False)\n            \n            this\['reload'].execute()\n            \n            if this\['autorun'].value():\n                print('Auto Run enabled so starting analysis!\\n')\n                threading.Thread(QCCompAnalyzerAnalyze(this))\n            else:\n                this\['reset'].execute()\n            \nprint(\"\\n------------------------ END CONNECT TO SHOT OPERATION ------------------------\")\n" +STARTLINE}
 addUserKnob {6 manual l "Manually Enter Shotcode" t "\nInstead of presenting a list of available Comps in the script, will prompt for shot code.\n\nShot code search rules:\n- NOT case sensitive\n- Can use spaces ( ) or dashes (-)\n- Can use partial codes\n- Must Omit SHOW code if episodic\n\nExamples to connect to 104-WMT-0010:\n104-Wmt-10\nwmt 0010\nWMT-0010\nmt 010\n04wmt10\n\nWon't work:\n104mt10\nTRK-104-WMT-0010\n\n" +STARTLINE}
 addUserKnob {6 neutral l "Update Plate to Neutral Variation" t "\nWhen connecting to your plate will also update it to the Neutral variation so that it matches the color of your Comp. \n\nMainly for use in contactsheet scripts, careful using this function in comp scripts as you may end up with a double working graded plate!" -STARTLINE +INVISIBLE}
 neutral true
 addUserKnob {26 ""}
 addUserKnob {41 analyzedummy l "<b><font color=#49fc03>Analyze Comp" t "\nWill reload downstream CDLs, reset the analyzer, rebuild DI Matte setup, Refresh channel list and then run analysis.\n\nAnalyzes for inf, nan, highlights and negative values.\n\nBounding box and frame range checks are persistent." T QC_Comp_Analyzer_Tool.analyze}
 addUserKnob {41 renderdummy l "<font color=yellow><b>Render Current" t "\nFirst checks if a QC_Write_Node exists, if not creates one.  Then sends current view to the farm." -STARTLINE T QC_Comp_Analyzer_Tool.render}
 addUserKnob {41 renderviewsdummy l "<font color=yellow><b>Render Views" t "\nRenders views selected in the Render Views tab on the farm." -STARTLINE T QC_Comp_Analyzer_Tool.renderviews}
 addUserKnob {41 resetdummy l "<font color=#fc0303><b>Reset" t "\nResets the analyzer and rebuilds DI matte setup" -STARTLINE T QC_Comp_Analyzer_Tool.reset}
 addUserKnob {41 analyzejabukadummy l "Analyze Jabuka Frame Range" +INVISIBLE T QC_Comp_Analyzer_Tool.analyzejabuka}
 addUserKnob {20 endGroup_6 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 group l AUTOMATION n 1}
 group 0
 addUserKnob {6 autorun l "&nbsp;Auto <font color =lime><b>\[Analyze Comp]</b></font> After Using <b>\[Connect to Shot and Update Reads]</b>" t "\nRuns the analysis after using the 'Connect to Shot and Update Reads' button." +STARTLINE}
 autorun true
 addUserKnob {6 autorenderviews l "&nbsp;Auto <font color=yellow><b>\[Render Views]</b></font> From <b>\[Render Views]</b> Tab After Analysis" t "\nAutomatically render all the selected views in the render views tab when finished analyzing." +STARTLINE}
 autorenderviews true
 addUserKnob {6 autodaily l "Auto Daily After Render                                   " t "\nWhen rendering, enables auto daily." +STARTLINE}
 autodaily true
 addUserKnob {3 clumping l "Frame Clumping" t "\nFrame clumping override when sending render to the farm." -STARTLINE}
 clumping 3
 addUserKnob {20 endGroup_4 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 group_1 l "SAVE/LOAD DEFAULTS / CUSTOM PLATE VALUES" n 1}
 group_1 0
 addUserKnob {26 ""}
 addUserKnob {41 loadefaultsdummy l "Load Default Settings" t "\nLoads default settings for current shot environment.\n\n<i>Shot environment taken from input or from script environment.</i>\n\nWill search for default settings in the following order: \n\nShot > Sequence > Show\n\nWill load the first one that it finds." T QC_Comp_Analyzer_Tool.loaddefaults}
 addUserKnob {41 loadplatevaluesdummy l "Load Plate Values" t "\nLoads saved plate values for current shot environment into the <b>Whites Tolerance</b> and <b>Blacks Tolerance</b> knobs.\n\n<i>Shot environment taken from input or from script environment.</i>\n\nWill search for default settings in the following order: \n\nShot > Sequence > Show\n\nWill load the first one that it finds.\n" -STARTLINE T QC_Comp_Analyzer_Tool.loadplatevalues}
 addUserKnob {41 loadfrominputdummy l "From Input" t "\n\nEnabled - Get environment for loading default settings and plate values from input. \n\nDisabled - Get environment for loading default settings and plate values from script. " -STARTLINE T QC_Comp_Analyzer_Tool.loadfrominput}
 addUserKnob {26 ""}
 addUserKnob {26 text_7 l "" +STARTLINE T " "}
 addUserKnob {22 batchanalyzeandsave l "<font size=5><b>Batch Analyze Selected Plates" t "\nWill first update plates to latest approved version and change to neutral variation. \n\nThen will analyze the selected plates and save their minimum and maximum pixel values so that they can be loaded in per shot.\n\nAfter Analyzing is completed on a plate it's variation will be changed back to what it was before updating to neutral." T "node=nuke.thisNode()\n\nwith nuke.root():\n    list=nuke.selectedNodes('Read')\n\nQCCompAnalyzerAnalyzePlates(node, list, True)" +STARTLINE}
 addUserKnob {6 skipexisting l "Skip plates with existing saved values" t "\nSkips plates that already have values saved on file." +STARTLINE}
 skipexisting true
 addUserKnob {26 ""}
 addUserKnob {26 _26 l "" +STARTLINE T " "}
 addUserKnob {26 _17 l " " T "Level "}
 addUserKnob {4 defaultlevel l "" t "\nChoose what level to save default settings and plate values." -STARTLINE M {Show Sequence Shot "" "" "" "" "" "" "" "" ""}}
 addUserKnob {6 frominput l "From Input" t "\nEnabled - Get environment for saving default settings and plate values from input. \n\nDisabled - Get environment for saving default settings and plate values from script. " -STARTLINE}
 frominput true
 addUserKnob {26 _10 l "" +STARTLINE T " "}
 addUserKnob {22 savedefaults l "Save <b><font color=DodgerBlue>SPI</font></b> Default Settings" t "\nSaves default settings for the analyzer at the level written on this button." T "knobs=\['autorenderviews','autodaily','autorun','clumping','loadfrominput','analyzejabuka','slate','textsize','checkframerange','checkalpha','showchannelcheck','checkbbox','checknegatives','checkinfnan','checkhighlights','edge','edgewidth','difference','colourcheck','mattecolor','switchgrade','ROI','ROIchoice','viewanalysisregion','csscale','csplate','cscomp','csinfnanspotter','csnegativespotter','cshighlightspotter','csgraincheck','cscolourcheck','csdifferencecheck','csedgecheck','csdimattecheck','csmingraph','csmaxgraph','autodaily','infnanspotterrender','negativespotterrender','highlightspotterrender','graincheckrender','colourcheckrender','differencecheckrender','edgecheckrender','dimattecheckrender','minvaluesgraphrender','maxvaluesgraphrender','contactsheetrender']\n\nQCCompAnalyzerSaveDefaults(nuke.thisNode(), knobs, 'defaults', True)" +STARTLINE}
 addUserKnob {26 _25 l "" +STARTLINE T " "}
 addUserKnob {26 _24 l " " T "Plate Min "}
 addUserKnob {41 minvaluedummy l "" -STARTLINE T QC_Comp_Analyzer_Tool.minvalue}
 addUserKnob {41 maxvaluedummy l Max -STARTLINE T QC_Comp_Analyzer_Tool.maxvalue}
 addUserKnob {22 saveplatevalues l "Save <b><font color=DodgerBlue>SPI</font></b> Plate Values" t "\nSaves plate values from the <b>Whites Tolerance</b> and <b>Blacks Tolerance</b> knobs at the level written on this button." T "node=nuke.thisNode()\nlist=\['maxvalue','minvalue']\nsave='plateValues'\nask=True\n\nQCCompAnalyzerSaveDefaults(node, list, save, ask)" +STARTLINE}
 addUserKnob {20 endGroup_5 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 analyzertab l Analyzer}
 addUserKnob {26 savedchannels l "channels last input change" +HIDDEN +INVISIBLE T "\[]"}
 addUserKnob {6 topnoderead l "comp input contains a read" +HIDDEN +INVISIBLE +STARTLINE}
 topnoderead {{"\[python False\\ if\\ nuke.thisNode().input(0)\\ ==\\ None\\ else\\ (True\\ if\\ QCCompAnalyzerTopNode(nuke.thisNode(),\\ 0).Class()\\ ==\\ 'Read'\\ else\\ False)]"}}
 addUserKnob {6 platetopnoderead l "plate input contains a read" +HIDDEN +INVISIBLE +STARTLINE}
 platetopnoderead {{"\[python False\\ if\\ nuke.thisNode().input(1)\\ ==\\ None\\ else\\ (True\\ if\\ QCCompAnalyzerTopNode(nuke.thisNode(),\\ 1).Class()\\ ==\\ 'Read'\\ else\\ False)]"}}
 addUserKnob {6 channelcheck l "check is current channels from comp input match last input change" +HIDDEN +INVISIBLE +STARTLINE}
 channelcheck {{"\[python True\\ if\\ str(nuke.toNode(nuke.thisNode().name()+'.Comp').channels())\\ ==\\ nuke.thisNode()\\\['savedchannels'\\].value()\\ else\\ False]"}}
 addUserKnob {6 detectalpha l "detect if there is an alpha" +HIDDEN +INVISIBLE +STARTLINE}
 detectalpha {{"\[python True\\ if\\ 'rgba.alpha'\\ in\\ nuke.toNode(nuke.thisNode().name()+'.Comp').channels()\\ else\\ False]"}}
 addUserKnob {26 placement l "" +STARTLINE T ""}
 addUserKnob {6 minlumpixel_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 topnodecheck l "check if comp topnode matches last input change" +HIDDEN +INVISIBLE +STARTLINE}
 topnodecheck {{"\[python True\\ if\\ nuke.thisNode()\\\['topnode'\\].value()\\ ==\\ QCCompAnalyzerTopNode(nuke.thisNode(),\\ 0).name()\\ else\\ False]"}}
 addUserKnob {6 checkchannels l "check for extra channels" +HIDDEN +INVISIBLE +STARTLINE}
 checkchannels {{"\[python False\\ if\\ nuke.thisNode().input(0)\\ ==\\ None\\ else\\ (True\\ if\\ \\\[s\\ for\\ s\\ in\\ nuke.thisNode().input(0).channels()\\ if\\ not\\ any(x\\ in\\ s\\ for\\ x\\ in\\ \\\['matte','rgb'\\])\\]\\ !=\\ \\\[\\]\\ else\\ False)]"}}
 addUserKnob {4 analyzerstatuscheck l "analyzer status" +HIDDEN +INVISIBLE M {Complete Incomplete "Not Run" "" "" "" "" "" "" "" "" "" ""}}
 analyzerstatuscheck {{this.AnalyzerSwitch.which}}
 addUserKnob {26 topnode l "comp topnode name" +HIDDEN +INVISIBLE T QC_Comp_Analyzer_Tool}
 addUserKnob {6 wiprepo l "using wipRepo instead of plate?" +HIDDEN +STARTLINE}
 wiprepo {{"\[python -execlocal topNode\\ =\\ QCCompAnalyzerTopNode(nuke.thisNode(),1)\\n\\nif\\ topNode:\\n\\ \\ \\ \\ if\\ topNode.knob('ieDisplayName'):\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ topNode\\\['ieDisplayName'\\].value()\\ ==\\ 'plate_wipRepo':\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ True\\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ False\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ False\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ False]"}}
 addUserKnob {26 _28 l "" +STARTLINE T "<a href=\"https://docsie3/bin/view/Departments/Compositing%20%28update%20in%20progress%29/Compositing%20--%20Knowledge%20Base/QC%20Comp%20Analyzer%20%28QCA%29/\" style=color:white>\nQC Comp Analyzer Tool Docsie Page</a>\n<br><br>\nDon't forget to check tooltips first!"}
 addUserKnob {20 instructions l INSTRUCTIONS +INVISIBLE n 1}
 instructions 0
 addUserKnob {26 _2 l " " T "<i><font color=grey>Place before any LUT transforms such as shotContextColor or OCIOFileTransform</i></font><br><br>\n\n1) Plug into your rendered COMP and then hit <b><font color=#49fc03>Analyze Comp</b></font>!<br>&nbsp;&nbsp;<i><font color=grey>Will analyze your COMP for inf, nan & dark/bright values beyond threshold settings.</i></font><br><br>\n\n2) Will also dynamically flag many other issues in the different views.<br>\n\n<i><font color=grey>&nbsp;&nbsp;You can toggle between your Comp & Plate by selecting this node and pressing <b>D</b>.</font><br><br>\n\n3) Switch View to Contact Sheet to view all checks at once!<br><br>\n\n4) Auto Render Views to send your chosen views to the farm after analyzing completes.<br><br>\n\n<font color=yellow>For detailed descriptions of every setting check their tooltips!"}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {6 supervisorleadmode l "Supervisor / Lead Mode" t "\nEnabled/Disabled the <b>Supervisor / Lead</b> tab.\n\n<font color=red><b>Only for use by Supervisors / Leads!" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 view l View t "\nPick which tool to view." M {Input "INF/NAN Spotter" "Negative Spotter" "Highlight Spotter" "Grain Check" "Colour Check" "Difference Check" "Edge Check" "DI Matte Check" "Min Pixel Graph" "Max Pixel Graph" "Contact Sheet" "" ""}}
 view "Contact Sheet"
 addUserKnob {4 compplate l "" t "Switches relevant views between Comp and Plate input. \n\n<i>Tip: Use <b>D</b> shortcut key with this node selected to switch between inputs! " -STARTLINE M {Comp Plate "" "" ""}}
 addUserKnob {6 text l "Analysis Text" t "\nEnable/Disable all analysis text." +STARTLINE}
 text true
 addUserKnob {6 labels l Labels t "\nEnable/Disable labels for relelvant views." -STARTLINE}
 labels true
 addUserKnob {26 ""}
 addUserKnob {20 functionstab l "ANALYSIS FUNCTIONS" n 1}
 addUserKnob {41 autorenderviewsdummy l "&nbsp;Auto <font color=yellow><b>\[Render Views]</b></font> From <b>\[Render Views]</b> Tab After Analysis" t "\nAutomatically render all the selected views in the render views tab when finished analyzing." T QC_Comp_Analyzer_Tool.autorenderviews}
 addUserKnob {41 autodailydummy1 l "Auto Daily After Render                                   " t "\nWhen rendering, enables auto daily." T QC_Comp_Analyzer_Tool.autodaily}
 addUserKnob {41 clumpingdummy1 l "Frame Clumping" t "\nFrame clumping override when sending render to the farm." -STARTLINE T QC_Comp_Analyzer_Tool.clumping}
 addUserKnob {26 ""}
 addUserKnob {22 loaddefaults l "Load Default Settings" t "\nLoads default settings for current shot environment.\n\n<i>Shot environment taken from input or from script environment.</i>\n\nWill search for default settings in the following order: \n\nShot > Sequence > Show\n\nWill load the first one that it finds." T "QCCompAnalyzerLoadValues(nuke.thisNode(), 'defaults', True)" +STARTLINE}
 addUserKnob {22 loadplatevalues l "Load Plate Values" t "\nLoads saved plate values for current shot environment into the <b>Whites Tolerance</b> and <b>Blacks Tolerance</b> knobs.\n\n<i>Shot environment taken from input or from script environment.</i>\n\nWill search for default settings in the following order: \n\nShot > Sequence > Show\n\nWill load the first one that it finds.\n" -STARTLINE T "QCCompAnalyzerLoadValues(nuke.thisNode(), 'plateValues', True)"}
 addUserKnob {6 loadfrominput l "From Input" t "\n\nEnabled - Get environment for loading default settings and plate values from input. \n\nDisabled - Get environment for loading default settings and plate values from script. " -STARTLINE}
 loadfrominput true
 addUserKnob {26 ""}
 addUserKnob {22 analyze l "<b><font color=#49fc03>Analyze Comp" t "\nWill reload downstream CDLs, reset the analyzer, rebuild DI Matte setup, Refresh channel list and then run analysis.\n\nAnalyzes for inf, nan, highlights and negative values.\n\nBounding box and frame range checks are persistent." T "groupNode = nuke.thisNode()\n\n####### Check if version has been analyzed before ########\njob = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\[3]\npath = '/data/jobs/'+job+'/tools/nuke/scriptlets/pipeline/CompAnalyzer/'\nfilename = job+'-AnalyzerHistory.py'\nfilePath = path+filename\nhistory = ''\n\nif os.path.exists(filePath):\n    with nuke.root():\n        compFile = QCCompAnalyzerTopNode(groupNode, 0)\['file'].evaluate().split('/')\[-1].split('.')\[0]\n    \n        file = open(filePath, 'r')\n        history = file.read()\n        file.close() \n    \n    if compFile in history: \n        askHistory = nuke.ask('This version has already been analyzed and the results have been dailied!\\n\\nAre you sure you want to continue?')\n    else:\n        askHistory = True\n     \nelse:\n    askHistory = True\n       \nif askHistory:\n    \n    if groupNode\['autorenderviews'].value():\n        question = '<font color=yellow>Warning!</font>\\n\\n\"Auto <font color=yellow><b>\[Render Selected Views]</b></font> From <b>\[Render Views]</b> Tab After Analysis\" is <font color=lime>ENABLED</font> with these settings:\\n\\n'\n        \n        for knob in groupNode.knobs().keys():\n            if 'render' in knob and 'render' != knob and 'renderviews' != knob and 'autorenderviews' != knob and 'renderviewstab' != knob and 'autorenderviewsdummy' != knob and 'renderviewsdummy' != knob and 'renderdummy' != knob and 'renderviewsdummy2' != knob:\n                question = question+' - '+groupNode\[knob].label()+' ('+groupNode\[knob].value().replace(\" \",\"\")+')\\n'\n                \n        if groupNode\['autodaily'].value():\n            question = question+'\\n<b>Auto Daily</b> is enabled.\\n\\nAre you sure you want to continue?'\n        else:\n            question = question+'\\nAre you sure you want to continue?'\n        \n        answer = nuke.ask(question)\n        \n    else:\n        answer = True\n    \n    if answer:\n        QCCompAnalyzerLoadValues(groupNode, 'plateValues', False)\n        QCCompAnalyzerAnalyze(groupNode)" +STARTLINE}
 addUserKnob {22 render l "<font color=yellow><b>Render Current" t "\nFirst checks if a QC_Write_Node exists, if not creates one.  Then sends current view to the farm." -STARTLINE T "if nuke.thisNode()\['autodaily']:\n    if nuke.ask('<font color=yellow>Warning!</font> Auto Daily is enabled.\\n\\nAre you sure you want to continue?'):\n        QCCompAnalyzerRender(this=nuke.thisNode(), confirmation=True)\nelse:\n    QCCompAnalyzerRender(this=nuke.thisNode(), confirmation=True)"}
 addUserKnob {41 renderviewsdummy2 l "<font color=yellow><b>Render Views" t "\nRenders views selected in the Render Views tab on the farm." -STARTLINE T QC_Comp_Analyzer_Tool.renderviews}
 addUserKnob {22 reset l "<font color=#fc0303><b>Reset" t "\nResets the analyzer and rebuilds DI matte setup" -STARTLINE T "node = nuke.thisNode()\n\nQCCompAnalyzerReset(node)\nQCCompAnalyzerResetPlate(node)\nQCCompAnalyzerClearGraph(nuke.toNode('GraphRGBMin'))\nQCCompAnalyzerClearGraph(nuke.toNode('GraphRGBMax'))\n\nwith nuke.root():\n    QCCompAnalyzerBuildDiChannels(node)"}
 addUserKnob {6 analyzejabuka l "Analyze Jabuka Frame Range" t "\nWhen checked will only analyze the jabuka frame range of the comp input. \n\nWhen un-checked will prompt you to choose what frame range you would like to analyze" -STARTLINE +INVISIBLE}
 analyzejabuka true
 addUserKnob {26 ""}
 addUserKnob {22 build l "<font color=orange><b>Rebuild if Needed >>" t "\n<b><font color=red>For use when the warning beside this knob says that a rebuild is required!</b></font>\n\nRebuild dynamic checks for DI Mattes, Channels and Framerange. " T "this = nuke.thisNode()\nsavedInput = this.input(0)\n\nthis.setInput(0, None)\nthis.setInput(0, savedInput)" +STARTLINE}
 addUserKnob {4 rebuildchecker l " " t "\nIf a rebuild is required this will display <b>NEEDS REBUILD</b>.\n\nIf rebuild is not required this will display <b>Matching Input" -STARTLINE M {"NEEDS REBUILD" "Not Needed" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 rebuildchecker {{channelcheck}}
 addUserKnob {26 ""}
 addUserKnob {20 endGroup_2 l endGroup n -1}
 addUserKnob {20 AnalysisInfo l "ANALYSIS RESULTS" n 1}
 AnalysisInfo 0
 addUserKnob {26 _15 l "" +STARTLINE T " "}
 addUserKnob {26 shot l " " T "<b>Missing Comp Input"}
 addUserKnob {26 text_3 l "" +STARTLINE T " "}
 addUserKnob {26 framerangehelp l "" +STARTLINE T "<i><font color=\"grey\">\nWill take frame ranges from Jabuka and read node based on Comp input"}
 addUserKnob {26 text_1 l Jabuka T " "}
 addUserKnob {3 jabukafirst l "First Frame" -STARTLINE}
 addUserKnob {3 jabukalast l "Last Frame" -STARTLINE}
 addUserKnob {26 _14 l Comp T " "}
 addUserKnob {3 compfirst l "First Frame" -STARTLINE}
 compfirst {{"\[python (nuke.toNode(nuke.thisNode().name()+'.Comp').firstFrame()\\ if\\ nuke.toNode(nuke.thisNode().name()+'.Comp').firstFrame()\\ !=\\ 1\\ else\\ 0)]"}}
 addUserKnob {3 complast l "Last Frame" -STARTLINE}
 complast {{"\[python nuke.toNode(nuke.thisNode().name()+'.Comp').lastFrame()\\ if\\ nuke.toNode(nuke.thisNode().name()+'.Comp').lastFrame()\\ !=\\ 1\\ else\\ 0]"}}
 addUserKnob {6 slate l "Slate frame exists?" -STARTLINE}
 addUserKnob {26 _8 l " " T ""}
 addUserKnob {26 _7 l " " T "<b>Channel List"}
 addUserKnob {26 channelslist l " " T "<font color=lime><font color=red>Missing Comp Input</font><font color=yellow><br></font><font color=red><br>"}
 addUserKnob {6 maxlumpixel_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {26 text_5 l "" +STARTLINE T " "}
 addUserKnob {20 endGroup_3 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 AnalysisSettings l "ANALYSIS SETTINGS" n 1}
 AnalysisSettings 0
 addUserKnob {26 _16 l "" +STARTLINE T " "}
 addUserKnob {26 _20 l "" +STARTLINE T "Global Text Scale  "}
 addUserKnob {7 textsize l "" t "Global scale for all text rendered in the viewer." -STARTLINE R 0 2}
 textsize 1
 addUserKnob {26 _5 l " " T ""}
 addUserKnob {6 checkframerange l "Check Frame Range" +STARTLINE}
 checkframerange true
 addUserKnob {6 checkbbox l "Check Bbox" -STARTLINE}
 checkbbox true
 addUserKnob {6 checkalpha l "Check Alpha" +STARTLINE}
 checkalpha true
 addUserKnob {6 checknegatives l "Check Blacks" -STARTLINE}
 checknegatives true
 addUserKnob {6 checkhighlights l "Check Whites" -STARTLINE}
 checkhighlights true
 addUserKnob {6 checkinfnan l "Check for INF/NAN" +STARTLINE}
 checkinfnan true
 addUserKnob {6 showchannelcheck l "Check Channels" -STARTLINE}
 showchannelcheck true
 addUserKnob {26 _6 l " " T ""}
 addUserKnob {26 text_6 l "" +STARTLINE T "Edge Check                 "}
 addUserKnob {7 edge l Sensitivity t "Adjusts the sensitivity of the Edge Check tool.\n\nWhen sensitivity is set high, bright values can flag false positives." -STARTLINE R 1 10}
 edge 2
 addUserKnob {7 edgewidth l "Crop Width" t "Adjusts the crop width of the Edge Check tool.\n\nIncrease to detect larger edge issues." -STARTLINE R 1 10}
 edgewidth 2
 addUserKnob {26 _9 l "" +STARTLINE T "Difference Check                  "}
 addUserKnob {7 difference l Gain t "Controls gain amount for the Difference Check tool." -STARTLINE R 1 5}
 difference 1
 addUserKnob {26 _18 l "" +STARTLINE T "Colour Check              "}
 addUserKnob {7 colourcheck l Saturation t "Controls saturation amount for the Colour Check tool." -STARTLINE R 1 10}
 colourcheck 5
 addUserKnob {26 _19 l "" +STARTLINE T "DI Matte             "}
 addUserKnob {18 mattecolor l Color t "Choose which colour you want to grade the comp when viewing the DiMatte Check tool.\n\n\nCheckerboard flags values not between 0 and 1." -STARTLINE R 1 5}
 mattecolor {2.5 0 2.5}
 addUserKnob {6 mattecolor_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 switchgrade l "Switch to Offset" -STARTLINE}
 switchgrade true
 addUserKnob {26 text_4 l "" +STARTLINE T " "}
 addUserKnob {26 _21 l "" +STARTLINE T "Whites Tolerance  "}
 addUserKnob {7 maxvalue l "" t "Adjust the max value for the analyzer's highlight check and the Highlight Spotter tool.\n\nDoes NOT require a re-analyze after adjustment." -STARTLINE R 0 100}
 maxvalue 50
 addUserKnob {26 _22 l "" +STARTLINE T "Blacks Tolerance   "}
 addUserKnob {7 minvalue l "" t "Adjust the minimum value for the analyzer's negative check and the Negative Spotter tool.\n\nDoes NOT require a re-analyze after adjustment." -STARTLINE R -1 1}
 addUserKnob {26 _29 l " " T "                       "}
 addUserKnob {6 autoloadplatevalues l "Auto Load Plate Values" -STARTLINE}
 autoloadplatevalues true
 addUserKnob {26 _13 l "" +STARTLINE T " "}
 addUserKnob {26 _23 l "" +STARTLINE T "Analysis Region  "}
 addUserKnob {15 ROI l "" -STARTLINE}
 ROI {{"\[exists input0]?((input0.width-JobCrop.width)/2):0"} {"\[exists input0]?((input0.height-JobCrop.height)/2):0"} {"\[exists input0]?input0.width-ROI.x:0"} {"\[exists input0]?input0.height-ROI.y:0"}}
 addUserKnob {4 ROIchoice l "" -STARTLINE M {Input Delivery Editorial Custom}}
 ROIchoice Delivery
 addUserKnob {6 viewanalysisregion l View t "Enable/Disable the mask for your analysis region." -STARTLINE}
 viewanalysisregion true
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {26 _3 l "" +STARTLINE T "<b>v7.48 </b><font color=grey><i>Created by <b>Daniel Bigaj</b> 11 September 2023"}
 addUserKnob {20 contactsheettab l "Contact Sheet"}
 addUserKnob {7 csscale l "Scale Resolution" t "\nScales the resolution of the Contact Sheet view."}
 csscale 0.51
 addUserKnob {26 ""}
 addUserKnob {4 csplate l Plate t "Auto - Leaves Plate turned on if input is plugged in." M {Auto On Off "" "" "" "" "" "" "" "" "" ""}}
 csplate Off
 addUserKnob {4 cscomp l Comp t "Auto - Leaves Comp turned on." M {Auto On Off "" "" "" ""}}
 cscomp Off
 addUserKnob {4 csinfnanspotter l "INF/NAN Spotter" t "Auto - Will only show if INF/NAN values are flagged by the analyzer." M {Auto On Off "" "" "" ""}}
 addUserKnob {4 csnegativespotter l "Negative Spotter" t "Auto - Will only show if Negative values are flagged by the analyzer." M {Auto On Off "" ""}}
 addUserKnob {4 cshighlightspotter l "Highlight Spotter" t "Auto - Will only show if High values are flagged by the analyzer." M {Auto On Off "" "" "" ""}}
 addUserKnob {4 csgraincheck l "Grain Check" t "Auto - Will leave the Grain Check view on." M {Auto On Off "" "" "" "" "" ""}}
 csgraincheck Off
 addUserKnob {4 cscolourcheck l "Colour Check" t "Auto - Will leave the Colour Check view on." M {Auto On Off "" "" ""}}
 cscolourcheck Off
 addUserKnob {4 csdifferencecheck l "Difference Check" t "Auto - Will leave the Difference Check view on if both the Comp and Plate inputs are plugged in." M {Auto On Off "" "" "" ""}}
 addUserKnob {4 csedgecheck l "Edge Check" t "Auto - Will leave the Edge Check view on." M {Auto On Off "" ""}}
 csedgecheck Off
 addUserKnob {4 csdimattecheck l "DI Matte Check" t "\nAuto - Will leave the DI Matte check view on." M {Auto On Off "" "" "" "" "" ""}}
 csdimattecheck Off
 addUserKnob {4 csmingraph l "Min Values Graph" t "Auto - Will only show if the analyzer has been run and Negative values are flagged by the analyzer." M {Auto On Off "" "" "" "" "" ""}}
 addUserKnob {4 csmaxgraph l "Max Values Graph" t "Auto -  Will only show if the analyzer has been run and High values are flagged by the analyzer." M {Auto On Off "" "" ""}}
 addUserKnob {20 renderviewstab l "Render Views"}
 addUserKnob {26 ""}
 addUserKnob {22 setallon l "Set All On" t "\nSet all views to ON." T "this = nuke.thisNode()\n\nfor knob in this.knobs().keys():\n    if 'render' in knob and 'render' != knob and 'renderviews' != knob and 'autorenderviews' != knob and 'renderviewstab' != knob and 'autorenderviewsdummy' != knob:\n        this\[knob].setValue(0)" +STARTLINE}
 addUserKnob {22 setalloff l "Set All Off" t "\nSet all views to OFF." -STARTLINE T "this = nuke.thisNode()\n\nfor knob in this.knobs().keys():\n    if 'render' in knob and 'render' != knob and 'renderviews' != knob and 'autorenderviews' != knob and 'renderviewstab' != knob and 'autorenderviewsdummy' != knob:\n        this\[knob].setValue(1)"}
 addUserKnob {22 setallauto l "Set All Auto" t "\nSet all views to AUTO that have that option." -STARTLINE T "this = nuke.thisNode()\n\nfor knob in this.knobs().keys():\n    if 'render' in knob and 'render' != knob and 'renderviews' != knob and 'autorenderviews' != knob and 'renderviewstab' != knob and 'autorenderviewsdummy' != knob:\n        this\[knob].setValue(2)"}
 addUserKnob {26 ""}
 addUserKnob {22 renderviews l "<font color=yellow><b>Render Selected Views" t "\nRenders selected views on the farm." T "####### Check if version has been analyzed before ########\njob = os.environ\['IEENV_WORKING_PATH'].split(\"/\")\[3]\npath = '/data/jobs/'+job+'/tools/nuke/scriptlets/pipeline/CompAnalyzer/'\nfilename = 'FND2-AnalyzerHistory.py'\nfilePath = path+filename\ngroupNode = nuke.thisNode()\n\nif os.path.exists(filePath):\n    with nuke.root():\n        compFile = QCCompAnalyzerTopNode(groupNode, 0)\['file'].evaluate().split('/')\[-1].split('.')\[0]\n        print(compFile)\n    \n    file = open(filePath, 'r')\n    history = file.read()\n    file.close()\n    \n    if compFile in history: \n        askHistory = nuke.ask('This version has already been analyzed and the results have been dailied!\\n\\nAre you sure you want to continue?')\n    else:\n        askHistory = True\nelse:\n    askHistory = True\n\nif askHistory:\n\n    QCCompAnalyzerRenderViews(groupNode, confirmation=True, ask=True, autoAnalysis=False)" +STARTLINE}
 addUserKnob {41 autodailydummy2 l "Auto Daily After Render           " t "\nWhen rendering, enables auto daily." T QC_Comp_Analyzer_Tool.autodaily}
 addUserKnob {41 clumpingdummy2 l "Frame Clumping" t "\nFrame clumping override when sending render to the farm." -STARTLINE T QC_Comp_Analyzer_Tool.clumping}
 addUserKnob {26 ""}
 addUserKnob {4 infnanspotterrender l "INF/NAN Spotter" t "\nAuto - Will only show if INF/NAN values are flagged by the analyzer." M {On Off Auto "" "" ""}}
 infnanspotterrender Off
 addUserKnob {4 negativespotterrender l "Negative Spotter" t "\nAuto - Will only show if Negatives are flagged by the analyzer." M {On Off Auto "" "" "" "" ""}}
 negativespotterrender Off
 addUserKnob {4 highlightspotterrender l "Highlight Spotter" t "\nAuto - Will only show if Highlights are flagged by the analyzer." M {On Off Auto "" "" ""}}
 highlightspotterrender Off
 addUserKnob {4 graincheckrender l "Grain Check" M {On "Off   " ""}}
 addUserKnob {4 colourcheckrender l "Colour Check" M {On "Off   " ""}}
 colourcheckrender "Off   "
 addUserKnob {4 differencecheckrender l "Difference Check" t "\nAuto - Will only show if both plate and comp inputs are plugged into the analyzer." M {On "Off   " Auto "" ""}}
 differencecheckrender "Off   "
 addUserKnob {4 edgecheckrender l "Edge Check" M {On "Off   " ""}}
 edgecheckrender "Off   "
 addUserKnob {4 dimattecheckrender l "DI Matte Check" t "\nAuto - Will only show if DI mattes are present in the comp input." M {On Off Auto "" ""}}
 dimattecheckrender Auto
 addUserKnob {4 minvaluesgraphrender l "Min Values Graph" t "\nAuto - Will only show if Negatives are flagged by the analyzer." M {On Off Auto "" ""}}
 minvaluesgraphrender Off
 addUserKnob {4 maxvaluesgraphrender l "Max Values Graph" t "\nAuto - Will only show if Highlights are flagged by the analyzer." M {On Off Auto ""}}
 maxvaluesgraphrender Off
 addUserKnob {4 contactsheetrender l "Contact Sheet" M {On "Off   " ""}}
 addUserKnob {20 checklisttab l "Check List"}
 addUserKnob {26 stnadard_check l "" +STARTLINE T "<b>Standard Checklist</b>\n"}
 addUserKnob {26 _12 l "                  " -STARTLINE T "                                                                                                                           "}
 addUserKnob {22 clear l "Clear Checklist" -STARTLINE T "this = nuke.thisNode()\n\nfor knobName in this.knobs().keys():\n    if \"item_\" in knobName:\n        this\[knobName].clearAnimated()\n        this\[knobName].setValue(False)"}
 addUserKnob {6 item_1 l "all client + supervisor notes hit?" +STARTLINE}
 addUserKnob {6 item_2 l "latest lighting / matches layout?" +STARTLINE}
 addUserKnob {6 item_3 l "matches editRef (check retime / repo)?" +STARTLINE}
 addUserKnob {6 item_4 l "correct frame range?" +STARTLINE}
 addUserKnob {6 item_6 l "cuts well with shot before/after?" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {6 item_5 l "matches similar shots in the sequence?" +STARTLINE}
 addUserKnob {6 item_7 l "write node channels set to \"all\"? (or RGBA if no DI mattes)" +STARTLINE}
 addUserKnob {6 item_8 l "unchanged pixels perfectly match original plate? (no filtering softness)" +STARTLINE}
 addUserKnob {6 item_9 l "format is correct?" +STARTLINE}
 addUserKnob {6 item_11 l "black / white levels match plate?" +STARTLINE}
 addUserKnob {6 item_10 l "excess bounding box cropped?" +STARTLINE}
 addUserKnob {6 item_12 l "colours in comp mesh together at higher saturation?" +STARTLINE}
 addUserKnob {6 item_13 l "no negative / super hot / inf / nan pixels?" +STARTLINE}
 addUserKnob {6 item_14 l "re-grained areas match plate? (similar intensity / no ghosting)" +STARTLINE}
 addUserKnob {6 item_15 l "defocus matches plate?" +STARTLINE}
 addUserKnob {6 item_16 l "chromatic aberration / other lens artefacts match plate?" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {6 item_17 l "no penetrations in CG (ground plane, or with itself)?" +STARTLINE}
 addUserKnob {6 item_18 l "no low samples / spec sizzling?" +STARTLINE}
 addUserKnob {6 item_19 l "no visible matte lines?" +STARTLINE}
 addUserKnob {6 item_20 l "key/roto edges match size, softness + colour of plate?" +STARTLINE}
 addUserKnob {6 item_21 l "no edge-of-frame encroachment? (lens distortion overscan crop or camera shake)" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 _1 l " " T " <b>User Checklist"}
 addUserKnob {26 _4 l "" -STARTLINE T "                                                                                                                           "}
 addUserKnob {22 add l Add -STARTLINE T "def add_checklist_item():\n    itemKnobs = \[]\n    \n    user_text = nuke.getInput('New item')\n    \n    if user_text != None:\n    \n        for knob in nuke.thisNode().knobs().keys():\n            if 'useritem_' in knob:\n                itemKnobs.append(knob)\n                \n        \n        number_of_knobs = len(itemKnobs)\n        knob_name = \"useritem_\"+str(number_of_knobs)\n        remove_knob_name = \"remove\"+str(number_of_knobs)\n        text_knob_name = \"dividertext\"+str(number_of_knobs)\n        \n        for knob in nuke.thisNode().knobs():\n            \n            if user_text == \"\":\n                nuke.message(\"Please enter a name for the new checklist item\")\n                return\n            \n            elif user_text == nuke.thisNode().knob(knob).label():\n                nuke.message(\"This item already exists\")\n                return\n                \n        nuke.thisNode().addKnob(nuke.Boolean_Knob(knob_name, user_text, False))\n        nuke.thisNode().knob(knob_name).setFlag(0x1000)\n        \n        removeKnobScript = \"this = nuke.thisNode(); knobs = this.knobs(); this.removeKnob(knobs\[ '\"+knob_name+\"' ]); this.removeKnob(knobs\[ '\"+remove_knob_name+\"' ]); this.removeKnob(knobs\[ '\"+text_knob_name+\"' ])\"\n        \n        nuke.thisNode().addKnob(nuke.Text_Knob(text_knob_name,\"                  \",\"                                                                                                                           \"))\n        nuke.thisNode().knob(text_knob_name).clearFlag(nuke.STARTLINE)\n        \n        nuke.thisNode().addKnob(nuke.PyScript_Knob(remove_knob_name,\"Remove\",removeKnobScript))\n        nuke.thisNode().knob(remove_knob_name).clearFlag(nuke.STARTLINE)\n    \nadd_checklist_item()"}
}
 Input {
  inputs 0
  name Comp
  xpos 780
  ypos -1635
 }
set N49ffe7a0 [stack 0]
 Dot {
  name Dot54
  label "  "
  note_font_size 16
  xpos 192
  ypos -1631
 }
set N788fb770 [stack 0]
 Dot {
  name Dot25
  label "  "
  note_font_size 16
  xpos -1168
  ypos -1631
 }
 Dot {
  name Dot55
  label "  "
  note_font_size 16
  xpos -1168
  ypos -1277
 }
set N546f0710 [stack 0]
 Dot {
  name Dot51
  label "  "
  note_font_size 16
  xpos -1526
  ypos -1277
 }
set N7faf1920 [stack 0]
 Dot {
  name Dot65
  label "  "
  note_font_size 16
  xpos -3471
  ypos -1277
 }
 Crop {
  box {0 0 {width} {height}}
  name Crop11
  xpos -3505
  ypos -1208
 }
 NoOp {
  name DiMatteDummy
  note_font_size 30
  xpos -3505
  ypos -1167
 }
 Reformat {
  inputs 0
  type "to box"
  box_width {{MainDot.width}}
  box_height {{MainDot.height}}
  box_fixed true
  box_pixel_aspect {{MainDot.format.pixel_aspect}}
  name Reformat1
  xpos -3828
  ypos -927
 }
 Remove {
  name RemoveAll
  xpos -3828
  ypos -901
 }
push $N546f0710
 Remove {
  name Remove2
  xpos -1202
  ypos -1226
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "DI Matte Check Error\n\n(Requires a Rebuild)"
  old_message {{68 73 32 77 97 116 116 101 32 67 104 101 99 107 32 69 114 114 111 114 10 10 40 82 101 113 117 105 114 101 115 32 97 32 82 101 98 117 105 108 100 41}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {3 0 0 1}
  color_panelDropped true
  name Text37
  label "\[value message]"
  xpos -1202
  ypos -1188
 }
add_layer {DiMatteCheck DiMatteCheck.red DiMatteCheck.green DiMatteCheck.blue}
 Shuffle {
  out DiMatteCheck
  name Shuffle28
  label "\[value out]"
  xpos -1202
  ypos -1126
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name RebuildDi
  xpos -1202
  ypos -1024
 }
set N5a3fc420 [stack 0]
push $N7faf1920
 Remove {
  name Remove3
  xpos -1560
  ypos -1227
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  output DiMatteCheck
  message "No DI Mattes Detected"
  old_message {{78 111 32 68 73 32 77 97 116 116 101 115 32 68 101 116 101 99 116 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 21
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  name NoDiText
  label "\[value message]"
  xpos -1560
  ypos -1189
  disable {{"\[python -execlocal channels\\ =\\ nuke.toNode('Comp').channels()\\n\\nif\\ 'matte1.'\\ in\\ channels\\ or\\ 'matte2.'\\ in\\ channels\\ or\\ 'matte3.'\\ in\\ channels:\\n\\ \\ ret\\ =\\ True\\nelse:\\n\\ \\ ret\\ =\\ False]"}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  output DiMatteCheck
  message "DI Matte Check Error\n\n(Requires a Rebuild)"
  old_message {{68 73 32 77 97 116 116 101 32 67 104 101 99 107 32 69 114 114 111 114 10 10 40 82 101 113 117 105 114 101 115 32 97 32 82 101 98 117 105 108 100 41}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 20
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {3 0 0 1}
  color_panelDropped true
  name Text26
  label "\[value message]"
  xpos -1560
  ypos -1139
  disable {{!NoDiText.disable}}
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name NoDi
  xpos -1560
  ypos -1028
 }
 Dot {
  name DiContactSheetDot
  label "  "
  note_font_size 16
  xpos -1526
  ypos -885
 }
set Ne434df50 [stack 0]
 Dot {
  name Dot70
  label "  "
  note_font_size 16
  xpos -1526
  ypos -761
 }
set Ne574e2e0 [stack 0]
 Crop {
  box {{parent.ROI} {parent.ROI} {parent.ROI} {parent.ROI}}
  intersect true
  name Crop5
  xpos -1450
  ypos -690
 }
push $Ne574e2e0
 Dissolve {
  inputs 2
  which {{viewanalysisregion==0?0:.75}}
  name Dissolve3
  xpos -1560
  ypos -696
 }
 Remove {
  channels rgba
  name Remove4
  label "RGBA only"
  xpos -1560
  ypos -658
 }
 LayerContactSheet {
  width {{columns*input.width*csscale}}
  height {{rows*input.height*csscale/input.format.pixel_aspect}}
  rows {{"input.format.pixel_aspect>=1.5?(ceil(sqrt(\[python -execlocal \{channels = nuke.thisNode().channels();layer_set = set(\[channel.split('.')\[0] for channel in channels]);ret=len(layer_set)\}]))):(ceil(\[python -execlocal \{channels = nuke.thisNode().channels();layer_set = set(\[channel.split('.')\[0] for channel in channels]);ret=len(layer_set)\}]/columns))"}}
  columns {{"input.format.pixel_aspect>=1.5?(ceil(\[python -execlocal \{channels = nuke.thisNode().channels();layer_set = set(\[channel.split('.')\[0] for channel in channels]);ret=len(layer_set)\}]/rows)):(ceil(sqrt(\[python -execlocal \{channels = nuke.thisNode().channels();layer_set = set(\[channel.split('.')\[0] for channel in channels]);ret=len(layer_set)\}])))"}}
  autodims false
  name DiContactSheet
  xpos -1560
  ypos -604
 }
 Switch {
  inputs 2
  which {{error}}
  name Switch5
  xpos -1202
  ypos -604
 }
set N139499f0 [stack 0]
 Dot {
  name Dot52
  label "  "
  note_font_size 16
  xpos -1168
  ypos 2884
 }
 Input {
  inputs 0
  name Plate
  xpos 440
  ypos -1832
  number 1
 }
set N866f0f90 [stack 0]
 Dot {
  name Dot53
  label "  "
  note_font_size 16
  xpos 474
  ypos -1349
 }
set N409f62a0 [stack 0]
push $N49ffe7a0
 Switch {
  inputs 2
  which {{parent.compplate}}
  name Switch2
  xpos 780
  ypos -1353
 }
 Dot {
  name MainDot
  label "  "
  note_font_size 16
  xpos 814
  ypos -1277
 }
set N5bef91f0 [stack 0]
 Dot {
  name Dot22
  label "  "
  note_font_size 16
  xpos 1381
  ypos -1277
 }
set N818f15a0 [stack 0]
 Dot {
  name Dot35
  label "  "
  note_font_size 16
  xpos 1580
  ypos -1277
 }
set N39bf0850 [stack 0]
 Dot {
  name Dot38
  label "  "
  note_font_size 16
  xpos 2022
  ypos -1277
 }
set N8a7f1a30 [stack 0]
 Shuffle {
  red black
  green black
  blue black
  alpha black
  name Shuffle27
  xpos 1988
  ypos -1192
 }
set N818f7080 [stack 0]
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Analysis Not Run"
  old_message {{65 110 97 108 121 115 105 115 32 78 111 116 32 82 117 110}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text38
  label "\[value message]"
  xpos 1988
  ypos -1166
  disable {{AnalyzerSwitch.which==2?0:1}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Analysis Incomplete"
  old_message {{65 110 97 108 121 115 105 115 32 73 110 99 111 109 112 108 101 116 101}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 19
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text39
  label "\[value message]"
  xpos 1988
  ypos -1128
  disable {{AnalyzerSwitch.which==1?0:1}}
 }
 Dot {
  name Dot72
  label "  "
  note_font_size 16
  xpos 2022
  ypos -1056
 }
set N59af4a30 [stack 0]
 Dot {
  name Dot78
  label "  "
  note_font_size 16
  xpos 2132
  ypos -1056
 }
 Dot {
  name Dot79
  label "  "
  note_font_size 16
  xpos 2132
  ypos -797
 }
push $N818f7080
 Dot {
  name Dot80
  label "  "
  note_font_size 16
  xpos 2262
  ypos -1188
 }
 Expression {
  channel0 {rgba.red rgba.green -rgba.blue rgba.alpha}
  expr0 y==MinimumValue.curveOutput?1:0
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name Expression4
  xpos 2228
  ypos -1151
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop18
  xpos 2228
  ypos -1125
 }
 Dilate {
  channels rgba
  size {0 {ceil(input.width/4000)*2}}
  name Dilate7
  xpos 2228
  ypos -1099
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Blacks Tolerance \[value parent.minvalue]"
  old_message {{66 108 97 99 107 115 32 84 111 108 101 114 97 110 99 101 32 48}
    }
  old_expression_markers {{17 17}
    }
  box {0 0 {width} {MinimumValue.curveOutput}}
  xjustify right
  transforms {{0 2}
    }
  font_size_values {{0 100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 14 100 15 100 16 100 17 100 0 100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 14 100 15 100 16 100 17 100}
    }
  cursor_position 17
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {2 2 0 2}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x 0
  background_border_y 0
  name Text46
  xpos 2228
  ypos -1073
  disable {{!parent.Text48.disable}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Blacks tolerance above graph \[value parent.minvalue]"
  old_message {{66 108 97 99 107 115 32 116 111 108 101 114 97 110 99 101 32 97 98 111 118 101 32 103 114 97 112 104 32 48 46 48 48 48 50 56 48 52 53 48 50 55 50 56}
    }
  old_expression_markers {{29 43}
    }
  box {0 0 {width} {height}}
  xjustify right
  transforms {{0 2}
    }
  cursor_position 52
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {2 2 0 2}
  name Text47
  xpos 2228
  ypos -1047
  disable {{!(MinimumValue.curveOutput>height)}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Blacks tolerance below graph \[value parent.minvalue]"
  old_message {{66 108 97 99 107 115 32 116 111 108 101 114 97 110 99 101 32 98 101 108 111 119 32 103 114 97 112 104 32 45 48 46 48 48 51 48 48 48 48 48 48 48 50 54}
    }
  old_expression_markers {{29 43}
    }
  box {0 0 {width} {height}}
  xjustify right
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 52
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {2 2 0 2}
  name Text48
  xpos 2228
  ypos -1021
  disable {{!(MinimumValue.curveOutput<0)}}
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop19
  xpos 2228
  ypos -995
 }
 Dot {
  name Dot81
  label "  "
  note_font_size 16
  xpos 2262
  ypos -927
 }
push $N59af4a30
 Expression {
  channel0 rgba
  expr0 y==MinimumRed.newMin?2:(y==MinimumRed.newMax?2:0)
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name Expression2
  xpos 1988
  ypos -1008
 }
 Dilate {
  channels rgba
  size {0 {ceil(input.width/4000)*2}}
  name Dilate4
  xpos 1988
  ypos -957
 }
set N839fc4d0 [stack 0]
push $N8a7f1a30
 Dot {
  name Dot82
  label "  "
  note_font_size 16
  xpos 2527
  ypos -1277
 }
 Group {
  name GraphRGBMin
  xpos 2493
  ypos -1211
  addUserKnob {20 FrameHoldBlend l "Frame Hold Blend"}
  addUserKnob {7 horizontal}
  horizontal {{analyzejabuka==0?(ceil((frame-1-input.first_frame)/(input.last_frame-input.first_frame)*width*.9+width*.05)):(ceil((frame-1-jabukafirst)/(jabukalast-jabukafirst)*width*.9+width*.05))}}
  addUserKnob {7 red}
  red {{parent.MinimumRed.curveOutput}}
  addUserKnob {7 green}
  green {{parent.MinimumGreen.curveOutput}}
  addUserKnob {7 blue}
  blue {{parent.MinimumBlue.curveOutput}}
  addUserKnob {3 currentframe l frame}
  currentframe {{frame}}
  addUserKnob {3 first -STARTLINE}
  first {{jabukafirst}}
  addUserKnob {3 last -STARTLINE}
  last {{jabukalast}}
  addUserKnob {3 min}
  min {{parent.MinimumRed.newMin}}
  addUserKnob {3 max}
  max {{parent.MinimumRed.newMax}}
  addUserKnob {26 ""}
  addUserKnob {26 _1 l "" +STARTLINE T "<br><br><b>v6 </b><font color=grey><i>Created by <b>Daniel Bigaj</b> 15 Nov 2022"}
 }
  Input {
   inputs 0
   name Input
   xpos 0
   ypos -80
  }
  Shuffle {
   red black
   green black
   blue black
   alpha black
   name Shuffle1
   label "\[value in]"
   xpos 0
   ypos -54
  }
  Dot {
   name Dot1
   label "  "
   note_font_size 16
   xpos 34
   ypos 26
  }
set N862fc000 [stack 0]
  Dot {
   name Crop
   label "  "
   note_font_size 16
   xpos 34
   ypos 173
  }
push $N862fc000
  Dot {
   name Dot4
   label "  "
   note_font_size 16
   xpos 158
   ypos 26
  }
set N592f5220 [stack 0]
  Dot {
   name Dot3
   label "  "
   note_font_size 16
   xpos 248
   ypos 26
  }
set N3caf0c50 [stack 0]
  Dot {
   name Dot2
   label "  "
   note_font_size 16
   xpos 338
   ypos 26
  }
set N7c3f7f40 [stack 0]
  Dot {
   name Dot5
   label "  "
   note_font_size 16
   xpos 428
   ypos 26
  }
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name WhiteShuffle
   tile_color 0xffffffff
   xpos 394
   ypos 56
  }
  Multiply {
   channels rgb
   value 0.1
   name White
   xpos 394
   ypos 82
  }
push $N7c3f7f40
  Shuffle {
   red black
   green black
   blue white
   alpha white
   name BlueShuffle
   tile_color 0xffff
   xpos 304
   ypos 55
  }
  Multiply {
   channels rgb
   name Blue
   xpos 304
   ypos 81
  }
push $N3caf0c50
  Shuffle {
   red black
   green white
   blue black
   alpha white
   name GreenShuffle
   tile_color 0xff00ff
   xpos 214
   ypos 55
  }
  Multiply {
   channels rgb
   name Green
   xpos 214
   ypos 81
  }
push $N592f5220
  Shuffle {
   red white
   green black
   blue black
   alpha white
   name RedShuffle
   tile_color 0xff0000ff
   xpos 124
   ypos 55
  }
  Multiply {
   channels rgb
   name Red
   xpos 124
   ypos 81
  }
  Merge2 {
   inputs 0
   operation max
   name Merge
   xpos 0
   ypos 368
  }
  Output {
   name Output1
   xpos 0
   ypos 527
  }
 end_group
 Crop {
  box {0 0 {width} {height}}
  name Crop20
  xpos 2493
  ypos -1185
 }
 Dilate {
  channels rgba
  size {{ceil(input.width/(input.last_frame-input.first_frame)/4)} {size.w}}
  name Dilate8
  xpos 2493
  ypos -1125
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "\[value CurveToolQCBlacks.maxminlumall]"
  old_message {{48}
    }
  old_expression_markers {{0 0}
    }
  box {0 0 {width} {height}}
  transforms {{0 2}
    }
  cursor_position 24
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color 2
  name Text49
  xpos 2493
  ypos -1035
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "\[if \{\[value CurveToolQCBlacks.minlumall]==-12345\} \{return nan\} \{return \[value CurveToolQCBlacks.minlumall]\}]"
  old_message {{48}
    }
  old_expression_markers {{0 0}
    }
  box {0 0 {width} {height}}
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 106
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color 2
  name Text50
  xpos 2493
  ypos -1009
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Minimum Pixel Value Graph"
  old_message {{77 105 110 105 109 117 109 32 80 105 120 101 108 32 86 97 108 117 101 32 71 114 97 112 104}
    }
  box {0 0 {width} {height}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 25
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x 0
  background_border_y 0
  name Text51
  xpos 2493
  ypos -983
  disable {{!labels}}
 }
 Merge2 {
  inputs 2
  operation under
  name Merge18
  xpos 2493
  ypos -957
 }
 Merge2 {
  inputs 2
  name Merge19
  xpos 2493
  ypos -931
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Minimum value is the same on every frame\n(blacks might be clamped)"
  old_message {{77 105 110 105 109 117 109 32 118 97 108 117 101 32 105 115 32 116 104 101 32 115 97 109 101 32 111 110 32 101 118 101 114 121 32 102 114 97 109 101 10 40 98 108 97 99 107 115 32 109 105 103 104 116 32 98 101 32 99 108 97 109 112 101 100 41}
    }
  box {0 0 {width} {height}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 40
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2592 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2880}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2592 1080 0 0 1 1 0 0 0 0}
    }
  name Text52
  xpos 2493
  ypos -905
  disable {{!(CurveToolQCBlacks.minlumall==CurveToolQCBlacks.maxminlumall)}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "ERROR\n\nGraph Scale is Infinite!\n\n(Requires NAN values for the comp input to be fixed)"
  old_message {{69 82 82 79 82 10 10 71 114 97 112 104 32 83 99 97 108 101 32 105 115 32 73 110 102 105 110 105 116 101 33 10 10 40 82 101 113 117 105 114 101 115 32 78 65 78 32 118 97 108 117 101 115 32 102 111 114 32 116 104 101 32 99 111 109 112 32 105 110 112 117 116 32 116 111 32 98 101 32 102 105 120 101 100 41}
    }
  box {0 0 {width} {height}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 44
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2592 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2880}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2592 1080 0 0 1 1 0 0 0 0}
    }
  name Text15
  xpos 2493
  ypos -879
  disable {{"!(CurveToolQCBlacks.minlumall == -12345)"}}
 }
 Transform {
  scale {{1-height/width*(1-scale.h)} 0.9}
  center {{width/2} {height/2}}
  shutteroffset centred
  name Transform2
  xpos 2493
  ypos -853
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop21
  xpos 2493
  ypos -827
 }
 Switch {
  inputs 2
  which {{AnalyzerSwitch.which==0?0:1}}
  name AnalyzerSwitch3
  xpos 2493
  ypos -801
 }
 Dot {
  name Dot83
  label "  "
  note_font_size 16
  xpos 2527
  ypos -600
 }
set N562fbde0 [stack 0]
add_layer {MinPixValueGraph MinPixValueGraph.red MinPixValueGraph.green MinPixValueGraph.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 MinPixValueGraph
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 MinPixValueGraph.red 0 0 rgba.green 0 1 MinPixValueGraph.green 0 1 rgba.blue 0 2 MinPixValueGraph.blue 0 2"
  name Shuffle24
  label "\[value out1]"
  xpos 340
  ypos 2608
  hide_input true
 }
 Dot {
  name Dot57
  label "  "
  note_font_size 16
  xpos 374
  ypos 2668
 }
push $N59af4a30
 Dot {
  name Dot73
  label "  "
  note_font_size 16
  xpos 1935
  ypos -1056
 }
 Dot {
  name Dot69
  label "  "
  note_font_size 16
  xpos 1935
  ypos -797
 }
push $N818f7080
 Dot {
  name Dot68
  label "  "
  note_font_size 16
  xpos 1819
  ypos -1188
 }
 Expression {
  channel0 {rgba.red rgba.green -rgba.blue rgba.alpha}
  expr0 y==MaximumValue.curveOutput?1:0
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name Expression9
  xpos 1785
  ypos -1155
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop17
  xpos 1785
  ypos -1129
 }
 Dilate {
  channels rgba
  size {0 {ceil(input.width/4000)*2}}
  name Dilate5
  xpos 1785
  ypos -1103
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Whites Tolerance \[value parent.maxvalue]"
  old_message {{87 104 105 116 101 115 32 84 111 108 101 114 97 110 99 101 32 53 48}
    }
  old_expression_markers {{17 18}
    }
  box {0 {MaximumValue.curveOutput} {width} {height}}
  xjustify right
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 17
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {2 2 0 2}
  enable_background true
  background_opacity 0.5
  background_border_x 0
  background_border_y 0
  name Text40
  xpos 1785
  ypos -1077
  disable {{!parent.Text43.disable}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Whites tolerance above graph \[value parent.maxvalue]"
  old_message {{87 104 105 116 101 115 32 116 111 108 101 114 97 110 99 101 32 97 98 111 118 101 32 103 114 97 112 104 32 53 48}
    }
  old_expression_markers {{29 30}
    }
  box {0 0 {width} {height}}
  xjustify right
  transforms {{0 2}
    }
  cursor_position 52
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {2 2 0 2}
  name Text42
  xpos 1785
  ypos -1051
  disable {{!(MaximumValue.curveOutput>height)}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Whites tolerance below graph \[value parent.maxvalue]"
  old_message {{87 104 105 116 101 115 32 116 111 108 101 114 97 110 99 101 32 98 101 108 111 119 32 103 114 97 112 104 32 50 49 46 51 50 53 55 56 56 53}
    }
  old_expression_markers {{29 38}
    }
  box {0 0 {width} {height}}
  xjustify right
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 52
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {2 2 0 2}
  name Text43
  xpos 1785
  ypos -1025
  disable {{!(MaximumValue.curveOutput<0)}}
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop15
  xpos 1785
  ypos -999
 }
 Dot {
  name Dot76
  label "  "
  note_font_size 16
  xpos 1819
  ypos -927
 }
push $N839fc4d0
push $N39bf0850
 Group {
  name GraphRGBMax
  xpos 1546
  ypos -1205
  addUserKnob {20 FrameHoldBlend l "Frame Hold Blend"}
  addUserKnob {7 horizontal}
  horizontal {{analyzejabuka==0?(ceil((frame-1-input.first_frame)/(input.last_frame-input.first_frame)*width*.9+width*.05)):(ceil((frame-1-jabukafirst)/(jabukalast-jabukafirst)*width*.9+width*.05))}}
  addUserKnob {7 red}
  red {{parent.MaximumRed.curveOutput}}
  addUserKnob {7 green}
  green {{parent.MaximumGreen.curveOutput}}
  addUserKnob {7 blue}
  blue {{parent.MaximumBlue.curveOutput}}
  addUserKnob {3 currentframe l frame}
  currentframe {{frame}}
  addUserKnob {3 first -STARTLINE}
  first {{jabukafirst}}
  addUserKnob {3 last -STARTLINE}
  last {{jabukalast}}
  addUserKnob {3 min}
  min {{parent.MaximumRed.newMin}}
  addUserKnob {3 max}
  max {{parent.MaximumValue.newMax}}
  addUserKnob {26 ""}
  addUserKnob {26 _1 l "" +STARTLINE T "<br><br><b>v6 </b><font color=grey><i>Created by <b>Daniel Bigaj</b> 15 Nov 2022"}
 }
  Input {
   inputs 0
   name Input
   xpos 0
   ypos -80
  }
  Shuffle {
   red black
   green black
   blue black
   alpha black
   name Shuffle1
   label "\[value in]"
   xpos 0
   ypos -54
  }
  Dot {
   name Dot1
   label "  "
   note_font_size 16
   xpos 34
   ypos 26
  }
set N7c9f36f0 [stack 0]
  Dot {
   name Crop
   label "  "
   note_font_size 16
   xpos 34
   ypos 173
  }
push $N7c9f36f0
  Dot {
   name Dot4
   label "  "
   note_font_size 16
   xpos 158
   ypos 26
  }
set N89af2d10 [stack 0]
  Dot {
   name Dot3
   label "  "
   note_font_size 16
   xpos 248
   ypos 26
  }
set N87ff28d0 [stack 0]
  Dot {
   name Dot2
   label "  "
   note_font_size 16
   xpos 338
   ypos 26
  }
set Nd0dfce00 [stack 0]
  Dot {
   name Dot5
   label "  "
   note_font_size 16
   xpos 428
   ypos 26
  }
  Shuffle {
   red white
   green white
   blue white
   alpha white
   name WhiteShuffle
   tile_color 0xffffffff
   xpos 394
   ypos 55
  }
  Multiply {
   channels rgb
   value 0.1
   name White
   xpos 394
   ypos 81
  }
push $Nd0dfce00
  Shuffle {
   red black
   green black
   blue white
   alpha white
   name BlueShuffle
   tile_color 0xffff
   xpos 304
   ypos 55
  }
  Multiply {
   channels rgb
   name Blue
   xpos 304
   ypos 81
  }
push $N87ff28d0
  Shuffle {
   red black
   green white
   blue black
   alpha white
   name GreenShuffle
   tile_color 0xff00ff
   xpos 214
   ypos 55
  }
  Multiply {
   channels rgb
   name Green
   xpos 214
   ypos 81
  }
push $N89af2d10
  Shuffle {
   red white
   green black
   blue black
   alpha white
   name RedShuffle
   tile_color 0xff0000ff
   xpos 124
   ypos 55
  }
  Multiply {
   channels rgb
   name Red
   xpos 124
   ypos 81
  }
  Merge2 {
   inputs 0
   operation max
   name Merge
   xpos 0
   ypos 368
  }
  Output {
   name Output1
   xpos 0
   ypos 527
  }
 end_group
 Crop {
  box {0 0 {width} {height}}
  name Crop7
  xpos 1546
  ypos -1179
 }
 Dilate {
  channels rgba
  size {{ceil(input.width/(input.last_frame-input.first_frame)/4)} {size.w}}
  name Dilate3
  xpos 1546
  ypos -1125
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "\[value CurveToolQC.minmaxlumall]"
  old_message {{48}
    }
  old_expression_markers {{0 0}
    }
  box {0 0 {width} {height}}
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 25
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color 2
  name Text14
  xpos 1546
  ypos -1035
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "\[value CurveToolQC.maxlumall]"
  old_message {{48}
    }
  old_expression_markers {{0 0}
    }
  box {0 0 {width} {height}}
  transforms {{0 2}
    }
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color 2
  name Text16
  xpos 1546
  ypos -1009
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Maximum Pixel Value Graph"
  old_message {{77 97 120 105 109 117 109 32 80 105 120 101 108 32 86 97 108 117 101 32 71 114 97 112 104}
    }
  box {0 0 {width} {height}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 3
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3112}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x 0
  background_border_y 0
  name Text18
  xpos 1546
  ypos -983
  disable {{!labels}}
 }
 Merge2 {
  inputs 2
  operation under
  name Merge14
  xpos 1546
  ypos -957
 }
 Merge2 {
  inputs 2
  name Merge16
  xpos 1546
  ypos -931
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Maximum value is the same on every frame\n(whites might be clamped)"
  old_message {{77 97 120 105 109 117 109 32 118 97 108 117 101 32 105 115 32 116 104 101 32 115 97 109 101 32 111 110 32 101 118 101 114 121 32 102 114 97 109 101 10 40 119 104 105 116 101 115 32 109 105 103 104 116 32 98 101 32 99 108 97 109 112 101 100 41}
    }
  box {0 0 {width} {height}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 40
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2592 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2880}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2592 1080 0 0 1 1 0 0 0 0}
    }
  name Text33
  xpos 1546
  ypos -905
  disable {{!(CurveToolQC.maxlumall==CurveToolQC.minmaxlumall)}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "ERROR\n\nGraph Scale is Infinite!\n\n(Requires INF values for the comp input to be fixed)"
  old_message {{69 82 82 79 82 10 10 71 114 97 112 104 32 83 99 97 108 101 32 105 115 32 73 110 102 105 110 105 116 101 33 10 10 40 82 101 113 117 105 114 101 115 32 73 78 70 32 118 97 108 117 101 115 32 102 111 114 32 116 104 101 32 99 111 109 112 32 105 110 112 117 116 32 116 111 32 98 101 32 102 105 120 101 100 41}
    }
  box {0 0 {width} {height}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 31
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {2592 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2880}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2592 1080 0 0 1 1 0 0 0 0}
    }
  name Text13
  xpos 1546
  ypos -879
  disable {{"!(CurveToolQC.maxlumall == inf)"}}
 }
 Transform {
  scale {{1-height/width*(1-scale.h)} 0.9}
  center {{width/2} {height/2}}
  shutteroffset centred
  name Transform1
  xpos 1546
  ypos -853
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop9
  xpos 1546
  ypos -827
 }
 Switch {
  inputs 2
  which {{AnalyzerSwitch.which==0?0:1}}
  name AnalyzerSwitch1
  xpos 1546
  ypos -801
 }
 Dot {
  name Dot60
  label "  "
  note_font_size 16
  xpos 1580
  ypos -728
 }
set N2e8fb5a0 [stack 0]
add_layer {MaxPixValueGraph MaxPixValueGraph.red MaxPixValueGraph.green MaxPixValueGraph.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 MaxPixValueGraph
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 MaxPixValueGraph.red 0 0 rgba.green 0 1 MaxPixValueGraph.green 0 1 rgba.blue 0 2 MaxPixValueGraph.blue 0 2"
  name Shuffle25
  label "\[value out1]"
  xpos 433
  ypos 2608
  hide_input true
 }
push $N866f0f90
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message Plate
  old_message {{80 108 97 116 101}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 4 200 0 200 1 200 2 200 3 200 4 200}
    }
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text29
  xpos -506
  ypos 1753
  hide_input true
  disable {{!labels}}
 }
add_layer {Plate Plate.red Plate.green Plate.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 Plate
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 Plate.red 0 0 rgba.green 0 1 Plate.green 0 1 rgba.blue 0 2 Plate.blue 0 2"
  name Shuffle22
  label "\[value out1]"
  xpos -506
  ypos 1779
 }
 Dot {
  name Dot47
  label "  "
  note_font_size 16
  xpos -472
  ypos 2419
 }
push $N49ffe7a0
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message Comp
  old_message {{67 111 109 112}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 0 200}
    }
  cursor_position 4
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text31
  xpos -413
  ypos 1753
  hide_input true
  disable {{!labels}}
 }
add_layer {Comp Comp.red Comp.green Comp.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 Comp
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 Comp.red 0 0 rgba.green 0 1 Comp.green 0 1 rgba.blue 0 2 Comp.blue 0 2"
  name Shuffle21
  label "\[value out1]"
  xpos -413
  ypos 1779
 }
 Dot {
  name Dot48
  label "  "
  note_font_size 16
  xpos -379
  ypos 2369
 }
push $N818f15a0
 Dot {
  name Dot19
  label "  "
  note_font_size 16
  xpos 1381
  ypos -1185
 }
set N7aef9f00 [stack 0]
 Dot {
  name Dot18
  label "  "
  note_font_size 16
  xpos 1381
  ypos -1027
 }
set N542f0d40 [stack 0]
 Dot {
  name Dot9
  label "  "
  note_font_size 16
  xpos 1381
  ypos -897
 }
 Dot {
  name Dot7
  label "  "
  note_font_size 16
  xpos 1309
  ypos -897
 }
set N58ff3370 [stack 0]
 Expression {
  expr0 isinf(r)?1:(isnan(r)?1:0)
  expr1 isinf(g)?1:(isnan(g)?1:0)
  expr2 isinf(b)?1:(isnan(b)?1:0)
  channel3 alpha
  expr3 isinf(a)?1:(isnan(a)?1:0)
  name InfNanSpotter1
  xpos 1275
  ypos -860
 }
 FilterErode {
  channels rgba
  size -50
  name FilterErode1
  xpos 1275
  ypos -816
 }
push $N58ff3370
 Dot {
  name Dot3
  label "  "
  note_font_size 16
  xpos 1189
  ypos -897
 }
 Merge2 {
  inputs 2
  name Merge3
  xpos 1155
  ypos -816
 }
set N5a4f8560 [stack 0]
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message "INF/NAN Spotter"
  old_message {{73 78 70 47 78 65 78 32 83 112 111 116 116 101 114}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 11 200 12 200 13 200 14 200 0 200}
    }
  cursor_position 15
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text28
  xpos -323
  ypos 1752
  hide_input true
  disable {{!labels}}
 }
add_layer {INFNaNSpotter INFNaNSpotter.red INFNaNSpotter.green INFNaNSpotter.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 INFNaNSpotter
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 INFNaNSpotter.red 0 0 rgba.green 0 1 INFNaNSpotter.green 0 1 rgba.blue 0 2 INFNaNSpotter.blue 0 2"
  name Shuffle
  label "\[value out1]"
  xpos -323
  ypos 1778
 }
 Dot {
  name Dot45
  label "  "
  note_font_size 16
  xpos -289
  ypos 2319
 }
push $N542f0d40
 Expression {
  expr0 isinf(r)?0:(isnan(r)?0:r)
  expr1 isinf(g)?0:(isnan(g)?0:g)
  expr2 isinf(b)?0:(isnan(b)?0:b)
  channel3 alpha
  expr3 isinf(a)?0:(isnan(a)?0:a)
  name InfNanFix
  xpos 1271
  ypos -1031
 }
set N8aef51e0 [stack 0]
 Expression {
  expr0 r<minvalue?1:0
  expr1 g<minvalue?1:0
  expr2 b<minvalue?1:0
  channel3 alpha
  name NegativeValueSpotter
  xpos 1271
  ypos -1005
 }
 Expression {
  expr3 max(r,g,b)
  name Expression1
  xpos 1271
  ypos -979
 }
 FilterErode {
  channels rgba
  size -50
  name FilterErode2
  xpos 1271
  ypos -953
 }
push $N8aef51e0
 Dot {
  name Dot11
  label "  "
  note_font_size 16
  xpos 1185
  ypos -1027
 }
 Merge2 {
  inputs 2
  name Merge1
  xpos 1151
  ypos -953
 }
set N810f17a0 [stack 0]
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message "Negative Spotter"
  old_message {{78 101 103 97 116 105 118 101 32 83 112 111 116 116 101 114}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 11 200 12 200 13 200 14 200 15 200 0 200}
    }
  cursor_position 16
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text19
  xpos -232
  ypos 1752
  hide_input true
  disable {{!labels}}
 }
add_layer {NegativeSpotter NegativeSpotter.red NegativeSpotter.green NegativeSpotter.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 NegativeSpotter
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 NegativeSpotter.red 0 0 rgba.green 0 1 NegativeSpotter.green 0 1 rgba.blue 0 2 NegativeSpotter.blue 0 2"
  name Shuffle14
  label "\[value out1]"
  xpos -232
  ypos 1778
 }
 Dot {
  name Dot44
  label "  "
  note_font_size 16
  xpos -198
  ypos 2269
 }
push $N5bef91f0
 Dot {
  name Dot23
  label "  "
  note_font_size 16
  xpos 40
  ypos -1277
 }
 Dot {
  name Dot31
  label "  "
  note_font_size 16
  xpos 40
  ypos -1079
 }
set N88bfb5d0 [stack 0]
 Dot {
  name Dot33
  label "  "
  note_font_size 16
  xpos 40
  ypos -997
 }
set N3f7fc350 [stack 0]
 Expression {
  expr0 isinf(r)?0:(isnan(r)?0:r)
  expr1 isinf(g)?0:(isnan(g)?0:g)
  expr2 isinf(b)?0:(isnan(b)?0:b)
  channel3 alpha
  expr3 isinf(a)?0:(isnan(a)?0:a)
  name InfNanFix1
  xpos 6
  ypos -884
 }
 Dot {
  name Dot15
  xpos 40
  ypos -795
 }
set N57efaf70 [stack 0]
 Clamp {
  minimum_enable false
  maximum {{parent.maxvalue}}
  name Clamp1
  xpos 6
  ypos -751
 }
push $N57efaf70
 Dot {
  name Dot14
  xpos 174
  ypos -795
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge4
  xpos 140
  ypos -745
 }
set N800f9710 [stack 0]
 FilterErode {
  channels rgb
  size -50
  name FilterErode3
  xpos 255
  ypos -809
 }
 Clamp {
  maximum 0.1
  name Clamp3
  xpos 255
  ypos -783
 }
push $N800f9710
 Merge2 {
  inputs 2
  operation screen
  name Merge6
  xpos 255
  ypos -745
 }
set N5e2f5840 [stack 0]
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message "Highlight Spotter"
  old_message {{72 105 103 104 108 105 103 104 116 32 83 112 111 116 116 101 114}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 11 200 12 200 13 200 14 200 15 200 16 200 0 200}
    }
  cursor_position 17
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text21
  xpos -146
  ypos 1752
  hide_input true
  disable {{!labels}}
 }
add_layer {HighlightSpotter HighlightSpotter.red HighlightSpotter.green HighlightSpotter.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 HighlightSpotter
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 HighlightSpotter.red 0 0 rgba.green 0 1 HighlightSpotter.green 0 1 rgba.blue 0 2 HighlightSpotter.blue 0 2"
  name Shuffle15
  label "\[value out1]"
  xpos -146
  ypos 1778
 }
 Dot {
  name Dot43
  label "  "
  note_font_size 16
  xpos -112
  ypos 2219
 }
push $N7aef9f00
 Dot {
  name Dot133
  xpos 1102
  ypos -1185
 }
set N884f8d30 [stack 0]
 Blur {
  size 2
  name Blur78
  xpos 1178
  ypos -1130
 }
push $N884f8d30
 Merge2 {
  inputs 2
  operation from
  name Merge124
  xpos 1068
  ypos -1124
 }
 Expression {
  expr0 abs(r)
  expr1 abs(g)
  expr2 abs(b)
  name Expression6
  xpos 1068
  ypos -1079
 }
 Grade {
  multiply 35
  name Grade28
  xpos 1068
  ypos -1053
 }
set N804f8870 [stack 0]
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message "Grain Check"
  old_message {{71 114 97 105 110 32 67 104 101 99 107}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 0 200}
    }
  cursor_position 11
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text22
  xpos -60
  ypos 1752
  hide_input true
  disable {{!labels}}
 }
add_layer {GrainCheck GrainCheck.red GrainCheck.green GrainCheck.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 GrainCheck
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 GrainCheck.red 0 0 rgba.green 0 1 GrainCheck.green 0 1 rgba.blue 0 2 GrainCheck.blue 0 2"
  name Shuffle16
  label "\[value out1]"
  xpos -60
  ypos 1778
 }
 Dot {
  name Dot42
  label "  "
  note_font_size 16
  xpos -26
  ypos 2169
 }
push $N884f8d30
 Dot {
  name Dot20
  label "  "
  note_font_size 16
  xpos 968
  ypos -1185
 }
 Saturation {
  saturation {{colourcheck}}
  name Saturation1
  xpos 934
  ypos -1049
 }
set N7c4fa180 [stack 0]
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message "Colour Check"
  old_message {{67 111 108 111 117 114 32 67 104 101 99 107}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 11 200 0 200}
    }
  cursor_position 12
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text23
  xpos 26
  ypos 1752
  hide_input true
  disable {{!labels}}
 }
add_layer {ColourCheck ColourCheck.red ColourCheck.green ColourCheck.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 ColourCheck
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 ColourCheck.red 0 0 rgba.green 0 1 ColourCheck.green 0 1 rgba.blue 0 2 ColourCheck.blue 0 2"
  name Shuffle17
  label "\[value out1]"
  xpos 26
  ypos 1778
 }
 Dot {
  name Dot41
  label "  "
  note_font_size 16
  xpos 60
  ypos 2119
 }
push $N409f62a0
push $N788fb770
 Dot {
  name Dot67
  label "  "
  note_font_size 16
  xpos 192
  ypos -1205
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge8
  xpos 440
  ypos -1209
 }
 Grade {
  white {{parent.difference}}
  black_clamp false
  name Grade1
  xpos 440
  ypos -1183
 }
set N5bff9410 [stack 0]
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message "Difference Check"
  old_message {{68 105 102 102 101 114 101 110 99 101 32 67 104 101 99 107}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 11 200 12 200 13 200 14 200 15 200 0 200}
    }
  cursor_position 16
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text24
  xpos 113
  ypos 1752
  hide_input true
  disable {{!labels}}
 }
add_layer {DifferenceCheck DifferenceCheck.red DifferenceCheck.green DifferenceCheck.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 DifferenceCheck
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 DifferenceCheck.red 0 0 rgba.green 0 1 DifferenceCheck.green 0 1 rgba.blue 0 2 DifferenceCheck.blue 0 2"
  name Shuffle18
  label "\[value out1]"
  xpos 113
  ypos 1778
 }
 Dot {
  name Dot39
  label "  "
  note_font_size 16
  xpos 147
  ypos 2069
 }
push $N88bfb5d0
 Dot {
  name Dot32
  label "  "
  note_font_size 16
  xpos 184
  ypos -1079
 }
set Nd25f2da0 [stack 0]
 Clamp {
  channels rgb
  name Clamp4
  xpos 150
  ypos -1059
 }
 Crop {
  box {{parent.edgewidth} {parent.edgewidth} {width-parent.edgewidth} {height-parent.edgewidth}}
  crop false
  name Crop2
  xpos 150
  ypos -1033
 }
push $N3f7fc350
 Clamp {
  channels rgb
  name Clamp5
  xpos 65
  ypos -1001
 }
 Difference {
  inputs 2
  gain {{parent.edge}}
  name Difference1
  xpos 150
  ypos -1007
 }
 Shuffle {
  red alpha
  green black
  blue alpha
  alpha black
  name Shuffle12
  xpos 150
  ypos -969
 }
 Dilate {
  channels {rgba.red -rgba.green rgba.blue none}
  size 200
  name Dilate1
  xpos 150
  ypos -943
 }
push $Nd25f2da0
 Dot {
  name Dot34
  label "  "
  note_font_size 16
  xpos 299
  ypos -1079
 }
 Merge2 {
  inputs 2
  operation plus
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge11
  xpos 265
  ypos -943
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop3
  xpos 265
  ypos -895
 }
set Nc61fde70 [stack 0]
 Text2 {
  font_size_toolbar 200
  font_width_toolbar 100
  font_height_toolbar 100
  message "Edge Check"
  old_message {{69 100 103 101 32 67 104 101 99 107}
    }
  box {{width*.025} {width*.025} {width} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 0 200}
    }
  cursor_position 10
  font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 200
  center {2224 1548}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3096}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.5
  background_border_x {{background_border_y*3}}
  background_border_y 10
  name Text25
  xpos 199
  ypos 1752
  hide_input true
  disable {{!labels}}
 }
add_layer {EdgeCheck EdgeCheck.red EdgeCheck.green EdgeCheck.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 EdgeCheck
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 EdgeCheck.red 0 0 rgba.green 0 1 EdgeCheck.green 0 1 rgba.blue 0 2 EdgeCheck.blue 0 2"
  name Shuffle19
  label "\[value out1]"
  xpos 199
  ypos 1778
 }
 Dot {
  name Dot40
  label "  "
  note_font_size 16
  xpos 233
  ypos 2019
 }
push $N5bef91f0
push $N2e8fb5a0
push $N562fbde0
push $N139499f0
push $Nc61fde70
push $N5bff9410
push $N7c4fa180
push $N804f8870
push $N5e2f5840
push $N810f17a0
push $N5a4f8560
push $N5bef91f0
 Switch {
  inputs 12
  which {{parent.view}}
  name ViewSwitch
  xpos 780
  ypos -604
 }
 Dot {
  name Dot21
  label "  "
  note_font_size 16
  xpos 814
  ypos -339
 }
set N403fc3f0 [stack 0]
 Dot {
  name Dot37
  label "  "
  note_font_size 16
  xpos 1047
  ypos -339
 }
 Dot {
  name Dot71
  label "  "
  note_font_size 16
  xpos 1047
  ypos -237
 }
push $N403fc3f0
 Crop {
  box {{parent.ROI} {parent.ROI} {parent.ROI} {parent.ROI}}
  intersect true
  name Crop6
  xpos 890
  ypos -289
 }
push $N403fc3f0
 Dissolve {
  inputs 2
  which {{viewanalysisregion==0?0:.75}}
  name Dissolve1
  xpos 780
  ypos -295
 }
 Switch {
  inputs 2
  which {{"parent.view==9 || parent.view==10"}}
  name Switch4
  label "Turn off Crop for Graphs"
  xpos 780
  ypos -247
 }
 Dot {
  name Dot1
  label "  "
  note_font_size 16
  xpos 814
  ypos -21
 }
set Nd0ff9f20 [stack 0]
 Dot {
  name Dot5
  label "  "
  note_font_size 16
  xpos 230
  ypos -21
 }
set Nd0ffeb20 [stack 0]
 Dot {
  name Dot50
  label "  "
  note_font_size 16
  xpos 151
  ypos -21
 }
 Dot {
  name Dot62
  label "  "
  note_font_size 16
  xpos 151
  ypos 1281
 }
set Nd17f8b10 [stack 0]
 Dot {
  name Dot61
  label "  "
  note_font_size 16
  xpos 151
  ypos 1334
 }
push $Nd0ff9f20
 Dot {
  name Dot2
  label "  "
  note_font_size 16
  xpos 1748
  ypos -21
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop13
  xpos 1714
  ypos 37
 }
 Dot {
  name Dot8
  label "  "
  note_font_size 16
  xpos 1748
  ypos 122
 }
set Ne6a4b570 [stack 0]
 Dot {
  name Dot13
  label "  "
  note_font_size 16
  xpos 1748
  ypos 184
 }
set N2e1f68b0 [stack 0]
 Dot {
  name Dot16
  label "  "
  note_font_size 16
  xpos 1748
  ypos 297
 }
set N2e1fb830 [stack 0]
 Dot {
  name Dot17
  label "  "
  note_font_size 16
  xpos 1748
  ypos 359
 }
set Ne5841960 [stack 0]
 Dot {
  name Dot4
  label "  "
  note_font_size 16
  xpos 1748
  ypos 438
 }
set Ne5846850 [stack 0]
 Dot {
  name Dot28
  label "  "
  note_font_size 16
  xpos 1748
  ypos 511
 }
set Ne584b800 [stack 0]
 Dot {
  name Dot30
  label "  "
  note_font_size 16
  xpos 1748
  ypos 570
 }
set Nb24443b0 [stack 0]
 Dot {
  name Dot29
  label "  "
  note_font_size 16
  xpos 1748
  ypos 634
 }
set Nb2449330 [stack 0]
 Dot {
  name Dot27
  label "  "
  note_font_size 16
  xpos 1748
  ypos 696
 }
set N8edd80 [stack 0]
 Dot {
  name Dot6
  label "  "
  note_font_size 16
  xpos 1748
  ypos 774
 }
set N8f2d00 [stack 0]
 Dot {
  name Dot56
  label "  "
  note_font_size 16
  xpos 1748
  ypos 821
 }
set N8f7cb0 [stack 0]
 Dot {
  name Dot46
  label "  "
  note_font_size 16
  xpos 1748
  ypos 902
 }
set N4a3f3070 [stack 0]
 Dot {
  name Dot49
  label "  "
  note_font_size 16
  xpos 1748
  ypos 949
 }
set N4a3f7ff0 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle23
  label "\[value in1]"
  xpos 1261
  ypos 939
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "\nAlpha Channel Detected"
  old_message {{10 65 108 112 104 97 32 67 104 97 110 110 101 108 32 68 101 116 101 99 116 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  transforms {{0 2}
    }
  font_size_values {{1 100 2 100 3 100 4 100 5 100 6 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 1 100 2 100 3 100 4 100 5 100 6 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 7 150 8 150 9 150 10 150 11 150 12 150 13 150}
    }
  cursor_position 1
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 0 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text30
  label "\[value message]"
  xpos 1114
  ypos 933
 }
push $N4a3f3070
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle26
  label "\[value in1]"
  xpos 1261
  ypos 892
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "\nAlpha Check Passed"
  old_message {{10 65 108 112 104 97 32 67 104 101 99 107 32 80 97 115 115 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  transforms {{0 2}
    }
  font_size_values {{1 100 2 100 3 100 4 100 5 100 6 100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 7 150 8 150 9 150}
    }
  cursor_position 1
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {0 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text27
  label "\[value message]"
  xpos 1114
  ypos 886
 }
 Switch {
  inputs 2
  which {{detectalpha}}
  name AlphaSwitch
  xpos 925
  ypos 945
 }
push $N8f7cb0
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle29
  label "\[value in1]"
  xpos 1260
  ypos 811
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Extra Channels Detected"
  old_message {{69 120 116 114 97 32 67 104 97 110 110 101 108 115 32 68 101 116 101 99 116 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  transforms {{0 2}
    }
  font_size_values {{0 100 5 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 0 100 5 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 6 150 7 150 8 150 9 150 10 150 11 150 12 150}
    }
  cursor_position 15
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 0 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text34
  label "\[value message]"
  xpos 1113
  ypos 811
 }
push $N8f2d00
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle30
  label "\[value in1]"
  xpos 1260
  ypos 764
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Channel Check Passed"
  old_message {{67 104 97 110 110 101 108 32 67 104 101 99 107 32 80 97 115 115 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  transforms {{0 2}
    }
  font_size_values {{0 100 7 100 0 100 7 100 8 100 9 100 10 100 8 150 9 150 10 150}
    }
  cursor_position 14
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {0 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text35
  label "\[value message]"
  xpos 1112
  ypos 764
 }
 Switch {
  inputs 2
  which {{parent.checkchannels}}
  name ChannelSwitch
  xpos 930
  ypos 817
 }
push $N8edd80
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle10
  label "\[value in1]"
  xpos 1255
  ypos 686
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Bounding Box\nMismatch"
  old_message {{66 111 117 110 100 105 110 103 32 66 111 120 10 77 105 115 109 97 116 99 104}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify right
  transforms {{0 2}
    }
  cursor_position 21
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 0 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text11
  label "\[value message]"
  xpos 1113
  ypos 680
 }
push $Nb2449330
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle11
  label "\[value in1]"
  xpos 1255
  ypos 624
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Bounding Box\nCheck Passed"
  old_message {{66 111 117 110 100 105 110 103 32 66 111 120 10 67 104 101 99 107 32 80 97 115 115 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify right
  transforms {{0 2}
    }
  font_height_values {{0 100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 14 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 23 100 24 100 0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 11 200 12 200 13 200 14 200 15 200 16 200 17 200 18 200 19 200 20 200 21 200 22 200 23 200 24 200}
    }
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {0 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text12
  label "\[value message]"
  xpos 1113
  ypos 618
 }
 Switch {
  inputs 2
  which {{Comp.bbox.w==Comp.width?(Comp.bbox.h==Comp.height?0:1):1}}
  name Switch3
  xpos 922
  ypos 692
 }
push $Nb24443b0
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle8
  label "\[value in1]"
  xpos 1256
  ypos 560
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Frame Range \nMismatch"
  old_message {{70 114 97 109 101 32 82 97 110 103 101 32 10 77 105 115 109 97 116 99 104}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  transforms {{0 2}
    }
  font_height_values {{0 100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 14 100 15 100 16 100 17 100 18 100 19 100 20 100 0 200 1 200 2 200 3 200 4 200 5 200 6 200 7 200 8 200 9 200 10 200 11 200 12 200 13 200 14 200 15 200 16 200 17 200 18 200 19 200 20 200}
    }
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 0 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text9
  label "\[value message]"
  xpos 1113
  ypos 554
 }
push $Ne584b800
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle9
  label "\[value in1]"
  xpos 1254
  ypos 501
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Frame Range \nCheck Passed"
  old_message {{70 114 97 109 101 32 82 97 110 103 101 32 10 67 104 101 99 107 32 80 97 115 115 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  transforms {{0 2}
    }
  cursor_position 25
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {0 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text10
  label "\[value message]"
  xpos 1111
  ypos 495
 }
 Switch {
  inputs 2
  which {{parent.jabukafirst==parent.compfirst+parent.slate?(parent.jabukalast==parent.complast?0:1):1}}
  name Switch
  xpos 936
  ypos 566
 }
push $Ne5846850
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Analysis Not Run"
  old_message {{65 110 97 108 121 115 105 115 32 78 111 116 32 82 117 110}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text20
  label "\[value message]"
  xpos 1173
  ypos 428
 }
push $Nd0ffeb20
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop12
  xpos 196
  ypos 15
 }
 Dot {
  name Dot24
  label "  "
  note_font_size 16
  xpos 230
  ypos 56
 }
set N15141fd0 [stack 0]
 Dot {
  name Dot10
  label "  "
  note_font_size 16
  xpos 230
  ypos 117
 }
set N15146ba0 [stack 0]
 Dot {
  name Dot12
  label "  "
  note_font_size 16
  xpos 230
  ypos 438
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Analysis Incomplete"
  old_message {{65 110 97 108 121 115 105 115 32 73 110 99 111 109 112 108 101 116 101}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 19
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text5
  label "\[value message]"
  xpos 328
  ypos 428
 }
push $Ne5841960
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle4
  label "\[value in1]"
  xpos 1255
  ypos 349
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Values Higher\nThan \[value parent.maxvalue]\nDetected"
  old_message {{86 97 108 117 101 115 32 72 105 103 104 101 114 10 84 104 97 110 32 50 53 46 48 48 49 52 57 57 49 56 10 68 101 116 101 99 116 101 100}
    }
  old_expression_markers {{19 29}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify right
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 3
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 0 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text6
  label "\[value message]"
  xpos 1105
  ypos 337
 }
push $N2e1fb830
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle3
  label "\[value in1]"
  xpos 1256
  ypos 287
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Whites\nCheck\nPassed"
  old_message {{87 104 105 116 101 115 10 67 104 101 99 107 10 80 97 115 115 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify right
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 6
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {0 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text4
  label "\[value message]"
  xpos 1103
  ypos 275
 }
 Switch {
  inputs 2
  which {{"max(CurveToolQC.maxlumr, CurveToolQC.maxlumg, CurveToolQC.maxlumb) > maxvalue ? 1 : 0"}}
  name HighlightSwitch
  xpos 939
  ypos 355
 }
push $N2e1f68b0
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle2
  label "\[value in1]"
  xpos 1249
  ypos 174
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Values Lower\nThan \[value parent.minvalue]\nDetected"
  old_message {{86 97 108 117 101 115 32 76 111 119 101 114 10 84 104 97 110 32 48 46 48 48 48 50 56 48 52 53 48 50 55 50 56 10 68 101 116 101 99 116 101 100}
    }
  old_expression_markers {{18 32}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 12
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 0 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text3
  label "\[value message]"
  xpos 1095
  ypos 162
 }
push $Ne6a4b570
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle1
  label "\[value in1]"
  xpos 1248
  ypos 112
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Blacks\nCheck \nPassed"
  old_message {{66 108 97 99 107 115 10 67 104 101 99 107 32 10 80 97 115 115 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 6
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {0 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text2
  label "\[value message]"
  xpos 1094
  ypos 100
 }
 Switch {
  inputs 2
  which {{"rint(CurveToolQCBlacks.minlumall*10000) < rint(minvalue*10000) ? 1 : 0"}}
  name NegativesSwitch
  xpos 938
  ypos 180
 }
push $N15146ba0
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle5
  label "\[value in1]"
  xpos 287
  ypos 107
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "INF Values Detected\n\n\n"
  old_message {{73 78 70 32 86 97 108 117 101 115 32 68 101 116 101 99 116 101 100 10 10 10}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 19
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 0 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text7
  label "\[value message]"
  xpos 390
  ypos 107
  disable {{"!(CurveToolQC.maxlumall == inf)"}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "NAN Values Detected\n"
  old_message {{78 65 78 32 86 97 108 117 101 115 32 68 101 116 101 99 116 101 100 10}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 19
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {2 0 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text17
  label "\[value message]"
  xpos 500
  ypos 107
  disable {{!(CurveToolQCBlacks.minlumall==-12345)}}
 }
push $N15141fd0
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle6
  label "\[value in1]"
  xpos 291
  ypos 46
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "INF / NAN \nCheck \nPassed"
  old_message {{73 78 70 32 47 32 78 65 78 32 10 67 104 101 99 107 32 10 80 97 115 115 101 100}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 18
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {0 2 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text1
  label "\[value message]"
  xpos 388
  ypos 34
 }
 Switch {
  inputs 2
  which {{"CurveToolQCBlacks.minlumall == -12345 || CurveToolQC.maxlumall == inf"}}
  name ErrorSwitch
  xpos 640
  ypos 113
 }
push $Nd0ff9f20
 Merge2 {
  inputs 2
  name Merge7
  xpos 780
  ypos 113
  disable {{checkinfnan==0?1:0}}
 }
 Merge2 {
  inputs 2
  name Merge2
  xpos 780
  ypos 180
  disable {{checknegatives==0?1:0}}
 }
 Merge2 {
  inputs 2
  name Merge5
  xpos 780
  ypos 355
  disable {{checkhighlights==0?1:0}}
 }
 Text2 {
  font_size_toolbar 300
  font_width_toolbar 100
  font_height_toolbar 100
  message "wipRepo in use instead of plate"
  old_message {{119 105 112 82 101 112 111 32 105 110 32 117 115 101 32 105 110 115 116 101 97 100 32 111 102 32 112 108 97 116 101}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  font_size_values {{0 300 1 300 2 300 3 300 4 300 5 300 6 300 7 300 8 300 9 300 10 300 11 300 12 300 13 300 14 300 15 300 16 300 17 300 18 300 19 300 20 300 21 300 22 300 23 300 24 300 25 300 26 300 27 300 28 300 29 300 30 300}
    }
  cursor_position 26
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize}}
  font_size 300
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  color_panelDropped true
  enable_background true
  background_opacity 0.75
  background_border_x {{global_font_scale*20}}
  background_border_y 0
  name Text32
  label "\[value message]"
  xpos 780
  ypos 381
  disable {{!parent.wiprepo}}
 }
 Switch {
  inputs 3
  which 2
  name AnalyzerSwitch
  xpos 780
  ypos 434
 }
 Merge2 {
  inputs 2
  name Merge10
  xpos 780
  ypos 566
  disable {{checkframerange==1?0:1}}
 }
 Merge2 {
  inputs 2
  name Merge9
  xpos 780
  ypos 692
  disable {{checkbbox==1?0:1}}
 }
 Merge2 {
  inputs 2
  name Merge12
  xpos 780
  ypos 817
  disable {{showchannelcheck==1?0:1}}
 }
 Merge2 {
  inputs 2
  name Merge15
  xpos 780
  ypos 945
  disable {{checkalpha==1?0:1}}
 }
push $Nd17f8b10
 Switch {
  inputs 2
  which {{"(parent.view==0 ||  parent.view==11) && parent.text"}}
  name ToggleText
  xpos 780
  ypos 1277
 }
 Switch {
  inputs 2
  which {{"parent.view==9 || parent.view==10"}}
  name SwitchOffTextPerView
  xpos 780
  ypos 1330
 }
 Dot {
  name Dot63
  label "  "
  note_font_size 16
  xpos 814
  ypos 1472
 }
set Nc23f1f80 [stack 0]
 Dot {
  name Dot66
  label "  "
  note_font_size 16
  xpos 814
  ypos 1750
 }
set Nc23f6b00 [stack 0]
push $N5a3fc420
 Dot {
  name Dot59
  label "  "
  note_font_size 16
  xpos -694
  ypos -1020
 }
push $Ne434df50
 Switch {
  inputs 2
  which {{error}}
  name Switch10
  xpos -728
  ypos -889
 }
 Dot {
  name Dot64
  label "  "
  note_font_size 16
  xpos -694
  ypos 1615
 }
push $Nc23f1f80
 Remove {
  name Remove1
  xpos 562
  ypos 1462
 }
 Copy {
  inputs 2
  channels all
  name Copy8
  xpos 562
  ypos 1599
  disable {{csdimattecheck<2?0:1}}
 }
 Copy {
  inputs 2
  channels rgb
  name Copy14
  xpos 562
  ypos 1734
 }
 Copy {
  inputs 2
  channels EdgeCheck
  bbox B
  name Copy2
  xpos 562
  ypos 2003
  disable {{csedgecheck<2?0:1}}
 }
 Copy {
  inputs 2
  channels DifferenceCheck
  bbox B
  name Copy3
  xpos 562
  ypos 2053
  disable {{csdifferencecheck==0?(platetopnoderead==1?0:1):(csdifferencecheck==2?1:0)}}
 }
 Copy {
  inputs 2
  channels ColourCheck
  bbox B
  name Copy4
  xpos 562
  ypos 2103
  disable {{cscolourcheck<2?0:1}}
 }
 Copy {
  inputs 2
  channels GrainCheck
  bbox B
  name Copy5
  xpos 562
  ypos 2153
  disable {{csgraincheck<2?0:1}}
 }
 Copy {
  inputs 2
  channels HighlightSpotter
  bbox B
  name Copy6
  xpos 562
  ypos 2203
  disable {{cshighlightspotter>1?1:(cshighlightspotter==1?0:HighlightSwitch.which==0?1:0)}}
 }
 Copy {
  inputs 2
  channels NegativeSpotter
  bbox B
  name Copy7
  xpos 562
  ypos 2253
  disable {{csnegativespotter>1?1:(csnegativespotter==1?0:NegativesSwitch.which==0?1:0)}}
 }
 Copy {
  inputs 2
  channels INFNaNSpotter
  bbox B
  name fN
  xpos 562
  ypos 2303
  disable {{csinfnanspotter>1?1:(csinfnanspotter==1?0:ErrorSwitch.which==0?1:0)}}
 }
 Copy {
  inputs 2
  channels Comp
  bbox B
  name Copy9
  xpos 562
  ypos 2353
  disable {{cscomp<2?0:1}}
 }
 Copy {
  inputs 2
  channels Plate
  bbox B
  name Copy10
  xpos 562
  ypos 2403
  disable {{"csplate==0?(\[exists parent.input1]==1?0:1):(csplate==2?1:0)"}}
 }
 Dot {
  name Dot58
  label "  "
  note_font_size 16
  xpos 596
  ypos 2473
 }
set Nc17f62c0 [stack 0]
 Dot {
  name Dot74
  label "  "
  note_font Arial
  note_font_size 16
  xpos 502
  ypos 2500
 }
push $Nc17f62c0
 Crop {
  box {{parent.ROI} {parent.ROI} {parent.ROI} {parent.ROI}}
  intersect true
  name Crop1
  xpos 672
  ypos 2497
 }
push $Nc17f62c0
 Dissolve {
  inputs 2
  which {{viewanalysisregion==0?0:.75}}
  name Dissolve2
  xpos 562
  ypos 2491
 }
 Copy {
  inputs 2
  channels rgb
  bbox A
  name Copy1
  xpos 562
  ypos 2529
 }
 Copy {
  inputs 2
  channels MaxPixValueGraph
  bbox B
  name Copy13
  xpos 562
  ypos 2602
  disable {{AnalyzerSwitch.which==0?(csmaxgraph>1?1:(csmaxgraph==1?0:HighlightSwitch.which==0?1:0)):1}}
 }
 Copy {
  inputs 2
  channels MinPixValueGraph
  bbox B
  name Copy12
  xpos 562
  ypos 2652
  disable {{AnalyzerSwitch.which==0?(csmingraph>1?1:(csmingraph==1?0:NegativesSwitch.which==0?1:0)):1}}
 }
 Crop {
  box {0 0 {width} {height}}
  intersect true
  crop false
  name Crop8
  xpos 562
  ypos 2721
 }
 LayerContactSheet {
  width {{columns*input.width*csscale}}
  height {{rows*input.height*csscale/input.format.pixel_aspect}}
  rows {{"input.format.pixel_aspect>=1.5?(ceil(sqrt(\[python -execlocal \{channels = nuke.thisNode().channels();layer_set = set(\[channel.split('.')\[0] for channel in channels]);ret=len(layer_set)\}]))):(ceil(\[python -execlocal \{channels = nuke.thisNode().channels();layer_set = set(\[channel.split('.')\[0] for channel in channels]);ret=len(layer_set)\}]/columns))"}}
  columns {{"input.format.pixel_aspect>=1.5?(ceil(\[python -execlocal \{channels = nuke.thisNode().channels();layer_set = set(\[channel.split('.')\[0] for channel in channels]);ret=len(layer_set)\}]/rows)):(ceil(sqrt(\[python -execlocal \{channels = nuke.thisNode().channels();layer_set = set(\[channel.split('.')\[0] for channel in channels]);ret=len(layer_set)\}])))"}}
  autodims false
  name LayerContactSheet
  xpos 562
  ypos 2768
 }
push $Nc23f6b00
 Switch {
  inputs 2
  which {{parent.view==11?1:0}}
  name CSswitch
  xpos 780
  ypos 2768
 }
 Switch {
  inputs 2
  which {{parent.view==8}}
  name DiSwitch
  xpos 780
  ypos 2880
 }
push $N4a3f7ff0
 Dot {
  name Dot26
  label "  "
  note_font_size 16
  xpos 1748
  ypos 2965
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle7
  label "\[value in1]"
  xpos 1382
  ypos 2955
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Missing Comp Input"
  old_message {{77 105 115 115 105 110 103 32 67 111 109 112 32 73 110 112 117 116}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 12
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {1 0 0 1}
  color_panelDropped true
  name Text8
  label "\[value message]"
  xpos 1250
  ypos 2955
  disable {{parent.compplate}}
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Missing Plate Input"
  old_message {{77 105 115 115 105 110 103 32 80 108 97 116 101 32 73 110 112 117 116}
    }
  box {{height*.05} {height*.05} {width-height*.05 x1060 -1} {height*.95}}
  xjustify center
  yjustify center
  transforms {{0 2}
    }
  cursor_position 13
  font {{ Arial : Bold : ie-fonts/arialbd.ttf : 0 }}
  global_font_scale {{Comp.width/4000*textsize*2}}
  center {1920 1080}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 2160}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 1920 1080 0 0 1 1 0 0 0 0}
    }
  color {1 0 0 1}
  color_panelDropped true
  name Text36
  label "\[value message]"
  xpos 1140
  ypos 2955
  disable {{!parent.compplate}}
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop4
  xpos 1018
  ypos 2961
 }
 Switch {
  inputs 2
  which {{"parent.compplate?\[exists parent.input1]:\[exists parent.input0]"}}
  name Switch1
  xpos 780
  ypos 2961
 }
 FrameRange {
  first_frame {{"\[exists parent.input0]?parent.input0.first_frame:0"}}
  last_frame {{"\[exists parent.input0]?parent.input0.last_frame:0"}}
  time ""
  name FrameRange1
  xpos 780
  ypos 3079
 }
 Output {
  name Output1
  xpos 780
  ypos 3148
 }
 Group {
  inputs 0
  name MaximumGreen
  help "A simple, albeit handy tool to remap curves from one value to the other. Made to help tackle the random output from the curve tool."
  tile_color 0xff00ff
  xpos 1662
  ypos -1176
  addUserKnob {20 userTab l Options}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_01 l "" +STARTLINE T "C O P Y  A N I M A T I O N  C U R V E  H E R E :\n"}
  addUserKnob {7 curveValue l "Animation Curve"}
  curveValue {{parent.CurveToolQC.intensitydata.g}}
  addUserKnob {26 ""}
  addUserKnob {7 curveMin l "Curve Minimum"}
  curveMin {{CurveToolQC.minmaxlumall}}
  addUserKnob {7 curveMax l "Curve Maximum"}
  curveMax {{CurveToolQC.maxlumall}}
  addUserKnob {7 newMin l "New Minimum"}
  newMin {{ceil(CompDot.input.height*.05)}}
  addUserKnob {7 newMax l "New Maximum"}
  newMax {{ceil(CompDot.input.height*.95)}}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_02 l "" +STARTLINE T "C O P Y   N E W   A N I M A T I O N   C U R V E\nO U T   O F   H E R E :\n"}
  addUserKnob {7 curveOutput l Output}
  curveOutput {{ceil(lerp(curveMin,newMin,curveMax,newMax,curveValue))}}
  addUserKnob {26 ""}
  addUserKnob {20 infoTab l Info}
  addUserKnob {26 ""}
  addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
  addUserKnob {26 ""}
 }
  Output {
   inputs 0
   name Output1
   xpos -651
   ypos -209
  }
 end_group
 Group {
  inputs 0
  name MaximumBlue
  help "A simple, albeit handy tool to remap curves from one value to the other. Made to help tackle the random output from the curve tool."
  tile_color 0xffff
  xpos 1661
  ypos -1149
  addUserKnob {20 userTab l Options}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_01 l "" +STARTLINE T "C O P Y  A N I M A T I O N  C U R V E  H E R E :\n"}
  addUserKnob {7 curveValue l "Animation Curve"}
  curveValue {{parent.CurveToolQC.intensitydata.b}}
  addUserKnob {26 ""}
  addUserKnob {7 curveMin l "Curve Minimum"}
  curveMin {{CurveToolQC.minmaxlumall}}
  addUserKnob {7 curveMax l "Curve Maximum"}
  curveMax {{CurveToolQC.maxlumall}}
  addUserKnob {7 newMin l "New Minimum"}
  newMin {{ceil(CompDot.input.height*.05)}}
  addUserKnob {7 newMax l "New Maximum"}
  newMax {{ceil(CompDot.input.height*.95)}}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_02 l "" +STARTLINE T "C O P Y   N E W   A N I M A T I O N   C U R V E\nO U T   O F   H E R E :\n"}
  addUserKnob {7 curveOutput l Output}
  curveOutput {{ceil(lerp(curveMin,newMin,curveMax,newMax,curveValue))}}
  addUserKnob {26 ""}
  addUserKnob {20 infoTab l Info}
  addUserKnob {26 ""}
  addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
  addUserKnob {26 ""}
 }
  Output {
   inputs 0
   name Output1
   xpos -651
   ypos -209
  }
 end_group
 Group {
  inputs 0
  name MinimumGreen
  help "A simple, albeit handy tool to remap curves from one value to the other. Made to help tackle the random output from the curve tool."
  tile_color 0xff00ff
  xpos 2357
  ypos -1183
  addUserKnob {20 userTab l Options}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_01 l "" +STARTLINE T "C O P Y  A N I M A T I O N  C U R V E  H E R E :\n"}
  addUserKnob {7 curveValue l "Animation Curve"}
  curveValue {{parent.CurveToolQCBlacks.intensitydata.g}}
  addUserKnob {26 ""}
  addUserKnob {7 curveMin l "Curve Minimum"}
  curveMin {{CurveToolQCBlacks.minlumall}}
  addUserKnob {7 curveMax l "Curve Maximum"}
  curveMax {{CurveToolQCBlacks.maxminlumall}}
  addUserKnob {7 newMin l "New Minimum"}
  newMin {{ceil(CompDot.input.height*.05)}}
  addUserKnob {7 newMax l "New Maximum"}
  newMax {{ceil(CompDot.input.height*.95)}}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_02 l "" +STARTLINE T "C O P Y   N E W   A N I M A T I O N   C U R V E\nO U T   O F   H E R E :\n"}
  addUserKnob {7 curveOutput l Output}
  curveOutput {{ceil(lerp(curveMin,newMin,curveMax,newMax,curveValue))}}
  addUserKnob {26 ""}
  addUserKnob {20 infoTab l Info}
  addUserKnob {26 ""}
  addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
  addUserKnob {26 ""}
 }
  Output {
   inputs 0
   name Output1
   xpos -651
   ypos -209
  }
 end_group
 Group {
  inputs 0
  name MinimumBlue
  help "A simple, albeit handy tool to remap curves from one value to the other. Made to help tackle the random output from the curve tool."
  tile_color 0xffff
  xpos 2357
  ypos -1151
  addUserKnob {20 userTab l Options}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_01 l "" +STARTLINE T "C O P Y  A N I M A T I O N  C U R V E  H E R E :\n"}
  addUserKnob {7 curveValue l "Animation Curve"}
  curveValue {{parent.CurveToolQCBlacks.intensitydata.b}}
  addUserKnob {26 ""}
  addUserKnob {7 curveMin l "Curve Minimum"}
  curveMin {{CurveToolQCBlacks.minlumall}}
  addUserKnob {7 curveMax l "Curve Maximum"}
  curveMax {{CurveToolQCBlacks.maxminlumall}}
  addUserKnob {7 newMin l "New Minimum"}
  newMin {{ceil(CompDot.input.height*.05)}}
  addUserKnob {7 newMax l "New Maximum"}
  newMax {{ceil(CompDot.input.height*.95)}}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_02 l "" +STARTLINE T "C O P Y   N E W   A N I M A T I O N   C U R V E\nO U T   O F   H E R E :\n"}
  addUserKnob {7 curveOutput l Output}
  curveOutput {{ceil(lerp(curveMin,newMin,curveMax,newMax,curveValue))}}
  addUserKnob {26 ""}
  addUserKnob {20 infoTab l Info}
  addUserKnob {26 ""}
  addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
  addUserKnob {26 ""}
 }
  Output {
   inputs 0
   name Output1
   xpos -651
   ypos -209
  }
 end_group
 Group {
  inputs 0
  name MinimumValue
  help "A simple, albeit handy tool to remap curves from one value to the other. Made to help tackle the random output from the curve tool."
  tile_color 0xff
  xpos 2357
  ypos -1121
  addUserKnob {20 userTab l Options}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_01 l "" +STARTLINE T "C O P Y  A N I M A T I O N  C U R V E  H E R E :\n"}
  addUserKnob {7 curveValue l "Animation Curve"}
  curveValue {{parent.minvalue}}
  addUserKnob {26 ""}
  addUserKnob {7 curveMin l "Curve Minimum"}
  curveMin {{CurveToolQCBlacks.minlumall}}
  addUserKnob {7 curveMax l "Curve Maximum"}
  curveMax {{CurveToolQCBlacks.maxminlumall}}
  addUserKnob {7 newMin l "New Minimum"}
  newMin {{ceil(CompDot.input.height*.05)}}
  addUserKnob {7 newMax l "New Maximum"}
  newMax {{ceil(CompDot.input.height*.95)}}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_02 l "" +STARTLINE T "C O P Y   N E W   A N I M A T I O N   C U R V E\nO U T   O F   H E R E :\n"}
  addUserKnob {7 curveOutput l Output}
  curveOutput {{ceil(lerp(curveMin,newMin,curveMax,newMax,curveValue))}}
  addUserKnob {26 ""}
  addUserKnob {20 infoTab l Info}
  addUserKnob {26 ""}
  addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
  addUserKnob {26 ""}
 }
  Output {
   inputs 0
   name Output1
   xpos -651
   ypos -209
  }
 end_group
 Group {
  inputs 0
  name MaximumRed
  help "A simple, albeit handy tool to remap curves from one value to the other. Made to help tackle the random output from the curve tool."
  tile_color 0xff0000ff
  xpos 1661
  ypos -1204
  addUserKnob {20 userTab l Options}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_01 l "" +STARTLINE T "C O P Y  A N I M A T I O N  C U R V E  H E R E :\n"}
  addUserKnob {7 curveValue l "Animation Curve"}
  curveValue {{parent.CurveToolQC.intensitydata.r}}
  addUserKnob {26 ""}
  addUserKnob {7 curveMin l "Curve Minimum"}
  curveMin {{CurveToolQC.minmaxlumall}}
  addUserKnob {7 curveMax l "Curve Maximum"}
  curveMax {{CurveToolQC.maxlumall}}
  addUserKnob {7 newMin l "New Minimum"}
  newMin {{ceil(CompDot.input.height*.05)}}
  addUserKnob {7 newMax l "New Maximum"}
  newMax {{ceil(CompDot.input.height*.95)}}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_02 l "" +STARTLINE T "C O P Y   N E W   A N I M A T I O N   C U R V E\nO U T   O F   H E R E :\n"}
  addUserKnob {7 curveOutput l Output}
  curveOutput {{ceil(lerp(curveMin,newMin,curveMax,newMax,curveValue))}}
  addUserKnob {26 ""}
  addUserKnob {20 infoTab l Info}
  addUserKnob {26 ""}
  addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
  addUserKnob {26 ""}
 }
  Output {
   inputs 0
   name Output1
   xpos -651
   ypos -209
  }
 end_group
 Group {
  inputs 0
  name MinimumRed
  help "A simple, albeit handy tool to remap curves from one value to the other. Made to help tackle the random output from the curve tool."
  tile_color 0xff0000ff
  xpos 2358
  ypos -1212
  addUserKnob {20 userTab l Options}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_01 l "" +STARTLINE T "C O P Y  A N I M A T I O N  C U R V E  H E R E :\n"}
  addUserKnob {7 curveValue l "Animation Curve"}
  curveValue {{parent.CurveToolQCBlacks.intensitydata.r}}
  addUserKnob {26 ""}
  addUserKnob {7 curveMin l "Curve Minimum"}
  curveMin {{CurveToolQCBlacks.minlumall}}
  addUserKnob {7 curveMax l "Curve Maximum"}
  curveMax {{CurveToolQCBlacks.maxminlumall}}
  addUserKnob {7 newMin l "New Minimum"}
  newMin {{ceil(CompDot.input.height*.05)}}
  addUserKnob {7 newMax l "New Maximum"}
  newMax {{ceil(CompDot.input.height*.95)}}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_02 l "" +STARTLINE T "C O P Y   N E W   A N I M A T I O N   C U R V E\nO U T   O F   H E R E :\n"}
  addUserKnob {7 curveOutput l Output}
  curveOutput {{ceil(lerp(curveMin,newMin,curveMax,newMax,curveValue))}}
  addUserKnob {26 ""}
  addUserKnob {20 infoTab l Info}
  addUserKnob {26 ""}
  addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
  addUserKnob {26 ""}
 }
  Output {
   inputs 0
   name Output1
   xpos -651
   ypos -209
  }
 end_group
 Group {
  inputs 0
  name MaximumValue
  help "A simple, albeit handy tool to remap curves from one value to the other. Made to help tackle the random output from the curve tool."
  tile_color 0xff
  xpos 1662
  ypos -1121
  addUserKnob {20 userTab l Options}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_01 l "" +STARTLINE T "C O P Y  A N I M A T I O N  C U R V E  H E R E :\n"}
  addUserKnob {7 curveValue l "Animation Curve"}
  curveValue {{parent.maxvalue}}
  addUserKnob {26 ""}
  addUserKnob {7 curveMin l "Curve Minimum"}
  curveMin {{CurveToolQC.minmaxlumall}}
  addUserKnob {7 curveMax l "Curve Maximum"}
  curveMax {{CurveToolQC.maxlumall}}
  addUserKnob {7 newMin l "New Minimum"}
  newMin {{ceil(CompDot.input.height*.05)}}
  addUserKnob {7 newMax l "New Maximum"}
  newMax {{ceil(CompDot.input.height*.95)}}
  addUserKnob {26 ""}
  addUserKnob {26 helpText_02 l "" +STARTLINE T "C O P Y   N E W   A N I M A T I O N   C U R V E\nO U T   O F   H E R E :\n"}
  addUserKnob {7 curveOutput l Output}
  curveOutput {{ceil(lerp(curveMin,newMin,curveMax,newMax,curveValue))}}
  addUserKnob {26 ""}
  addUserKnob {20 infoTab l Info}
  addUserKnob {26 ""}
  addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
  addUserKnob {26 ""}
 }
  Output {
   inputs 0
   name Output1
   xpos -651
   ypos -209
  }
 end_group
 Group {
  inputs 0
  name QcDi
  label "\[value from0]"
  selected true
  xpos -3706
  ypos -1114
  addUserKnob {20 User l "Qc Di"}
  addUserKnob {6 MatteGrade_multiply_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
  addUserKnob {41 from0 l channel T CopyMatte.from0}
  addUserKnob {18 multiply}
  multiply {{!switch?parent.mattecolor:1} {!switch?parent.mattecolor:1} {!switch?parent.mattecolor:1}}
  addUserKnob {6 multiply_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 offset}
  offset {{switch?parent.mattecolor:0} {switch?parent.mattecolor:0} {switch?parent.mattecolor:0}}
  addUserKnob {6 offset_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 switch +STARTLINE}
  switch {{parent.switchgrade}}
  addUserKnob {41 message T Text26.message}
 }
  Input {
   inputs 0
   name Input
   xpos -616
   ypos -634
  }
  Crop {
   box {0 0 {width} {height}}
   name Crop11
   xpos -616
   ypos -608
  }
set N3c6f5fd0 [stack 0]
push $N3c6f5fd0
  Copy {
   inputs 2
   to0 rgba.alpha
   name CopyMatte
   xpos -616
   ypos -537
  }
  Dot {
   name Dot52
   label "  "
   note_font_size 16
   xpos -582
   ypos -444
  }
set N3c7ff0f0 [stack 0]
  Expression {
   channel3 alpha
   expr3 a>1?1:(a<0?1:0)
   name Expression8
   xpos -510
   ypos -448
  }
  CheckerBoard2 {
   inputs 0
   format "8192 6144 0 0 8192 6144 1 8K_CubeMap"
   boxsize 40
   centerlinecolor {0 0 0 0}
   centerlinewidth 0
   name CheckerBoard1
   xpos -411
   ypos -488
  }
  Reformat {
   type "to box"
   box_width {{MainDot.width}}
   box_height {{MainDot.height}}
   box_fixed true
   box_pixel_aspect {{MainDot.format.pixel_aspect}}
   name Reformat1
   xpos -411
   ypos -416
  }
  Copy {
   inputs 2
   from0 rgba.alpha
   to0 rgba.alpha
   name Copy11
   xpos -510
   ypos -422
  }
  Premult {
   name Premult1
   xpos -510
   ypos -384
  }
push $N3c7ff0f0
  Grade {
   multiply {{parent.multiply} {parent.multiply} {parent.multiply} {parent.multiply}}
   add {{parent.offset} {parent.offset} {parent.offset} {parent.offset}}
   black_clamp false
   maskChannelInput rgba.alpha
   name MatteGrade
   xpos -616
   ypos -422
  }
  Merge2 {
   inputs 2
   name Merge16
   xpos -616
   ypos -384
  }
  Shuffle2 {
   fromInput1 {{0} B}
   fromInput2 {{0} B}
   mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
   name Shuffle13
   xpos -616
   ypos -358
  }
  Crop {
   box {0 0 {width} {height}}
   name Crop1
   xpos -616
   ypos -332
  }
  Text2 {
   font_size_toolbar 100
   font_width_toolbar 100
   font_height_toolbar 100
   box {{width*.025} {width*.025} {width} {height*.95}}
   xjustify center
   yjustify bottom
   transforms {{0 2}
     }
   font {{ Arial : Regular : ie-fonts/arial.ttf : 0 }}
   global_font_scale {{Comp.width/4000*textsize*2}}
   scale {1 1}
   cursor_initialised true
   autofit_bbox false
   initial_cursor_position {{2729 0}
     }
   group_animations {{0} imported: 0 selected: items: "root transform/"}
   animation_layers {{1 11 2729 1440 0 0 1 1 0 0 0 0}
     }
   color {1 1 0 1}
   enable_background true
   background_opacity 0.5
   background_border_x {{background_border_y*3}}
   background_border_y 10
   name Text26
   xpos -616
   ypos -306
   disable {{!labels}}
   addUserKnob {20 User}
   addUserKnob {26 tempbuilddiqc l "auto built" T " "}
  }
  Output {
   name Output1
   xpos -616
   ypos -235
  }
 end_group
push $N49ffe7a0
 Dot {
  name Dot77
  label "  "
  note_font_size 16
  xpos 984
  ypos -1631
 }
set Nc11f5560 [stack 0]
 Dot {
  name Dot36
  label "  "
  note_font_size 16
  xpos 1236
  ypos -1631
 }
set Nc10f0100 [stack 0]
 Dot {
  name CompDot
  label "  "
  note_font_size 16
  xpos 1236
  ypos -1543
 }
 Expression {
  temp_name0 value
  temp_expr0 -12345
  expr0 isnan(r)?value:r
  expr1 isnan(g)?value:g
  expr2 isnan(b)?value:b
  name CompNanSwapBlacks
  xpos 1202
  ypos -1489
 }
push $Nc11f5560
 Expression {
  expr0 max(r,g,b)
  expr1 max(r,g,b)
  expr2 max(r,g,b)
  name ExposeHighValues
  xpos 950
  ypos -1582
 }
 Dot {
  name CurveToolQCInput
  label "  "
  note_font_size 16
  xpos 984
  ypos -1541
 }
 CurveTool {
  operation "Max Luma Pixel"
  ROI {{parent.ROI} {parent.ROI} {parent.ROI} {parent.ROI}}
  name CurveToolQC
  xpos 950
  ypos -1489
  addUserKnob {20 User}
  addUserKnob {26 maxlumatext l "Maximum of Max Luma (INF/NAN/Highlights)"}
  addUserKnob {7 maxlumr l red R -1 1}
  maxlumr {{0 x1039 0.3972167969}}
  addUserKnob {7 maxlumg l green R -1 1}
  addUserKnob {7 maxlumb l blue R -1 1}
  addUserKnob {7 maxlumall l all R -1 1}
  maxlumall {{max(maxlumr,maxlumg,maxlumb)}}
  addUserKnob {26 _2 l "Minimum of Max Luma (INF/NAN/Highlights)"}
  addUserKnob {7 minmaxlumr l red R -1 1}
  addUserKnob {7 minmaxlumg l green R -1 1}
  addUserKnob {7 minmaxlumb l blue R -1 1}
  addUserKnob {7 minmaxlumall l all R -1 1}
  minmaxlumall {{max(minmaxlumr,minmaxlumg,minmaxlumb)}}
 }
push $Nc10f0100
 Dot {
  name Dot84
  label "  "
  note_font_size 16
  xpos 1530
  ypos -1631
 }
 Expression {
  temp_name0 value
  temp_expr0 -12345
  expr0 isnan(r)?value:r
  expr1 isnan(g)?value:g
  expr2 isnan(b)?value:b
  name SwapNanFor12345
  xpos 1496
  ypos -1606
 }
 Expression {
  expr0 min(r,g,b)
  expr1 min(r,g,b)
  expr2 min(r,g,b)
  name ExposeNegatives2
  xpos 1496
  ypos -1580
 }
 Dot {
  name CurveToolQCBlacksInput
  label "  "
  note_font_size 16
  xpos 1530
  ypos -1540
 }
 CurveTool {
  operation "Max Luma Pixel"
  ROI {{parent.ROI} {parent.ROI} {parent.ROI} {parent.ROI}}
  name CurveToolQCBlacks
  xpos 1496
  ypos -1489
  addUserKnob {20 User}
  addUserKnob {26 minlumatext l "Minimum of Min Luma (Negatives)"}
  addUserKnob {7 minlumr l red R -1 1}
  addUserKnob {7 minlumg l green R -1 1}
  addUserKnob {7 minlumb l blue R -1 1}
  addUserKnob {7 minlumall l all R -1 1}
  minlumall {{min(minlumr,minlumg,minlumb)}}
  addUserKnob {26 _1 l "Maximum of Min Luma (Negatives)"}
  addUserKnob {7 maxminlumr l red R -1 1}
  addUserKnob {7 maxminlumg l green R -1 1}
  addUserKnob {7 maxminlumb l blue R -1 1}
  addUserKnob {7 maxminlumall l all R -1 1}
  maxminlumall {{min(maxminlumr,maxminlumg,maxminlumb)}}
 }
push $N866f0f90
 Expression {
  expr0 min(r,g,b)
  expr1 min(r,g,b)
  expr2 min(r,g,b)
  name ExposeNegatives1
  xpos 604
  ypos -1832
 }
 CurveTool {
  operation "Max Luma Pixel"
  ROI {0 0 {width} {height}}
  name CurveToolPlateMin
  xpos 604
  ypos -1806
 }
push $N866f0f90
 Expression {
  expr0 max(r,g,b)
  expr1 max(r,g,b)
  expr2 max(r,g,b)
  name ExposeHighValues1
  xpos 293
  ypos -1832
 }
 CurveTool {
  operation "Max Luma Pixel"
  ROI {0 0 {width} {height}}
  name CurveToolPlateMax
  xpos 293
  ypos -1806
 }
push $N49ffe7a0
 JobCrop {
  name JobCrop
  xpos 780
  ypos -1721
  mode crop
 }
end_group
push $cut_paste_input
Group {
 name QC_Tool_IE
 tile_color 0x241f00ff
 label "<font color=\"#FFF\"><b>Viewing: \[value view]</b></font><br>"
 note_font "Bitstream Vera Sans"
 note_font_size 14
 note_font_color 0xb89f00ff
 selected true
 xpos -37357
 ypos -6307
 postage_stamp_frame 0
 addUserKnob {20 QC}
 addUserKnob {4 view l View M {"Grain check" "Negative values" Highlights "NAN/INF Values" "Difference to plate" "Comp VS Plate" "Blacks - exposure" "Blacks - gamma" "Whites - exposure" "Whites - gamma" "Saturation - high" "Saturation - none"}}
 view "Difference to plate"
 addUserKnob {26 ""}
 addUserKnob {26 descriptions l "" +STARTLINE T "<b>Grain check:</b> check for missing or inconsistent grain<br>\n<b>Negative values:</b> check for negative values<br>\n<b>Highlights:</b> check for really high values<br>\n<b>NAN/INF Values:</b> check for NAN or INF values<br>\n<b>Difference to plate:</b> difference between plate and comp<br>\n<b>Comp VS Plate:</b> side by side<br>\n<b>Blacks - exposure:</b> check for matching blacks<br>\n<b>Blacks - gamma:</b> check for matching dark values<br>\n<b>Whites - exposure:</b> check for matching high values<br>\n<b>Whites - gamma:</b> check for matching high values<br>\n<b>Saturation - high:</b> check colours still work at high saturation<br>\n<b>Saturation - none:</b> check values work in greyscale<br>\n"}
 addUserKnob {26 ""}
 addUserKnob {26 Docsiepages l "" -STARTLINE T "Useful documentation"}
 addUserKnob {26 QCStandardsLink l "" +STARTLINE T "<a href=\"http://docsie3/xwiki/bin/view/Departments/Compositing/Compositing%20--%20Getting%20Started/Comp%20Fundamentals%205%3A%20Dailies%20and%20Review/QC%20standards/#\"style=\"color:#6ba2c2;\">QC standards</a>\n"}
 addUserKnob {26 CompQCLink l "" +STARTLINE T "<a href=\"http://docsie3/xwiki/bin/view/Departments/Compositing/Compositing%20--%20Knowledge%20Base/Comp%20Workflows/Comp%20QC/\"style=\"color:#6ba2c2;\">Comp QC</a>"}
 addUserKnob {20 Checklist}
 addUserKnob {22 uncheck_all l " Uncheck All / Start Again! " T "for knob in nuke.thisNode().knobs():\n    if nuke.thisNode().knob(knob).value() == True or nuke.thisNode().knob(knob).value() == False:\n        nuke.thisNode().knob(knob).setValue(False)" +STARTLINE}
 addUserKnob {26 standard_check l "<b>Standard Checklist</b>"}
 addUserKnob {6 item_1 l "all client + supervisor notes hit" +STARTLINE}
 addUserKnob {6 item_2 l "latest lighting / matches layout?" +STARTLINE}
 addUserKnob {6 item_3 l "matches editRef (check retime / repo)?" +STARTLINE}
 addUserKnob {6 item_4 l "correct frame range?" +STARTLINE}
 addUserKnob {6 item_5 l "matches similar shots in the sequence?" +STARTLINE}
 addUserKnob {6 item_6 l "cuts well with shot before/after?" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {6 item_7 l "write node channels set to \"all\"? (or RGBA if no DI mattes)" +STARTLINE}
 addUserKnob {6 item_8 l "unchanged pixels perfectly match original plate? (no filtering softness)" +STARTLINE}
 addUserKnob {6 item_9 l "format is correct?" +STARTLINE}
 addUserKnob {6 item_10 l "excess bounding box cropped?" +STARTLINE}
 addUserKnob {6 item_11 l "black / white levels match plate" +STARTLINE}
 addUserKnob {6 item_12 l "colours in comp mesh together at higher saturation?" +STARTLINE}
 addUserKnob {6 item_13 l "No negative / super hot / inf / nan pixels?" +STARTLINE}
 addUserKnob {6 item_14 l "re-grained areas match plate? (similar intensity / no ghosting)" +STARTLINE}
 addUserKnob {6 item_15 l "defocus matches plate?" +STARTLINE}
 addUserKnob {6 item_16 l "chromatic aberration / other lens artefacts match plate?" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {6 item_17 l "no penetrations in CG (ground plane, or with itself)?" +STARTLINE}
 addUserKnob {6 item_18 l "no low samples / spec sizzling?" +STARTLINE}
 addUserKnob {6 item_19 l "no visible matte lines?" +STARTLINE}
 addUserKnob {6 item_20 l "key/roto edges match size, softness + colour of plate" +STARTLINE}
 addUserKnob {6 item_21 l "no edge-of-frame encroachment (lens distortion crop or camera shake)" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 user_check l "<b>User Checklist</b>"}
 addUserKnob {22 remove_user l "Remove User Checklist Items" T "for knob in nuke.thisNode().knobs():\n    if \"user_check_\" in nuke.thisNode().knob(knob).name():\n        nuke.thisNode().removeKnob(nuke.thisNode().knob(knob))" +STARTLINE}
 addUserKnob {1 item_name l "Item: "}
 addUserKnob {22 add_item l "      Add Item     " -STARTLINE T "def add_checklist_item():\n\n    user_text = nuke.thisNode().knob('item_name').value()\n    \n    number_of_knobs = len(nuke.thisNode().knobs())\n    \n    \n    knob_name = \"user_check_\"+str(number_of_knobs)\n    \n    for knob in nuke.thisNode().knobs():\n        \n        if user_text == \"\":\n            nuke.message(\"Please enter a name for the new checklist item\")\n            return\n        \n        elif user_text == nuke.thisNode().knob(knob).label():\n            nuke.message(\"This item already exists\")\n            return\n            \n    \n    nuke.thisNode().addKnob(nuke.Boolean_Knob(knob_name, user_text, False))\n    nuke.thisNode().knob(knob_name).setFlag(0x1000)\n    \nadd_checklist_item()"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x8e8e3800
  label GrainCheck
  note_font_size 42
  xpos -716
  ypos 476
  bdwidth 333
  bdheight 247
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x8e8e3800
  label "Neg Values"
  note_font_size 42
  xpos -224
  ypos 451
  bdwidth 229
  bdheight 250
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x71c67100
  label "Super Brights"
  note_font_size 42
  xpos 271
  ypos 475
  bdwidth 338
  bdheight 250
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0x8e388e00
  label "NAN VALUES"
  note_font_size 42
  xpos 747
  ypos 471
  bdwidth 487
  bdheight 257
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x706d75ff
  label "Plate Difference"
  note_font_size 42
  xpos 1297
  ypos 471
  bdwidth 487
  bdheight 257
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x71c67100
  label "Plate vs comp"
  note_font_size 42
  xpos 1986
  ypos 487
  bdwidth 649
  bdheight 322
 }
 BackdropNode {
  inputs 0
  name BackdropNode7
  tile_color 0x398e8cff
  label "Blacks/Whites check"
  note_font_size 42
  xpos -1704
  ypos 476
  bdwidth 482
  bdheight 238
 }
 BackdropNode {
  inputs 0
  name BackdropNode8
  tile_color 0x71c67100
  label Saturation
  note_font_size 42
  xpos -1125
  ypos 467
  bdwidth 338
  bdheight 250
 }
 Input {
  inputs 0
  name COMP
  label COMP
  xpos -590
  ypos 374
 }
 Dot {
  name Dot1
  xpos -562
  ypos 444
 }
set Nb5cfea50 [stack 0]
 Dot {
  name Dot19
  label "  "
  note_font "Arial Black"
  note_font_size 16
  xpos -893
  ypos 444
 }
set Nb4bf3ab0 [stack 0]
 Saturation {
  saturation 0
  name Saturation2
  xpos -927
  ypos 577
 }
push $Nb4bf3ab0
 Dot {
  name Dot18
  label "  "
  note_font "Arial Black"
  note_font_size 16
  xpos -1056
  ypos 444
 }
set Nb4af4fc0 [stack 0]
 Saturation {
  saturation 2.5
  name Saturation1
  selected true
  xpos -1090
  ypos 577
 }
push $Nb4af4fc0
 Dot {
  name Dot13
  xpos -1330
  ypos 444
 }
set Nb49f64c0 [stack 0]
 Gamma {
  value 0.7
  name Gamma_low1
  xpos -1358
  ypos 584
 }
push $Nb49f64c0
 Dot {
  name Dot17
  xpos -1440
  ypos 444
 }
set Nb48f74e0 [stack 0]
 EXPTool {
  mode Stops
  red -4
  green -4
  blue -4
  name EXPTool_low1
  xpos -1468
  ypos 590
 }
push $Nb48f74e0
 Dot {
  name Dot16
  xpos -1550
  ypos 444
 }
set Nb47fb6a0 [stack 0]
 Gamma {
  value 5
  name Gamma_high1
  xpos -1578
  ypos 584
 }
push $Nb47fb6a0
 Dot {
  name Dot15
  xpos -1660
  ypos 444
 }
 EXPTool {
  mode Stops
  red 4
  green 4
  blue 4
  name EXPTool_high1
  xpos -1688
  ypos 590
 }
push $Nb5cfea50
 Dot {
  name Dot2
  xpos -122
  ypos 444
 }
set Nb45ff9e0 [stack 0]
 Dot {
  name Dot5
  xpos 318
  ypos 444
 }
set Nb44f4a40 [stack 0]
 Dot {
  name Dot4
  xpos 428
  ypos 444
 }
set Nb44f99a0 [stack 0]
 Dot {
  name Dot8
  xpos 868
  ypos 444
 }
set Nb44fe8f0 [stack 0]
 Dot {
  name Dot9
  xpos 1418
  ypos 444
 }
set Nb43f3950 [stack 0]
 Dot {
  name Dot10
  xpos 2518
  ypos 444
 }
 Crop {
  box {{curve} {curve} {width} {height}}
  name Crop4
  xpos 2490
  ypos 542
 }
 Transform {
  translate {{-width} {curve}}
  center {1047 858}
  shutteroffset centred
  name Transform1
  xpos 2490
  ypos 710
 }
 Input {
  inputs 0
  name PLATE
  label PLATE
  xpos 2270
  ypos 86
  number 1
 }
 Dot {
  name Dot14
  xpos 2298
  ypos 132
 }
 Crop {
  box {{curve} {curve} {width} {height}}
  name Crop2
  xpos 2270
  ypos 590
 }
set Nb40f13b0 [stack 0]
 Merge2 {
  inputs 2
  name Merge4
  xpos 2270
  ypos 710
 }
 Crop {
  box {{-width} 0 {width} {height}}
  reformat true
  crop false
  name Crop3
  xpos 2270
  ypos 734
 }
 Dot {
  name Dot12
  xpos 2298
  ypos 876
 }
push $Nb40f13b0
push $Nb43f3950
 Merge2 {
  inputs 2
  operation difference
  name Merge3
  xpos 1390
  ypos 590
 }
 EXPTool {
  mode Stops
  red 4
  green 4
  blue 4
  name EXPTool1
  xpos 1390
  ypos 638
 }
 Dot {
  name Dot11
  xpos 1418
  ypos 828
 }
push $Nb44fe8f0
 Expression {
  expr0 isinf(r)
  expr1 isinf(g)
  expr2 isinf(b)
  name Expression2
  xpos 1060
  ypos 566
 }
 FilterErode {
  channels rgba
  size -50
  name FilterErode2
  xpos 1060
  ypos 590
 }
push $Nb44fe8f0
 Expression {
  expr0 isnan(r)
  expr1 isnan(g)
  expr2 isnan(b)
  name Expression1
  xpos 840
  ypos 566
 }
 FilterErode {
  channels rgba
  size -50
  name FilterErode1
  xpos 840
  ypos 590
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge2
  xpos 840
  ypos 662
 }
 Dot {
  name Dot7
  xpos 868
  ypos 804
 }
push $Nb44f99a0
 Clamp {
  maximum 58
  name Clamp1
  xpos 400
  ypos 560
 }
push $Nb44f4a40
 Merge2 {
  inputs 2
  operation difference
  name Merge1
  xpos 290
  ypos 566
 }
set Nb36fa270 [stack 0]
 FilterErode {
  channels rgb
  size -50
  name FilterErode3
  xpos 400
  ypos 614
 }
 Clamp {
  maximum 0.3
  name Clamp3
  xpos 400
  ypos 656
 }
push $Nb36fa270
 Merge2 {
  inputs 2
  operation screen
  name Merge6
  xpos 290
  ypos 662
 }
 Dot {
  name Dot6
  xpos 318
  ypos 756
 }
push $Nb45ff9e0
 Expression {
  expr0 "r < 0 ? 1 : 0"
  expr1 "g < 0 ? 1 : 0"
  expr2 "b < 0 ? 1 : 0"
  name Expression4
  xpos -150
  ypos 590
 }
 FilterErode {
  channels rgba
  size -50
  name FilterErode4
  xpos -150
  ypos 638
 }
 Dot {
  name Dot3
  xpos -122
  ypos 732
 }
push $Nb5cfea50
 Dot {
  name Dot133
  xpos -562
  ypos 516
 }
set Nb30fb3f0 [stack 0]
 Blur {
  size 2
  name Blur78
  xpos -480
  ypos 560
 }
push $Nb30fb3f0
 Merge2 {
  inputs 2
  operation from
  name Merge124
  xpos -590
  ypos 566
 }
 Expression {
  expr0 abs(r)
  expr1 abs(g)
  expr2 abs(b)
  name Expression6
  xpos -590
  ypos 638
 }
 Grade {
  multiply 35
  name Grade28
  xpos -590
  ypos 662
 }
 Switch {
  inputs 12
  which {{parent.view}}
  name Switch1
  xpos -590
  ypos 878
 }
 Output {
  name Output1
  xpos -590
  ypos 1204
 }
end_group
